//FILE: src/virtual_actions/kmjs.virtualAction.screenCapture.ts

import { screenAreaToXml } from "../utils/template.xml.ui";
import {
  generateActionUIDXml,
  renderStopOnFailureXml,
  renderNotifyOnFailureXml,
} from "../utils/template.xml.generic";
import { generateClipboardDestinationXml } from "../utils/template.xml.clipboard";
import type { ScreenArea } from "./types/types.ui";
import type { ClipboardDestination } from "./types/types.data";
import { formatXmlAction } from "../utils/utils.xml";

/**
 * Options for the ScreenCapture virtual action.
 */
export interface ScreenCaptureOptions {
  /** Area of the screen/window to capture. */
  screenArea?: ScreenArea;
  /**
   * Clipboard destination:
   * - undefined: SystemClipboard (default, no XML key)
   * - "TriggerClipboard": sets DestinationUseTriggerClipboard
   * - { name: string, uid?: string }: NamedClipboard (sets DestinationNamedClipboardRedundantDisplayName, DestinationUseNamedClipboard; UID is optional and not required for virtual actions/macros)
   *
   * Note: The UID is not necessary for virtual actions/macros and will only be included if provided.
   */
  destination?: undefined | "TriggerClipboard" | { name: string; uid?: string };
  /** If true, capture at nominal resolution (default false). */
  alwaysNominalResolution?: boolean;
  /** If true, abort macro on failure (default false). */
  stopOnFailure?: boolean;
  /** If false, do not notify on failure (default true). */
  notifyOnFailure?: boolean;
}

/**
 * Creates a virtual ScreenCapture action for Keyboard Maestro.
 *
 * This function generates a VirtualAction that, when serialized to XML,
 * produces a valid Keyboard Maestro ScreenCapture action. It supports
 * specifying the screen area, clipboard destination, and error handling options.
 *
 * @param opts - ScreenCaptureOptions for customizing the action
 * @returns VirtualAction that emits the correct KM XML when toXml() is called
 */
export function createVirtualScreenCapture(
  opts: ScreenCaptureOptions = {},
): import("./index").VirtualAction {
  const {
    screenArea = { type: "ScreenAll" },
    destination,
    alwaysNominalResolution = false,
    stopOnFailure = false,
    notifyOnFailure = true,
  } = opts;

  // Compose the XML lines for the ScreenCapture action.
  // The clipboard destination XML is generated by the clipboard template helper.
  const xmlLines = [
    "\t<dict>",
    ...generateActionUIDXml(),
    "\t\t<key>AlwaysNominalResolution</key>",
    "\t\t<" + (alwaysNominalResolution ? "true" : "false") + "/>",
    ...generateClipboardDestinationXml(destination as ClipboardDestination),
    "\t\t<key>IncludeShadows</key>",
    "\t\t<true/>",
    "\t\t<key>MacroActionType</key>",
    "\t\t<string>ScreenCapture</string>",
    ...(notifyOnFailure === false
      ? renderNotifyOnFailureXml(notifyOnFailure)
      : []),
    ...screenAreaToXml("ScreenArea", screenArea)
      .split("\n")
      .map(function (l) {
        return "\t\t" + l;
      }),
    ...(stopOnFailure === true ? renderStopOnFailureXml(stopOnFailure) : []),
    "\t</dict>",
  ];

  return { toXml: () => formatXmlAction(xmlLines.join("\n")) };
}
