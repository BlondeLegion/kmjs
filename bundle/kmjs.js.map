{"version":3,"file":"kmjs.js","sources":["../node_modules/chalk/source/vendor/ansi-styles/index.js","../node_modules/chalk/source/vendor/supports-color/browser.js","../node_modules/chalk/source/utilities.js","../node_modules/chalk/source/index.js","../src/utils/km.engineLog.ts","../src/utils/utils.spawn.ts","../src/kmjs.runMacro.ts","../src/utils/template.xml.generic.ts","../src/utils/utils.xml.ts","../src/tokens/km.tokens.ts","../src/utils/template.xml.token.ts","../src/virtual_actions/kmjs.virtualAction.return.ts","../src/kmjs.runVirtualMacro.ts","../src/utils/template.xml.variable.ts","../src/utils/utils.styledText.ts","../src/virtual_actions/kmjs.virtualAction.insertText.ts","../src/virtual_actions/kmjs.virtualAction.displayText.ts","../src/kmjs.generateMacro.ts","../src/kmjs.kmvar.ts","../src/virtual_actions/kmjs.virtualAction.playSound.ts","../src/virtual_actions/kmjs.virtualAction.notification.ts","../src/kmjs.notify.ts","../src/tokens/km.token.lookup.ts","../src/queries/kmjs.query.getMousePosition.ts","../src/queries/kmjs.query.getFrontAppInfo.ts","../src/queries/kmjs.query.getFrontWindowInfo.ts","../src/queries/kmjs.query.getFinderSelections.ts","../src/queries/kmjs.query.getSystemClipboard.ts","../src/queries/kmjs.query.getSystemVolume.ts","../src/queries/kmjs.query.getScreenFrames.ts","../src/queries/kmjs.query.getRunningApps.ts","../src/queries/kmjs.query.getNetworkInfo.ts","../src/queries/kmjs.query.getUserInfo.ts","../src/queries/kmjs.query.getSystemVersion.ts","../src/queries/kmjs.query.getPastClipboard.ts","../src/queries/kmjs.query.getScreenResolution.ts","../src/queries/index.ts","../src/virtual_actions/kmjs.virtualAction.activate.ts","../src/virtual_actions/kmjs.virtualAction.cancel.ts","../src/utils/template.xml.ui.ts","../src/utils/utils.keystroke.mapping.ts","../src/utils/utils.keystroke.ts","../src/utils/utils.mouse.ts","../src/virtual_actions/kmjs.virtualAction.clickAtFoundImage.ts","../src/virtual_actions/kmjs.virtualAction.copy.ts","../src/virtual_actions/kmjs.virtualAction.cut.ts","../src/utils/template.xml.condition.window.ts","../src/utils/template.xml.condition.script.ts","../src/utils/template.xml.condition.ocr.ts","../src/utils/template.xml.condition.pixel.ts","../src/utils/template.xml.condition.ts","../src/virtual_actions/kmjs.virtualAction.ifThenElse.ts","../src/utils/template.xml.application.ts","../src/virtual_actions/kmjs.virtualAction.manipulateWindow.ts","../src/virtual_actions/kmjs.virtualAction.pause.ts","../src/virtual_actions/kmjs.virtualAction.quit.ts","../src/utils/template.xml.text.ts","../src/virtual_actions/kmjs.virtualAction.switchCase.ts","../src/virtual_actions/kmjs.virtualAction.typeKeystroke.ts","../src/virtual_actions/kmjs.virtualAction.setVariable.ts","../src/virtual_actions/kmjs.virtualAction.setVariableToCalculation.ts","../src/virtual_actions/kmjs.virtualAction.retryThisLoop.ts","../src/virtual_actions/kmjs.virtualAction.continueLoop.ts","../src/virtual_actions/kmjs.virtualAction.breakFromLoop.ts","../src/virtual_actions/kmjs.virtualAction.moveAndClick.ts","../src/utils/template.xml.clipboard.ts","../src/virtual_actions/kmjs.virtualAction.screenCapture.ts","../src/virtual_actions/kmjs.virtualAction.file.ts","../src/virtual_actions/kmjs.virtualAction.paste.ts","../src/virtual_actions/kmjs.virtualAction.setClipboardToText.ts","../src/virtual_actions/kmjs.virtualAction.showSpecificApp.ts","../src/virtual_actions/kmjs.virtualAction.pressButton.ts","../src/virtual_actions/kmjs.virtualAction.while.ts","../src/virtual_actions/kmjs.virtualAction.clearTypedStringBuffer.ts","../src/virtual_actions/kmjs.virtualAction.open.ts","../src/virtual_actions/kmjs.virtualAction.openURL.ts","../src/virtual_actions/kmjs.virtualAction.selectMenuItem.ts","../src/virtual_actions/kmjs.virtualAction.showStatusMenu.ts","../src/virtual_actions/kmjs.virtualAction.useVariable.ts","../src/virtual_actions/kmjs.virtualAction.group.ts","../src/virtual_actions/kmjs.virtualAction.comment.ts","../src/virtual_actions/kmjs.virtualAction.scrollWheelEvent.ts","../node_modules/fast-xml-parser/src/util.js","../node_modules/fast-xml-parser/src/validator.js","../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../node_modules/strnum/strnum.js","../node_modules/fast-xml-parser/src/ignoreAttributes.js","../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../node_modules/fast-xml-parser/src/fxp.js","../src/utils/utils.kmet.ts"],"sourcesContent":["const ANSI_BACKGROUND_OFFSET = 10;\n\nconst wrapAnsi16 = (offset = 0) => code => `\\u001B[${code + offset}m`;\n\nconst wrapAnsi256 = (offset = 0) => code => `\\u001B[${38 + offset};5;${code}m`;\n\nconst wrapAnsi16m = (offset = 0) => (red, green, blue) => `\\u001B[${38 + offset};2;${red};${green};${blue}m`;\n\nconst styles = {\n\tmodifier: {\n\t\treset: [0, 0],\n\t\t// 21 isn't widely supported and 22 does the same thing\n\t\tbold: [1, 22],\n\t\tdim: [2, 22],\n\t\titalic: [3, 23],\n\t\tunderline: [4, 24],\n\t\toverline: [53, 55],\n\t\tinverse: [7, 27],\n\t\thidden: [8, 28],\n\t\tstrikethrough: [9, 29],\n\t},\n\tcolor: {\n\t\tblack: [30, 39],\n\t\tred: [31, 39],\n\t\tgreen: [32, 39],\n\t\tyellow: [33, 39],\n\t\tblue: [34, 39],\n\t\tmagenta: [35, 39],\n\t\tcyan: [36, 39],\n\t\twhite: [37, 39],\n\n\t\t// Bright color\n\t\tblackBright: [90, 39],\n\t\tgray: [90, 39], // Alias of `blackBright`\n\t\tgrey: [90, 39], // Alias of `blackBright`\n\t\tredBright: [91, 39],\n\t\tgreenBright: [92, 39],\n\t\tyellowBright: [93, 39],\n\t\tblueBright: [94, 39],\n\t\tmagentaBright: [95, 39],\n\t\tcyanBright: [96, 39],\n\t\twhiteBright: [97, 39],\n\t},\n\tbgColor: {\n\t\tbgBlack: [40, 49],\n\t\tbgRed: [41, 49],\n\t\tbgGreen: [42, 49],\n\t\tbgYellow: [43, 49],\n\t\tbgBlue: [44, 49],\n\t\tbgMagenta: [45, 49],\n\t\tbgCyan: [46, 49],\n\t\tbgWhite: [47, 49],\n\n\t\t// Bright color\n\t\tbgBlackBright: [100, 49],\n\t\tbgGray: [100, 49], // Alias of `bgBlackBright`\n\t\tbgGrey: [100, 49], // Alias of `bgBlackBright`\n\t\tbgRedBright: [101, 49],\n\t\tbgGreenBright: [102, 49],\n\t\tbgYellowBright: [103, 49],\n\t\tbgBlueBright: [104, 49],\n\t\tbgMagentaBright: [105, 49],\n\t\tbgCyanBright: [106, 49],\n\t\tbgWhiteBright: [107, 49],\n\t},\n};\n\nexport const modifierNames = Object.keys(styles.modifier);\nexport const foregroundColorNames = Object.keys(styles.color);\nexport const backgroundColorNames = Object.keys(styles.bgColor);\nexport const colorNames = [...foregroundColorNames, ...backgroundColorNames];\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`,\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false,\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false,\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tstyles.color.ansi = wrapAnsi16();\n\tstyles.color.ansi256 = wrapAnsi256();\n\tstyles.color.ansi16m = wrapAnsi16m();\n\tstyles.bgColor.ansi = wrapAnsi16(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi256 = wrapAnsi256(ANSI_BACKGROUND_OFFSET);\n\tstyles.bgColor.ansi16m = wrapAnsi16m(ANSI_BACKGROUND_OFFSET);\n\n\t// From https://github.com/Qix-/color-convert/blob/3f0e0d4e92e235796ccb17f6e85c72094a651f49/conversions.js\n\tObject.defineProperties(styles, {\n\t\trgbToAnsi256: {\n\t\t\tvalue(red, green, blue) {\n\t\t\t\t// We use the extended greyscale palette here, with the exception of\n\t\t\t\t// black and white. normal palette only has 4 greyscale shades.\n\t\t\t\tif (red === green && green === blue) {\n\t\t\t\t\tif (red < 8) {\n\t\t\t\t\t\treturn 16;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (red > 248) {\n\t\t\t\t\t\treturn 231;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Math.round(((red - 8) / 247) * 24) + 232;\n\t\t\t\t}\n\n\t\t\t\treturn 16\n\t\t\t\t\t+ (36 * Math.round(red / 255 * 5))\n\t\t\t\t\t+ (6 * Math.round(green / 255 * 5))\n\t\t\t\t\t+ Math.round(blue / 255 * 5);\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToRgb: {\n\t\t\tvalue(hex) {\n\t\t\t\tconst matches = /[a-f\\d]{6}|[a-f\\d]{3}/i.exec(hex.toString(16));\n\t\t\t\tif (!matches) {\n\t\t\t\t\treturn [0, 0, 0];\n\t\t\t\t}\n\n\t\t\t\tlet [colorString] = matches;\n\n\t\t\t\tif (colorString.length === 3) {\n\t\t\t\t\tcolorString = [...colorString].map(character => character + character).join('');\n\t\t\t\t}\n\n\t\t\t\tconst integer = Number.parseInt(colorString, 16);\n\n\t\t\t\treturn [\n\t\t\t\t\t/* eslint-disable no-bitwise */\n\t\t\t\t\t(integer >> 16) & 0xFF,\n\t\t\t\t\t(integer >> 8) & 0xFF,\n\t\t\t\t\tinteger & 0xFF,\n\t\t\t\t\t/* eslint-enable no-bitwise */\n\t\t\t\t];\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi256: {\n\t\t\tvalue: hex => styles.rgbToAnsi256(...styles.hexToRgb(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t\tansi256ToAnsi: {\n\t\t\tvalue(code) {\n\t\t\t\tif (code < 8) {\n\t\t\t\t\treturn 30 + code;\n\t\t\t\t}\n\n\t\t\t\tif (code < 16) {\n\t\t\t\t\treturn 90 + (code - 8);\n\t\t\t\t}\n\n\t\t\t\tlet red;\n\t\t\t\tlet green;\n\t\t\t\tlet blue;\n\n\t\t\t\tif (code >= 232) {\n\t\t\t\t\tred = (((code - 232) * 10) + 8) / 255;\n\t\t\t\t\tgreen = red;\n\t\t\t\t\tblue = red;\n\t\t\t\t} else {\n\t\t\t\t\tcode -= 16;\n\n\t\t\t\t\tconst remainder = code % 36;\n\n\t\t\t\t\tred = Math.floor(code / 36) / 5;\n\t\t\t\t\tgreen = Math.floor(remainder / 6) / 5;\n\t\t\t\t\tblue = (remainder % 6) / 5;\n\t\t\t\t}\n\n\t\t\t\tconst value = Math.max(red, green, blue) * 2;\n\n\t\t\t\tif (value === 0) {\n\t\t\t\t\treturn 30;\n\t\t\t\t}\n\n\t\t\t\t// eslint-disable-next-line no-bitwise\n\t\t\t\tlet result = 30 + ((Math.round(blue) << 2) | (Math.round(green) << 1) | Math.round(red));\n\n\t\t\t\tif (value === 2) {\n\t\t\t\t\tresult += 60;\n\t\t\t\t}\n\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tenumerable: false,\n\t\t},\n\t\trgbToAnsi: {\n\t\t\tvalue: (red, green, blue) => styles.ansi256ToAnsi(styles.rgbToAnsi256(red, green, blue)),\n\t\t\tenumerable: false,\n\t\t},\n\t\thexToAnsi: {\n\t\t\tvalue: hex => styles.ansi256ToAnsi(styles.hexToAnsi256(hex)),\n\t\t\tenumerable: false,\n\t\t},\n\t});\n\n\treturn styles;\n}\n\nconst ansiStyles = assembleStyles();\n\nexport default ansiStyles;\n","/* eslint-env browser */\n\nconst level = (() => {\n\tif (!('navigator' in globalThis)) {\n\t\treturn 0;\n\t}\n\n\tif (globalThis.navigator.userAgentData) {\n\t\tconst brand = navigator.userAgentData.brands.find(({brand}) => brand === 'Chromium');\n\t\tif (brand && brand.version > 93) {\n\t\t\treturn 3;\n\t\t}\n\t}\n\n\tif (/\\b(Chrome|Chromium)\\//.test(globalThis.navigator.userAgent)) {\n\t\treturn 1;\n\t}\n\n\treturn 0;\n})();\n\nconst colorSupport = level !== 0 && {\n\tlevel,\n\thasBasic: true,\n\thas256: level >= 2,\n\thas16m: level >= 3,\n};\n\nconst supportsColor = {\n\tstdout: colorSupport,\n\tstderr: colorSupport,\n};\n\nexport default supportsColor;\n","// TODO: When targeting Node.js 16, use `String.prototype.replaceAll`.\nexport function stringReplaceAll(string, substring, replacer) {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.slice(endIndex, index) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n\nexport function stringEncaseCRLFWithFirstIndex(string, prefix, postfix, index) {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.slice(endIndex, (gotCR ? index - 1 : index)) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.slice(endIndex);\n\treturn returnValue;\n}\n","import ansiStyles from '#ansi-styles';\nimport supportsColor from '#supports-color';\nimport { // eslint-disable-line import/order\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex,\n} from './utilities.js';\n\nconst {stdout: stdoutColor, stderr: stderrColor} = supportsColor;\n\nconst GENERATOR = Symbol('GENERATOR');\nconst STYLER = Symbol('STYLER');\nconst IS_EMPTY = Symbol('IS_EMPTY');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m',\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nexport class Chalk {\n\tconstructor(options) {\n\t\t// eslint-disable-next-line no-constructor-return\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = (...strings) => strings.join(' ');\n\tapplyOptions(chalk, options);\n\n\tObject.setPrototypeOf(chalk, createChalk.prototype);\n\n\treturn chalk;\n};\n\nfunction createChalk(options) {\n\treturn chalkFactory(options);\n}\n\nObject.setPrototypeOf(createChalk.prototype, Function.prototype);\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this[STYLER]), this[IS_EMPTY]);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t},\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this[STYLER], true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t},\n};\n\nconst getModelAnsi = (model, level, type, ...arguments_) => {\n\tif (model === 'rgb') {\n\t\tif (level === 'ansi16m') {\n\t\t\treturn ansiStyles[type].ansi16m(...arguments_);\n\t\t}\n\n\t\tif (level === 'ansi256') {\n\t\t\treturn ansiStyles[type].ansi256(ansiStyles.rgbToAnsi256(...arguments_));\n\t\t}\n\n\t\treturn ansiStyles[type].ansi(ansiStyles.rgbToAnsi(...arguments_));\n\t}\n\n\tif (model === 'hex') {\n\t\treturn getModelAnsi('rgb', level, type, ...ansiStyles.hexToRgb(...arguments_));\n\t}\n\n\treturn ansiStyles[type][model](...arguments_);\n};\n\nconst usedModels = ['rgb', 'hex', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'color', ...arguments_), ansiStyles.color.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(getModelAnsi(model, levelMapping[level], 'bgColor', ...arguments_), ansiStyles.bgColor.close, this[STYLER]);\n\t\t\t\treturn createBuilder(this, styler, this[IS_EMPTY]);\n\t\t\t};\n\t\t},\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this[GENERATOR].level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis[GENERATOR].level = level;\n\t\t},\n\t},\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent,\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\t// Single argument is hot path, implicit coercion is faster than anything\n\t// eslint-disable-next-line no-implicit-coercion\n\tconst builder = (...arguments_) => applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\n\t// We alter the prototype because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tObject.setPrototypeOf(builder, proto);\n\n\tbuilder[GENERATOR] = self;\n\tbuilder[STYLER] = _styler;\n\tbuilder[IS_EMPTY] = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self[IS_EMPTY] ? '' : string;\n\t}\n\n\tlet styler = self[STYLER];\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.includes('\\u001B')) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nObject.defineProperties(createChalk.prototype, styles);\n\nconst chalk = createChalk();\nexport const chalkStderr = createChalk({level: stderrColor ? stderrColor.level : 0});\n\nexport {\n\tmodifierNames,\n\tforegroundColorNames,\n\tbackgroundColorNames,\n\tcolorNames,\n\n\t// TODO: Remove these aliases in the next major version\n\tmodifierNames as modifiers,\n\tforegroundColorNames as foregroundColors,\n\tbackgroundColorNames as backgroundColors,\n\tcolorNames as colors,\n} from './vendor/ansi-styles/index.js';\n\nexport {\n\tstdoutColor as supportsColor,\n\tstderrColor as supportsColorStderr,\n};\n\nexport default chalk;\n","//FILE: src/utils/km.engineLog.ts\n\nimport chalk from \"chalk\";\n\n/** Byte-offset we last read from. */\nlet lastPos = 0;\n\n/** Lazy-loaded log path to avoid calling os.homedir() at module load time */\nfunction getLogPath(): string {\n  try {\n    const os = require(\"os\");\n    return `${os.homedir()}/Library/Logs/Keyboard Maestro/Engine.log`;\n  } catch (error) {\n    // Fallback for environments where os module isn't available\n    console.warn(\"[km.engineLog] os module not available, using fallback path\");\n    return \"/tmp/keyboard-maestro-engine.log\";\n  }\n}\n\n/**\n * Begin watching the Keyboard Maestro Engine log for new entries.\n * We don’t actually tail in real time—just record where we are now.\n */\nexport function startWatching(): void {\n  const logPath = getLogPath();\n  const fs = require(\"fs\");\n\n  // Safe fs check\n  const existsSync =\n    typeof fs.existsSync === \"function\" ? fs.existsSync : () => false;\n  const statSync =\n    typeof fs.statSync === \"function\" ? fs.statSync : () => ({ size: 0 });\n\n  lastPos = existsSync(logPath) ? statSync(logPath).size : 0;\n}\n\n/**\n * Return any lines containing failure or error indicators since we last watched or optionally since a given position.\n * @param since - Optional position in the log file to start reading from.\n */\nexport function getErrors(since?: number): string[] {\n  const logPath = getLogPath();\n  const fs = require(\"fs\");\n\n  // Safe fs checks\n  const existsSync =\n    typeof fs.existsSync === \"function\" ? fs.existsSync : () => false;\n  const statSync =\n    typeof fs.statSync === \"function\" ? fs.statSync : () => ({ size: 0 });\n  const openSync = typeof fs.openSync === \"function\" ? fs.openSync : null;\n  const readSync = typeof fs.readSync === \"function\" ? fs.readSync : null;\n\n  if (!existsSync(logPath) || !openSync || !readSync) return [];\n\n  // --- read only the *new* bytes -----------------------------------------\n  const fileSize = statSync(logPath).size;\n  const startPos = since ?? lastPos;\n  if (fileSize <= startPos) {\n    lastPos = fileSize;\n    return [];\n  }\n\n  const byteCount = fileSize - startPos;\n  const buffer = Buffer.alloc(byteCount);\n  const fd = openSync(logPath, \"r\");\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const _bytes = readSync(fd, buffer, 0, byteCount, startPos);\n  const tail = buffer.toString(\"utf8\");\n  lastPos = fileSize;\n\n  const lines = tail.split(/\\r?\\n/);\n  return lines.filter((l) => /\\b(fail(?:ed|ure)?|error)\\b/i.test(l));\n}\n\n/**\n * Strip leading timestamp from each log line.\n * @param lines - Raw log lines\n */\nexport function stripTimestamps(lines: string[]): string[] {\n  return lines.map((l) =>\n    l.replace(/^[\\d]{4}-[\\d]{2}-[\\d]{2} [\\d]{2}:[\\d]{2}:[\\d]{2} /, \"\"),\n  );\n}\n\n/**\n * Stop watching the log (No-op).\n */\nexport function stopWatching(): void {\n  // nothing to do\n}\n\n/**\n * Check and report any errors found in the Keyboard Maestro Engine log.\n * Logs errors in red if found.\n * @param xml - Optional XML string to print after errors.\n * @returns true if errors were reported, false otherwise.\n */\nexport function reportErrors(xml?: string): boolean {\n  const errors = stripTimestamps(getErrors());\n  if (errors.length > 0) {\n    console.log();\n    console.log(\n      chalk.red.bold(\"[km.engineLog] Virtual macro reported engine errors:\"),\n    );\n    console.log(\n      chalk.grey(\"----------------------------------------------------\"),\n    );\n    errors.forEach((err) => {\n      console.log(chalk.bgRed(\"  • \") + \"\\t\" + chalk.redBright(err));\n      console.log();\n    });\n    if (xml) {\n      console.log(chalk.grey(\"[km.engineLog] Executed XML:\"));\n      xml.split(\"\\n\").forEach((line) => console.log(chalk.grey(\"  \" + line)));\n      console.log();\n    }\n    return true;\n  }\n  return false;\n}\n","//FILE: src/utils/spawn.utils.ts\n\n/**\n * Utility to safely obtain spawnSync even when bundlers replace child_process with stubs.\n * This handles CEP environments where the bundler stubs Node.js modules but the runtime\n * still has access to the real Node.js APIs.\n */\nexport function getSafeSpawnSync(): typeof import(\"child_process\").spawnSync {\n  let spawnSync: typeof import(\"child_process\").spawnSync | undefined;\n\n  // ① First try the local (possibly-stubbed) require\n  try {\n    spawnSync = require?.(\"child_process\")?.spawnSync;\n  } catch {\n    /* ignore */\n  }\n\n  // ② If that failed, grab the copy exposed on globalThis by the host environment\n  if (!spawnSync && typeof globalThis !== \"undefined\") {\n    try {\n      spawnSync = (globalThis as any).__cgNodeRequire?.(\n        \"child_process\",\n      )?.spawnSync;\n    } catch {\n      /* ignore */\n    }\n  }\n\n  if (typeof spawnSync !== \"function\") {\n    throw new Error(\n      \"child_process.spawnSync not available in this environment\",\n    );\n  }\n\n  return spawnSync;\n}\n","//FILE: src/kmjs.runMacro.ts\n\n/**\n * @file kmjs.runMacro.ts\n * @module kmjs.runMacro\n * @description Run a Keyboard Maestro macro via JXA/osascript.\n *\n * Spawns an osascript process, invokes the specified macro UUID or name\n * with an optional parameter, and returns whatever the macro’s final\n * 'Return' action outputs as a string.\n *\n * @example\n * import { runMacro } from 'kmjs';\n * const result = runMacro({ macroId: '...', parameter: { foo: 'bar' } });\n */\n// Lazy import to avoid CEP environment issues\nimport chalk from \"chalk\";\nimport {\n  startWatching,\n  getErrors,\n  stripTimestamps,\n  stopWatching,\n} from \"./utils/km.engineLog\";\nimport { getSafeSpawnSync } from \"./utils/utils.spawn\";\n\n/**\n * Parameters accepted by {@link runMacro}.\n */\nexport interface RunMacroOptions {\n  /** Keyboard Maestro macro UUID or name. */\n  macroId: string;\n  /** Parameter to pass to the macro (objects are JSON‑stringified). */\n  parameter?: unknown;\n}\n\n/**\n * Escape a value so it can be embedded inside the single‑quoted JXA template.\n * @param str - String to escape for JXA\n * @returns Escaped string\n */\nfunction escapeForJXA(str: string): string {\n  return str\n    .replace(/\\\\/g, \"\\\\\\\\\") // backslashes\n    .replace(/'/g, \"\\\\'\") // single quotes\n    .replace(/\\n/g, \"\\\\n\") // newlines\n    .replace(/\\r/g, \"\\\\r\"); // carriage returns\n}\n\n/**\n * Execute a Keyboard Maestro macro.\n *\n * @param options.macroId - UUID or name of the macro.\n * @param options.parameter - Optional parameter to pass; objects are JSON-stringified.\n * @returns The string output from the macro’s final 'Return' action.\n * @throws If the osascript process fails or the macro errors.\n */\nexport function runMacro({ macroId, parameter = \"\" }: RunMacroOptions): string {\n  const paramString =\n    typeof parameter === \"object\"\n      ? JSON.stringify(parameter)\n      : String(parameter);\n\n  const jxa = `\n(function () {\n  var kme = Application('Keyboard Maestro Engine');\n  var result = kme.doScript('${macroId}', { withParameter: '${escapeForJXA(paramString)}' });\n  return (result !== undefined && result !== null) ? String(result) : '';\n})();`;\n\n  // 🔍 Debug logging:\n  console.log(chalk.magenta(`[kmjs.runMacro] Macro ID: ${macroId}`));\n  console.log(chalk.gray(`[kmjs.runMacro] Param: ${paramString}`));\n  console.log(chalk.gray(`[kmjs.runMacro] JXA →\\n${jxa}`));\n\n  startWatching();\n\n  const spawnSync = getSafeSpawnSync();\n\n  const { status, stdout, stderr, error } = spawnSync(\n    \"osascript\",\n    [\"-l\", \"JavaScript\", \"-e\", jxa],\n    { encoding: \"utf8\" },\n  );\n\n  if (error) {\n    console.error(chalk.red(\"[kmjs.runMacro] spawnSync error:\"), error);\n    stopWatching();\n    throw error;\n  }\n  if (status !== 0) {\n    console.error(chalk.red(`[kmjs.runMacro] osascript stderr:\\n${stderr}`));\n    stopWatching();\n    throw new Error(`osascript failed: ${stderr.trim()}`);\n  }\n\n  const engineErrors = stripTimestamps(getErrors());\n  if (engineErrors.length) {\n    const divider = chalk.bgRed(\" \".repeat(48));\n    console.log();\n    console.log(divider);\n    console.log(chalk.whiteBright.bgRed.bold(\"[kmjs.runMacro] Engine Errors:\"));\n    engineErrors.forEach((err, idx) => {\n      const bullet = chalk.redBright(\"  • \");\n      const msg =\n        idx % 2 === 0\n          ? chalk.yellowBright.bold(err)\n          : chalk.whiteBright.bold(err);\n      console.log(bullet + msg);\n    });\n    console.log(divider);\n    console.log();\n  }\n  stopWatching();\n\n  console.log(chalk.green(`[kmjs.runMacro] stdout: ${stdout.trim()}`));\n  return stdout.trim();\n}\n","//FILE: src/utils/template.xml.generic.ts\n\n/**\n * Shared utilities for generating Keyboard Maestro action XML templates.\n */\n\n/**\n * Options for generating action UIDs.\n */\nexport interface ActionUIDOptions {\n  /** Optional custom timestamp base. If not provided, uses current time. */\n  timestamp?: number;\n}\n\n/**\n * Standard Keyboard Maestro .kmmacros XML header (PLIST format).\n * Use this at the start of any generated macro XML.\n */\nexport const PLIST_HEADER =\n  `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n` +\n  `<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" ` +\n  `\"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\\n` +\n  `<plist version=\"1.0\">\\n<array>\\n`;\n\n/**\n * Standard Keyboard Maestro .kmmacros XML footer (PLIST format).\n * Use this at the end of any generated macro XML.\n */\nexport const PLIST_FOOTER = \"</array>\\n</plist>\";\n\n/**\n * Generates a unique action UID for Keyboard Maestro actions.\n * Uses Unix timestamp in seconds as the base for uniqueness.\n *\n * @param opts - Options for UID generation\n * @returns A numeric UID suitable for KM actions\n */\nexport function generateActionUID(opts: ActionUIDOptions = {}): number {\n  const { timestamp = Date.now() } = opts;\n  return Math.floor(timestamp / 1000);\n}\n\n/**\n * Generates the ActionUID XML key-value pair for KM actions.\n *\n * @param opts - Options for UID generation\n * @returns Array of XML lines for the ActionUID\n */\nexport function generateActionUIDXml(opts: ActionUIDOptions = {}): string[] {\n  const uid = generateActionUID(opts);\n  return [\"\\t\\t<key>ActionUID</key>\", `\\t\\t<integer>${uid}</integer>`];\n}\n\n/**\n * Renders the StopOnFailure XML key only if the value is explicitly true.\n * If undefined or false, omits the key (KM only stores this when true).\n *\n * @param stopOnFailure - Whether failure aborts the macro (default true)\n * @returns Array of XML lines (empty if omitted)\n */\nexport function renderStopOnFailureXml(stopOnFailure?: boolean): string[] {\n  if (stopOnFailure === true) {\n    return [\"\\t\\t<key>StopOnFailure</key>\", \"\\t\\t<true/>\"];\n  }\n  return [];\n}\n\n/**\n * Renders the NotifyOnFailure XML key if the value is explicitly false.\n * If undefined or true, omits the key (default KM behavior).\n *\n * @param notifyOnFailure - Whether to notify on failure (default true)\n * @returns Array of XML lines (empty if omitted)\n */\nexport function renderNotifyOnFailureXml(notifyOnFailure?: boolean): string[] {\n  if (notifyOnFailure === false) {\n    return [\"\\t\\t<key>NotifyOnFailure</key>\", \"\\t\\t<false/>\"];\n  }\n  return [];\n}\n\n/**\n * Renders timeout-related XML keys based on Keyboard Maestro's behavior patterns.\n *\n * KM's XML inclusion rules based on ground truth analysis:\n * - TimeOutAbortsMacro: Always included (true or false)\n * - NotifyOnTimeOut: Only included when it differs from the expected default behavior:\n *   - When timeoutAborts=true: NotifyOnTimeOut is included only if it's false\n *   - When timeoutAborts=false: NotifyOnTimeOut is included only if it's true\n *\n * @param options - Timeout configuration options\n * @param options.notifyOnTimeout - Whether to notify on timeout (default true)\n * @param options.timeoutAborts - Whether timeout aborts the macro (default true)\n * @returns Array of XML lines for timeout configuration\n */\nexport function renderTimeoutXml(\n  options: {\n    notifyOnTimeout?: boolean;\n    timeoutAborts?: boolean;\n  } = {},\n): string[] {\n  const { notifyOnTimeout = true, timeoutAborts = true } = options;\n\n  const xmlLines: string[] = [];\n\n  // NotifyOnTimeOut is included when it differs from expected behavior:\n  // - If timeoutAborts=true and notifyOnTimeout=false (non-default)\n  // - If timeoutAborts=false and notifyOnTimeout=true (non-default for this case)\n  const shouldIncludeNotifyOnTimeOut =\n    (timeoutAborts === true && notifyOnTimeout === false) ||\n    (timeoutAborts === false && notifyOnTimeout === true);\n\n  if (shouldIncludeNotifyOnTimeOut) {\n    xmlLines.push(\n      \"\\t\\t<key>NotifyOnTimeOut</key>\",\n      notifyOnTimeout ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    );\n  }\n\n  // TimeOutAbortsMacro is always included\n  xmlLines.push(\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    timeoutAborts ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n  );\n\n  return xmlLines;\n}\n\n/**\n * @deprecated Use renderTimeoutXml instead for consistent timeout handling\n */\nexport function renderTimeOutAbortsMacroXml(\n  timeoutAborts: boolean = true,\n): string[] {\n  return renderTimeoutXml({ timeoutAborts });\n}\n\n/**\n * @deprecated Use renderTimeoutXml instead for consistent timeout handling\n */\nexport function renderNotifyOnTimeOutXml(\n  notifyOnTimeout: boolean = true,\n): string[] {\n  return renderTimeoutXml({ notifyOnTimeout });\n}\n","//FILE: src/utils/utils.xml.ts\n\nimport type { ScreenArea } from \"../virtual_actions/types\";\n\n/**\n * Escape special characters for safe inclusion in XML text nodes.\n * @param str - Raw string to escape.\n * @returns A string with XML entities substituted.\n */\nexport function escapeForXml(str: string): string {\n  return str.replace(\n    /[<>&'\"]/g,\n    (c) =>\n      ({\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        \"&\": \"&amp;\",\n        \"'\": \"&apos;\",\n        '\"': \"&quot;\",\n      })[c as \"<\" | \">\" | \"&\" | \"'\" | '\"']!,\n  );\n}\n\n/**\n * Indents each line of a given text block by a specified number of tabs.\n * @param text - Multiline string to indent.\n * @param tabs - Number of tab characters to insert on each line.\n * @returns Indented multiline string.\n */\nexport function indent(text: string, tabs = 1): string {\n  const pad = \"\\t\".repeat(tabs);\n  return text\n    .trim()\n    .split(\"\\n\")\n    .map((line) => (line.trim() ? pad + line : line))\n    .join(\"\\n\");\n}\n\n/**\n * Formats XML action content with proper KM-style nested indentation.\n * Applies appropriate indentation levels: dict at 1 tab, contents at 2 tabs.\n * Preserves multiline string content without adding extra indentation.\n * @param content - The XML content to format\n * @returns Properly indented XML string matching KM's format\n */\nexport function formatXmlAction(content: string): string {\n  const lines = content.trim().split(\"\\n\");\n  let insideMultilineString = false;\n\n  return lines\n    .map((line) => {\n      const trimmed = line.trim();\n      if (!trimmed) return line;\n\n      // Detect multiline string patterns\n      if (trimmed.startsWith(\"<string>\") && !trimmed.endsWith(\"</string>\")) {\n        // Starting a multiline string\n        insideMultilineString = true;\n        return \"\\t\\t\" + trimmed;\n      } else if (insideMultilineString && trimmed === \"</string>\") {\n        // Ending a multiline string\n        insideMultilineString = false;\n        return \"\\t\\t\" + trimmed;\n      } else if (insideMultilineString) {\n        // Inside a multiline string - don't add extra indentation\n        return line;\n      }\n\n      // <dict> and </dict> get 1 tab\n      if (trimmed === \"<dict>\" || trimmed === \"</dict>\") {\n        return \"\\t\" + trimmed;\n      }\n\n      // Everything else inside dict gets 2 tabs\n      return \"\\t\\t\" + trimmed;\n    })\n    .join(\"\\n\");\n}\n\n/**\n * Sorts object keys in Keyboard Maestro's canonical order.\n * This handles the general XML dict ordering requirements across all KM actions.\n * @param keys - Array of keys to sort\n * @param context - Optional context hint for specialized ordering (e.g. 'condition', 'action', 'application')\n * @returns Sorted array with keys in KM's canonical order\n */\nexport function kmKeyOrder(keys: string[], context?: string): string[] {\n  if (context === \"condition\") {\n    const flagKeys = [\n      \"IsFrontApplication\",\n      \"IsFrontWindow\",\n      \"IsFront\",\n      // feel free to add more here later\n    ];\n    return keys.sort((a, b) => {\n      const aIsFlag = flagKeys.includes(a);\n      const bIsFlag = flagKeys.includes(b);\n      // ConditionType just before flags\n      if (a === \"ConditionType\" && bIsFlag) return -1;\n      if (b === \"ConditionType\" && aIsFlag) return 1;\n      // ConditionType after regular fields but before flags\n      // if (a === \"ConditionType\") return 1;\n      // if (b === \"ConditionType\") return -1;\n      // flags always go last (keep their relative order)\n      if (aIsFlag && !bIsFlag) return 1;\n      if (bIsFlag && !aIsFlag) return -1;\n      // alphabetical fallback\n      return a.localeCompare(b, \"en\");\n    });\n  }\n\n  return keys.sort((a, b) => {\n    // For action contexts, MacroActionType typically comes early\n    if (context === \"action\") {\n      if (a === \"MacroActionType\") return -1;\n      if (b === \"MacroActionType\") return 1;\n      // ActionUID if present\n      if (a === \"ActionUID\") return -1;\n      if (b === \"ActionUID\") return 1;\n      // Then alphabetical\n      return a.localeCompare(b, \"en\");\n    }\n\n    // For application contexts, sort specific keys first\n    if (context === \"application\") {\n      const appKeyOrder = [\n        \"BundleIdentifier\",\n        \"Match\",\n        \"Name\",\n        \"NewFile\",\n        \"Path\",\n      ];\n      const aIndex = appKeyOrder.indexOf(a);\n      const bIndex = appKeyOrder.indexOf(b);\n\n      if (aIndex !== -1 && bIndex !== -1) return aIndex - bIndex;\n      if (aIndex !== -1) return -1;\n      if (bIndex !== -1) return 1;\n      return a.localeCompare(b, \"en\");\n    }\n\n    // Default: alphabetical sorting\n    return a.localeCompare(b, \"en\");\n  });\n}\n\n/**\n * Renders an array with proper formatting. If content is empty, returns <array/>.\n * If content exists, returns <array>\\n{content}\\n</array> with proper indentation.\n * @param content - The content to put inside the array\n * @param indentLevel - Number of tabs to indent the array tags\n * @returns Properly formatted array XML\n */\nexport function formatArrayXml(content: string, indentLevel = 1): string {\n  const indent = \"\\t\".repeat(indentLevel);\n\n  if (!content || content.trim() === \"\") {\n    return `${indent}<array/>`;\n  }\n\n  return `${indent}<array>\\n${content}\\n${indent}</array>`;\n}\n\n/**\n * Generates a Keyboard Maestro time code for CreationDate/ModificationDate.\n * Returns seconds since epoch as a float, e.g. 774213049.26031303\n */\nexport function generateKMTimeCode(): number {\n  return Date.now() / 1000;\n}\n","// FILE: src/tokens/km.tokens.ts\n\n/**\n * @file A comprehensive, documented list of all Keyboard Maestro text tokens.\n * @description This file provides a constant object `KM_TOKENS` where each key is a PascalCase\n * representation of a Keyboard Maestro token, and its value is the raw token string (e.g., `%RandomUUID%`).\n * Each token is accompanied by detailed JSDoc documentation sourced from the Keyboard Maestro documentation.\n */\n\nexport const KM_TOKENS = {\n  /**\n   * **A Random Unique ID**\n   *\n   * Returns a brand‑new UUID (v4) every time it is expanded. Handy for unique temp filenames, correlation IDs for logs, or deduplicating runs of a macro.\n   *\n   * **Why this over `%Calculate%` etc?** You cannot reliably generate RFC‑4122 UUIDs with Keyboard Maestro math/functions. Use this when you truly need uniqueness without maintaining state.\n   *\n   * @token %RandomUUID%\n   * @since v8\n   * @category System\n   * @example\n   * // Give a file a unique suffix\n   * Set Variable “Path” to Text: ~/Desktop/output-%RandomUUID%.txt\n   * @see https://wiki.keyboardmaestro.com/token/RandomUUID\n   */\n  ARandomUniqueID: \"%RandomUUID%\",\n\n  /**\n   * **AddressBook Email**\n   *\n   * Reads a field from your macOS Contacts “Me” card. Use this to personalise snippets, fill forms, or route mail without hard‑coding values.\n   *\n   * **Sibling tokens:** `%AddressBook%Name%`, `%AddressBook%First%`, `%AddressBook%Last%`, `%AddressBook%Nickname%`, `%AddressBook%Organization%`, `%AddressBook%Note%`.\n   *\n   * Prefer these tokens when you always want *your* identity, not the frontmost Mail message (see the `Mail*` tokens).\n   *\n   * @token %AddressBook%Email%\n   * @category System\n   * @example Use in an email template snippet: “From: %AddressBook%Name% &lt;%AddressBook%Email%&gt;”\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookEmail: \"%AddressBook%Email%\",\n\n  /**\n   * **AddressBook First Name**\n   *\n   * Your given name from the macOS Contacts “Me” card.\n   * Complementary with `%AddressBook%Last%`.\n   *\n   * @token %AddressBook%First%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookFirstName: \"%AddressBook%First%\",\n\n  /**\n   * **AddressBook Last Name**\n   *\n   * Family/surname from the Contacts “Me” card. Combine with `%AddressBook%First%` or `%AddressBook%Name%` as needed.\n   *\n   * @token %AddressBook%Last%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookLastName: \"%AddressBook%Last%\",\n\n  /**\n   * **AddressBook Name**\n   *\n   * Full display name from the “Me” card, respecting locale order (e.g. “Jane Doe”).\n   * Faster than concatenating first/last manually.\n   *\n   * @token %AddressBook%Name%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookName: \"%AddressBook%Name%\",\n\n  /**\n   * **AddressBook Nickname**\n   *\n   * The “nickname” field of your Contacts card. Useful for casual email openings.\n   *\n   * @token %AddressBook%Nickname%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookNickname: \"%AddressBook%Nickname%\",\n\n  /**\n   * **AddressBook Note**\n   *\n   * Arbitrary notes stored on your “Me” card (could hold license keys, disclaimers, etc.).\n   * Retrieve securely without hard-coding secrets in macros.\n   *\n   * @token %AddressBook%Note%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookNote: \"%AddressBook%Note%\",\n\n  /**\n   * **AddressBook Organization**\n   *\n   * Company/organisation field from your card — ideal for letterheads or email signatures.\n   *\n   * @token %AddressBook%Organization%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/AddressBook\n   */\n  AddressBookOrganization: \"%AddressBook%Organization%\",\n\n  /**\n   * **All Audio Input Devices**\n   *\n   * List every microphone or aggregate input your Mac can “see”, one per line.\n   * Great for building *choose‑input* palettes or sanity‑checking device names before a script switches input via shell.\n   *\n   * **Compare:**\n   * • `%AudioInputDevice%` → *current* input only.\n   * • `%AudioOutputDevices%` → speakers/headphones.\n   *\n   * @token %AudioInputDevices%\n   * @category Audio\n   * @example\n   * Prompt With List ─ Items: `%AudioInputDevices%`\n   * @see https://wiki.keyboardmaestro.com/token/AudioInputDevices\n   */\n  AllAudioInputDevices: \"%AudioInputDevices%\",\n\n  /**\n   * **All Audio Output Devices**\n   *\n   * Names every playback device the CoreAudio HAL reports (built‑in, USB, AirPlay, aggregate), one per line.\n   * Use to populate a menu or to verify exact spelling before issuing `SwitchAudioSource`.\n   *\n   * @token %AudioOutputDevices%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioOutputDevices\n   */\n  AllAudioOutputDevices: \"%AudioOutputDevices%\",\n\n  /**\n   * **All Background Application Names**\n   *\n   * Every *running* app **without** a Dock icon (daemons, helpers), one per line.\n   * Use to debug launch agents or to ensure headless apps (e.g. Dropbox) are alive.\n   *\n   * @token %Application%Background%\n   * @category Application\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  AllBackgroundApplicationNames: \"%Application%Background%\",\n\n  /**\n   * **All Foreground Application Names**\n   *\n   * Running apps with visible UI (Dock icons).\n   * Useful for building app‑switcher palettes or conditional workflows that ignore background utilities.\n   *\n   * @token %Application%Foreground%\n   * @category Application\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  AllForegroundApplicationNames: \"%Application%Foreground%\",\n\n  /**\n   * **All Running Application Names**\n   *\n   * Union of foreground + background. Think of it as `ps` filtered to GUI & agents.\n   * Iterate to quit everything except a safelist.\n   *\n   * @token %Application%All%\n   * @category Application\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  AllRunningApplicationNames: \"%Application%All%\",\n\n  /**\n   * **All Screen Frames**\n   *\n   * Frames (left,top,width,height) for **all** connected displays, from left to right, one per line. Great for iterating windows across monitors.\n   *\n   * Compare with:\n   *  - `%Screen%Main%` / `%Screen%1%` – a single screen.\n   *  - `%ScreenVisible%…%` – excludes the menu bar and Dock areas.\n   *\n   * Coordinates are measured from the top‑left of the **main** screen.\n   *\n   * @token %Screen%All%\n   * @category Screen\n   * @example\n   * For Each line in `%Screen%All%` → move a window to each screen in turn.\n   * @see https://wiki.keyboardmaestro.com/token/Screen\n   */\n  AllScreenFrames: \"%Screen%All%\",\n\n  /**\n   * **All Window Names**\n   *\n   * Titles of *every* window in the front app, newline‑separated.\n   * Combine with a “Prompt With List” to let users pick a window to focus.\n   *\n   * @token %WindowName%All%\n   * @category Window\n   * @see https://wiki.keyboardmaestro.com/token/Window_Tokens\n   */\n  AllWindowNames: \"%WindowName%All%\",\n\n  /**\n   * **Calculation**\n   *\n   * Numerically evaluate a formula. Variables are read as numbers (not strings), functions are allowed, and the result is returned **without** formatting.\n   *\n   * **Use when:** you need arithmetic, comparisons, or to coerce a variable like `\"007\"` to the number `7`. For string output with formatting, see {@link FormattedCalculation}.\n   *\n   * @token %Calculate%<formula>%\n   * @category Calculation\n   * @examples\n   *  - %Calculate%1+2%\n   *  - %Calculate%(MyVarWordsPerSec*60)/MyVarWordsPerPage%\n   *  - %Calculate%RANDOM(10)%\n   * @difference\n   * `%Variable%MyVar%` returns **the literal string** of the variable, `%Calculate%MyVar%` returns its numeric interpretation.\n   * @see https://wiki.keyboardmaestro.com/token/Calculate\n   */\n  Calculation: \"%Calculate%1+2%\",\n\n  /**\n   * **Calculation with Result in Binary**\n   *\n   * Returns the result of a calculation formatted as **binary**, padded to *N* digits.\n   *\n   * @token %BinN%<formula>%\n   * @category Calculation\n   * @example %Bin8%10%  → 00001010\n   * @see https://wiki.keyboardmaestro.com/token/Calculate\n   */\n  CalculationWithResultInBinary: \"%Bin8%1+2%\",\n\n  /**\n   * **Calculation with Result in Decimal**\n   *\n   * Returns the result of a calculation as **decimal**, left‑padded with zeros to *N* digits.\n   *\n   * @token %DecN%<formula>%\n   * @category Calculation\n   * @example %Dec5%123% → 00123\n   * @see https://wiki.keyboardmaestro.com/token/Calculate\n   */\n  CalculationWithResultInDecimal: \"%Dec2%1+2%\",\n\n  /**\n   * **Calculation with Result in Hex**\n   *\n   * Returns the result of a calculation as **hexadecimal**, left‑padded with zeros to *N* digits.\n   *\n   * @token %HexN%<formula>%\n   * @category Calculation\n   * @example %Hex4%255% → 00FF\n   * @see https://wiki.keyboardmaestro.com/token/Calculate\n   */\n  CalculationWithResultInHex: \"%Hex2%1+2%\",\n\n  /**\n   * **Calculation with Result in Octal**\n   *\n   * Returns the result of a calculation as **octal**, left‑padded with zeros to *N* digits.\n   *\n   * @token %OctN%<formula>%\n   * @category Calculation\n   * @see https://wiki.keyboardmaestro.com/token/Calculate\n   */\n  CalculationWithResultInOctal: \"%Oct3%1+2%\",\n\n  /**\n   * **Comma-separated list of the current execution instances**\n   *\n   * All currently running **macro instances**, expressed as opaque IDs. Use these with AppleScript to fetch Local/Instance variables or to cancel a *specific* instance.\n   *\n   * Prefer this over `%ExecutingInstance%` when you want *every* instance, not just “this one”.\n   *\n   * @token %ExecutingInstances%\n   * @since v9.0\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingInstances\n   */\n  CommaSeparatedListOfTheCurrentExecutionInstances: \"%ExecutingInstances%\",\n\n  /**\n   * **Comma-separated list of variables accessed by this macro**\n   *\n   * Debug helper: which variables did this macro touch (read or write)? Useful for logging or snapshotting state after a run. Do **not** rely on it for cleanup — access can be implicit.\n   *\n   * @token %AccessedVariables%\n   * @since v10.0\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/AccessedVariables\n   */\n  CommaSeparatedListOfVariablesAccessedByThisMacro: \"%AccessedVariables%\",\n\n  /**\n   * **Current Audio Input Device**\n   *\n   * Returns the *selected* system input (eg “Built‑in Microphone” or “Loopback”).\n   * Automations that record, transcribe, or gate audio can log this token before capture to avoid ambiguity.\n   *\n   * @token %AudioInputDevice%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioInputDevice: \"%AudioInputDevice%\",\n\n  /**\n   * **Current Audio Input Device UID**\n   *\n   * Stable CoreAudio UID for the active input — survives renaming.\n   * Use when scripting `switchaudiosource` or comparing across Macs where user‑facing names may differ.\n   *\n   * @token %AudioInputDeviceUID%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioInputDeviceUID: \"%AudioInputDeviceUID%\",\n\n  /**\n   * **Current Audio Output Device**\n   *\n   * What your Mac is *playing through* right now (menu‑bar Output). Handy for volume macros or context‑aware EQ.\n   *\n   * @token %AudioOutputDevice%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioOutputDevice: \"%AudioOutputDevice%\",\n\n  /**\n   * **Current Audio Output Device UID**\n   *\n   * CoreAudio UID of the active output device — ideal for deterministic scripting.\n   *\n   * @token %AudioOutputDeviceUID%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioOutputDeviceUID: \"%AudioOutputDeviceUID%\",\n\n  /**\n   * **Current Audio Sound Effects Device**\n   *\n   * Device used for system beeps/alerts (can differ from main output).\n   * Log this before playing alerts so users know *where* the sound went.\n   *\n   * @token %AudioSoundEffectsDevice%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioSoundEffectsDevice: \"%AudioSoundEffectsDevice%\",\n\n  /**\n   * **Current Audio Sound Effects Device UID**\n   *\n   * CoreAudio UID for the system‑alert output device.\n   *\n   * @token %AudioSoundEffectsDeviceUID%\n   * @category Audio\n   * @see https://wiki.keyboardmaestro.com/token/AudioDevice\n   */\n  CurrentAudioSoundEffectsDeviceUID: \"%AudioSoundEffectsDeviceUID%\",\n\n  /**\n   * **Current Mouse Location**\n   *\n   * Current pointer position as `\"x,y\"`. Combine with screen/frame tokens to anchor UI interactions or to restore the cursor after moving it.\n   *\n   * @token %CurrentMouse%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/CurrentMouse\n   */\n  CurrentMouseLocation: \"%CurrentMouse%\",\n\n  /**\n   * **Current Track Album**\n   *\n   * Returns the album of the currently playing track in iTunes/Music.app.\n   *\n   * @token %CurrentTrack%album%\n   * @category Music\n   * @see https://wiki.keyboardmaestro.com/token/CurrentTrack\n   */\n  CurrentTrackAlbum: \"%CurrentTrack%album%\",\n\n  /**\n   * **Current Track Artist**\n   *\n   * Returns the artist of the currently playing track in iTunes/Music.app.\n   *\n   * @token %CurrentTrack%artist%\n   * @category Music\n   * @see https://wiki.keyboardmaestro.com/token/CurrentTrack\n   */\n  CurrentTrackArtist: \"%CurrentTrack%artist%\",\n\n  /**\n   * **Current Track Name**\n   *\n   * Returns the name of the currently playing track in iTunes/Music.app.\n   *\n   * @token %CurrentTrack%name%\n   * @category Music\n   * @see https://wiki.keyboardmaestro.com/token/CurrentTrack\n   */\n  CurrentTrackName: \"%CurrentTrack%name%\",\n\n  /**\n   * **Current Track Rating**\n   *\n   * Returns the star rating of the currently playing track in iTunes/Music.app.\n   *\n   * @token %CurrentTrack%ratingstars%\n   * @category Music\n   * @see https://wiki.keyboardmaestro.com/token/CurrentTrack\n   */\n  CurrentTrackRating: \"%CurrentTrack%ratingstars%\",\n\n  /**\n   * **Delete (Hide a Variable)**\n   *\n   * Special sentinel: when used as the value in “Set Variable to Text”, Keyboard Maestro **deletes** the variable instead of setting it to the empty string. Everywhere else it expands to an empty string.\n   *\n   * @token %Delete%\n   * @category Variable\n   * @example\n   * Set Variable “Tmp” to Text: %Delete%  // Tmp is removed, not just blanked.\n   * @see https://wiki.keyboardmaestro.com/token/Delete\n   */\n  Delete: \"%Delete%\",\n\n  /**\n   * **Executing Macro**\n   *\n   * The human‑readable name of the macro that is currently executing (the *top level* one). For the action’s containing macro (inside sub‑macros), see `%ExecutingThisMacro%`.\n   *\n   * @token %ExecutingMacro%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingMacro\n   */\n  ExecutingMacro: \"%ExecutingMacro%\",\n\n  /**\n   * **Executing Macro Group**\n   *\n   * Name (and via the UUID variant, the ID) of the group that owns the currently executing macro. Useful for group‑scoped logging/routing.\n   *\n   * @token %ExecutingMacroGroup%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingMacroGroup\n   */\n  ExecutingMacroGroup: \"%ExecutingMacroGroup%\",\n\n  /**\n   * **Executing Macro Group UUID**\n   *\n   * The `\\%ExecutingMacroGroupUUID\\%` token returns the UUID of the macro group containing the currently executing macro.\n   *\n   * @token %ExecutingMacroGroupUUID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingMacroGroup?redirect=1\n   */\n  ExecutingMacroGroupUUID: \"%ExecutingMacroGroupUUID%\",\n\n  /**\n   * **Executing Macro UUID**\n   *\n   * The stable identifier of the currently executing macro. Prefer this over names if you need to look up macros programmatically or across renamed macros.\n   *\n   * @token %ExecutingMacroUUID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingMacroUUID\n   */\n  ExecutingMacroUUID: \"%ExecutingMacroUUID%\",\n\n  /**\n   * **Executing This Macro**\n   *\n   * The name of the macro **that this action lives inside**. Differs from `%ExecutingMacro%` when you run a sub‑macro using *Execute a Macro*.\n   *\n   * @token %ExecutingThisMacro%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingThisMacro\n   */\n  ExecutingThisMacro: \"%ExecutingThisMacro%\",\n\n  /**\n   * **Executing This Macro Group**\n   *\n   * The group name (and via UUID variant, ID) that this action is in. Helps resolve context when building reusable sub‑macros.\n   *\n   * @token %ExecutingThisMacroGroup%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingThisMacroGroup\n   */\n  ExecutingThisMacroGroup: \"%ExecutingThisMacroGroup%\",\n\n  /**\n   * **Executing This Macro Group UUID**\n   *\n   * The `\\%ExecutingThisMacroGroupUUID\\%` token returns the UUID of the macro group the action is within.\n   *\n   * @token %ExecutingThisMacroGroupUUID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingThisMacroGroup?redirect=1\n   */\n  ExecutingThisMacroGroupUUID: \"%ExecutingThisMacroGroupUUID%\",\n\n  /**\n   * **Executing This Macro UUID**\n   *\n   * UUID of the macro that contains the current action (can differ from `%ExecutingMacroUUID%`).\n   *\n   * @token %ExecutingThisMacroUUID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingThisMacroUUID\n   */\n  ExecutingThisMacroUUID: \"%ExecutingThisMacroUUID%\",\n\n  /**\n   * **Find Pasteboard**\n   *\n   * The `\\%FindPasteboard\\%` token returns the current value of the system's find pasteboard (separate from the clipboard).\n   *\n   * @token %FindPasteboard%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/FindPasteboard\n   */\n  FindPasteboard: \"%FindPasteboard%\",\n\n  /**\n   * **Finder Insertion Location Path**\n   *\n   * The `\\%FinderInsertionLocation\\%` token returns the path of the Finder's current insertion location, typically the path of the frontmost Finder window.\n   *\n   * @token %FinderInsertionLocation%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/FinderInsertionLocation\n   */\n  FinderInsertionLocationPath: \"%FinderInsertionLocation%\",\n\n  /**\n   * **First Screen Frame**\n   *\n   * Frame of the *left-most* display (index 1). Same as `%Screen%Main%` **only** when the main display is left-most.\n   *\n   * @token %Screen%1%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Screen\n   */\n  FirstScreenFrame: \"%Screen%1%\",\n\n  /**\n   * **Formatted (ICU) Date Time**\n   *\n   * The `\\%ICUDateTime\\%` token returns the current date formatted according to an ICU Date Time format string.\n   * Example: `\\%ICUDateTime%EEE, MMM d, yyyy h:mm\\%`.\n   *\n   * @token %ICUDateTime%EEE, MMM d, yyyy h:mm%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ICUDateTime\n   */\n  FormattedICUDateTime: \"%ICUDateTime%EEE, MMM d, yyyy h:mm%\",\n\n  /**\n   * **Formatted (ICU) Date Time For**\n   *\n   * The `\\%ICUDateTimeFor\\%` token returns a specific date (based on a calculation or unixtime) formatted with an ICU string.\n   *\n   * @token %ICUDateTimeFor%NOW()+20%EEE, MMM d, yyyy h:mm%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ICUDateTime?redirect=1\n   */\n  FormattedICUDateTimeFor: \"%ICUDateTimeFor%NOW()+20%EEE, MMM d, yyyy h:mm%\",\n\n  /**\n   * **Formatted (ICU) Date Time Minus**\n   *\n   * The `\\%ICUDateTimeMinus\\%` token returns a date in the past, calculated by subtracting a specified amount of time, and formats it.\n   *\n   * @token %ICUDateTimeMinus%3*7%Days%EEE, MMM d, yyyy h:mm%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ICUDateTime?redirect=1\n   */\n  FormattedICUDateTimeMinus:\n    \"%ICUDateTimeMinus%3*7%Days%EEE, MMM d, yyyy h:mm%\",\n\n  /**\n   * **Formatted (ICU) Date Time Plus**\n   *\n   * The `\\%ICUDateTimePlus\\%` token returns a date in the future, calculated by adding a specified amount of time, and formats it.\n   *\n   * @token %ICUDateTimePlus%3*7%Days%EEE, MMM d, yyyy h:mm%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ICUDateTime?redirect=1\n   */\n  FormattedICUDateTimePlus: \"%ICUDateTimePlus%3*7%Days%EEE, MMM d, yyyy h:mm%\",\n\n  /**\n   * **Formatted Calculation**\n   *\n   * The `\\%CalculateFormat\\%` token returns the result of a calculation, formatted according to a Unicode number format pattern.\n   * Useful for displaying numbers with specific decimal places, currency symbols, or separators.\n   *\n   * @token %CalculateFormat%1+2%#,##0.00#%\n   * @category Calculation\n   * @see https://wiki.keyboardmaestro.com/token/CalculateFormat\n   */\n  FormattedCalculation: \"%CalculateFormat%1+2%#,##0.00#%\",\n\n  /**\n   * **Front Application Bundle ID**\n   *\n   * Reverse-DNS identifier (e.g. `com.apple.Finder`).\n   * Prefer over names for settings storage because it survives localisation/renames.\n   *\n   * @token %ApplicationBundleID%1%\n   * @category Application\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  FrontApplicationBundleID: \"%ApplicationBundleID%1%\",\n\n  /**\n   * **Front Application Long Version**\n   *\n   * Returns the detailed version string of the frontmost application.\n   *\n   * @token %ApplicationLongVersion%1%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens?redirect=1\n   */\n  FrontApplicationLongVersion: \"%ApplicationLongVersion%1%\",\n\n  /**\n   * **Front Application Name**\n   *\n   * Simple, reliable name of the frontmost app (“Finder”, “Pages”). Combine with `%WindowName%1%` for logging *where* a macro fired.\n   *\n   * @token %Application%1%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  FrontApplicationName: \"%Application%1%\",\n\n  /**\n   * **Front Application Path**\n   *\n   * Returns the full file path to the frontmost application's executable.\n   *\n   * @token %ApplicationPath%1%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens?redirect=1\n   */\n  FrontApplicationPath: \"%ApplicationPath%1%\",\n\n  /**\n   * **Front Application Version**\n   *\n   * Short semantic version of the frontmost app (e.g. “14.1”). Use when guarding features that only exist in certain versions.\n   *\n   * @token %ApplicationVersion%1%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens?redirect=1\n   */\n  FrontApplicationVersion: \"%ApplicationVersion%1%\",\n\n  /**\n   * **Front Browser Bundle ID**\n   *\n   * Returns the bundle identifier of the frontmost web browser.\n   *\n   * @token %FrontBrowserBundleID%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserBundleID: \"%FrontBrowserBundleID%\",\n\n  /**\n   * **Front Browser Document Title**\n   *\n   * Returns the title of the document in the frontmost tab of the frontmost web browser.\n   *\n   * @token %FrontBrowserTitle%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserDocumentTitle: \"%FrontBrowserTitle%\",\n\n  /**\n   * **Front Browser Document URL**\n   *\n   * Returns the URL of the document in the frontmost tab of the frontmost web browser.\n   *\n   * @token %FrontBrowserURL%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserDocumentURL: \"%FrontBrowserURL%\",\n\n  /**\n   * **Front Browser Field**\n   *\n   * Returns the value of a specific field in the front browser's document, identified by a JavaScript path.\n   *\n   * @token %FrontBrowserField%document.forms[0][0]%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserField: \"%FrontBrowserField%document.forms[0][0]%\",\n\n  /**\n   * **Front Browser JavaScript**\n   *\n   * Executes a JavaScript snippet in the context of the front browser's document and returns the result.\n   *\n   * @token %FrontBrowserJavaScript%document.forms[0].innerHTML%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserJavaScript:\n    \"%FrontBrowserJavaScript%document.forms[0].innerHTML%\",\n\n  /**\n   * **Front Browser Long Version**\n   *\n   * Returns the detailed version string of the frontmost web browser.\n   *\n   * @token %FrontBrowserLongVersion%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserLongVersion: \"%FrontBrowserLongVersion%\",\n\n  /**\n   * **Front Browser Name**\n   *\n   * Returns the name of the frontmost web browser (e.g., \"Google Chrome\", \"Safari\").\n   *\n   * @token %FrontBrowserName%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserName: \"%FrontBrowserName%\",\n\n  /**\n   * **Front Browser Path**\n   *\n   * Returns the file path to the frontmost web browser's executable.\n   *\n   * @token %FrontBrowserPath%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserPath: \"%FrontBrowserPath%\",\n\n  /**\n   * **Front Browser Ready State**\n   *\n   * Returns the ready state of the document in the frontmost browser tab (e.g., \"complete\", \"interactive\").\n   *\n   * @token %FrontBrowserReadyState%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserReadyState: \"%FrontBrowserReadyState%\",\n\n  /**\n   * **Front Browser Version**\n   *\n   * Returns the short version string of the frontmost web browser.\n   *\n   * @token %FrontBrowserVersion%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserVersion: \"%FrontBrowserVersion%\",\n\n  /**\n   * **Front Browser Window Name**\n   *\n   * Returns the name (title) of the frontmost web browser window.\n   *\n   * @token %FrontBrowserWindowName%\n   * @category Front Browser\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  FrontBrowserWindowName: \"%FrontBrowserWindowName%\",\n\n  /**\n   * **Front Window Frame**\n   *\n   * Returns the frame (left,top,width,height) of the frontmost window of the front application.\n   *\n   * @token %WindowFrame%1%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Window_Tokens?redirect=1\n   */\n  FrontWindowFrame: \"%WindowFrame%1%\",\n\n  /**\n   * **Front Window Name**\n   *\n   * Returns the name (title) of the frontmost window of the front application.\n   *\n   * @token %WindowName%1%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Window_Tokens?redirect=1\n   */\n  FrontWindowName: \"%WindowName%1%\",\n\n  /**\n   * **Front Window Position**\n   *\n   * Returns the position (left,top) of the frontmost window of the front application.\n   *\n   * @token %WindowPosition%1%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Window_Tokens?redirect=1\n   */\n  FrontWindowPosition: \"%WindowPosition%1%\",\n\n  /**\n   * **Front Window Size**\n   *\n   * Returns the size (width,height) of the frontmost window of the front application.\n   *\n   * @token %WindowSize%1%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Window_Tokens?redirect=1\n   */\n  FrontWindowSize: \"%WindowSize%1%\",\n\n  /**\n   * **Google Chrome Bundle ID**\n   *\n   * Returns the bundle identifier of Google Chrome.\n   *\n   * @token %ChromeBundleID%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeBundleID: \"%ChromeBundleID%\",\n\n  /**\n   * **Google Chrome Document Title**\n   *\n   * Returns the title of the document in the frontmost tab of Google Chrome.\n   *\n   * @token %ChromeTitle%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeDocumentTitle: \"%ChromeTitle%\",\n\n  /**\n   * **Google Chrome Document URL**\n   *\n   * Returns the URL of the document in the frontmost tab of Google Chrome.\n   *\n   * @token %ChromeURL%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeDocumentURL: \"%ChromeURL%\",\n\n  /**\n   * **Google Chrome Field**\n   *\n   * Returns the value of a specific field in the Google Chrome document.\n   *\n   * @token %ChromeField%document.forms[0][0]%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeField: \"%ChromeField%document.forms[0][0]%\",\n\n  /**\n   * **Google Chrome JavaScript**\n   *\n   * Executes a JavaScript snippet in the context of the Google Chrome document and returns the result.\n   *\n   * @token %ChromeJavaScript%document.forms[0].innerHTML%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeJavaScript: \"%ChromeJavaScript%document.forms[0].innerHTML%\",\n\n  /**\n   * **Google Chrome Long Version**\n   *\n   * Returns the detailed version string of Google Chrome.\n   *\n   * @token %ChromeLongVersion%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeLongVersion: \"%ChromeLongVersion%\",\n\n  /**\n   * **Google Chrome Name**\n   *\n   * Returns the name \"Google Chrome\".\n   *\n   * @token %ChromeName%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeName: \"%ChromeName%\",\n\n  /**\n   * **Google Chrome Path**\n   *\n   * Returns the file path to the Google Chrome executable.\n   *\n   * @token %ChromePath%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromePath: \"%ChromePath%\",\n\n  /**\n   * **Google Chrome Ready State**\n   *\n   * Returns the ready state of the document in the frontmost tab of Google Chrome.\n   *\n   * @token %ChromeReadyState%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeReadyState: \"%ChromeReadyState%\",\n\n  /**\n   * **Google Chrome Version**\n   *\n   * Returns the short version string of Google Chrome.\n   *\n   * @token %ChromeVersion%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeVersion: \"%ChromeVersion%\",\n\n  /**\n   * **Google Chrome Window Name**\n   *\n   * Returns the name (title) of the frontmost Google Chrome window.\n   *\n   * @token %ChromeWindowName%\n   * @category Google Chrome\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  GoogleChromeWindowName: \"%ChromeWindowName%\",\n\n  /**\n   * **ID of Last Keyboard Maestro Engine Window Opened by This Macro**\n   *\n   * The `\\%LastWindowID\\%` token (v10.0+) returns the window ID of the last Keyboard Maestro Engine window (e.g., a prompt) opened by this macro.\n   *\n   * @token %LastWindowID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/LastWindowID\n   */\n  IDOfLastKeyboardMaestroEngineWindowOpenedByThisMacro: \"%LastWindowID%\",\n\n  /**\n   * **ID of the Last Aborted Action**\n   *\n   * The `\\%LastAbortedActionID\\%` token (v11.0+) returns the ID of the most recently aborted action in the current macro execution.\n   *\n   * @token %LastAbortedActionID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/LastAbortedActionID\n   */\n  IDOfTheLastAbortedAction: \"%LastAbortedActionID%\",\n\n  /**\n   * **JSON From Dictionary**\n   *\n   * The `\\%JSONFromDictionary%DictionaryName\\%` token returns a JSON object constructed from a Keyboard Maestro Dictionary variable.\n   * Dictionary keys become JSON field names.\n   *\n   * @token %JSONFromDictionary%DictionaryName%\n   * @category JSON\n   * @see https://wiki.keyboardmaestro.com/token/JSONFromDictionary\n   */\n  JSONFromDictionary: \"%JSONFromDictionary%DictionaryName%\",\n\n  /**\n   * **JSON From Variables**\n   *\n   * The `\\%JSONFromVariables%Prefix\\%` token returns a JSON object constructed from all variables that start with a given prefix.\n   *\n   * @token %JSONFromVariables%Prefix%\n   * @category JSON\n   * @see https://wiki.keyboardmaestro.com/token/JSONFromVariables\n   */\n  JSONFromVariables: \"%JSONFromVariables%Prefix%\",\n\n  /**\n   * **JSON Value**\n   *\n   * The `\\%JSONValue%jsonpath\\%` token returns a value from a JSON object stored in a variable, using a dot-notation path.\n   * For example, `\\%JSONValue%MyJSON.user.name\\%`.\n   *\n   * @token %JSONValue%VariableName.field(field)[1]%\n   * @category JSON\n   * @see https://wiki.keyboardmaestro.com/token/JSONValue\n   */\n  JSONValue: \"%JSONValue%VariableName.field(field)[1]%\",\n\n  /**\n   * **Keyboard Layout Input Source**\n   *\n   * The `\\%KeyboardLayout\\%` token (v8+) returns the name of the current keyboard layout (e.g., \"U.S.\").\n   *\n   * @token %KeyboardLayout%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/KeyboardLayout\n   */\n  KeyboardLayoutInputSource: \"%KeyboardLayout%\",\n\n  /**\n   * **Keyboard Maestro Long Version**\n   *\n   * The `\\%KeyboardMaestroLongVersion\\%` token (v11.0+) returns the detailed version of the running Keyboard Maestro application.\n   *\n   * @token %KeyboardMaestroLongVersion%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/KeyboardMaestroVersion?redirect=1\n   */\n  KeyboardMaestroLongVersion: \"%KeyboardMaestroLongVersion%\",\n\n  /**\n   * **Keyboard Maestro Version**\n   *\n   * The `\\%KeyboardMaestroVersion\\%` token (v11.0+) returns the short version of the running Keyboard Maestro application (e.g., \"11.0.2\").\n   *\n   * @token %KeyboardMaestroVersion%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/KeyboardMaestroVersion\n   */\n  KeyboardMaestroVersion: \"%KeyboardMaestroVersion%\",\n\n  /**\n   * **Linefeed (\\n)**\n   *\n   * The `\\%LineFeed\\%` token returns the linefeed character (`\\n`, ASCII 0x0A). Use this to insert new lines in text.\n   *\n   * @token %LineFeed%\n   * @category Character\n   * @see https://wiki.keyboardmaestro.com/token/LineFeed\n   */\n  Linefeed: \"%LineFeed%\",\n\n  /**\n   * **Long Date**\n   *\n   * The `\\%LongDate\\%` token returns the current date in a localized long format (e.g., \"September 5, 2017\").\n   *\n   * @token %LongDate%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/LongDate\n   */\n  LongDate: \"%LongDate%\",\n\n  /**\n   * **Machine IP Address**\n   *\n   * The `\\%MacIPAddress\\%` token returns the current primary IP address of the Mac.\n   *\n   * @token %MacIPAddress%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/MacIPAddress\n   */\n  MachineIPAddress: \"%MacIPAddress%\",\n\n  /**\n   * **Machine Name**\n   *\n   * The `\\%MacName\\%` token returns the current computer name as set in System Settings.\n   *\n   * @token %MacName%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/MacName\n   */\n  MachineName: \"%MacName%\",\n\n  /**\n   * **Machine Unique ID**\n   *\n   * The `\\%MacUUID\\%` token returns a unique ID for the Mac. Useful for macros that behave differently on different machines.\n   *\n   * @token %MacUUID%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/MacUUID\n   */\n  MachineUniqueID: \"%MacUUID%\",\n\n  /**\n   * **Macro Name for UUID**\n   *\n   * This token returns the name of the macro or macro group corresponding to the specified UUID.\n   * Returns \"Not Found\" if the UUID does not exist, allowing for existence checks.\n   *\n   * @token %MacroNameForUUID%UUID%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/MacroNameForUUID\n   */\n  MacroNameForUUID: \"%MacroNameForUUID%UUID%\",\n\n  /**\n   * **Mail BCC Recipients**\n   *\n   * Returns a comma-separated list of the BCC recipients in the currently selected Mail.app message.\n   *\n   * @token %MailBCCRecipients%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailBCCRecipients\n   */\n  MailBCCRecipients: \"%MailBCCRecipients%\",\n\n  /**\n   * **Mail CC Recipients**\n   *\n   * Returns a comma-separated list of the CC recipients in the currently selected Mail.app message.\n   *\n   * @token %MailCCRecipients%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailCCRecipients\n   */\n  MailCCRecipients: \"%MailCCRecipients%\",\n\n  /**\n   * **Mail Contents**\n   *\n   * Returns the body content of the currently selected Mail.app message.\n   *\n   * @token %MailContents%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailContents\n   */\n  MailContents: \"%MailContents%\",\n\n  /**\n   * **Mail Raw Source**\n   *\n   * Returns the full raw source of the currently selected Mail.app message, including all headers.\n   *\n   * @token %MailRawSource%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailRawSource\n   */\n  MailRawSource: \"%MailRawSource%\",\n\n  /**\n   * **Mail Recipients**\n   *\n   * Returns a comma-separated list of all recipients (To, CC, BCC) in the currently selected Mail.app message.\n   *\n   * @token %MailRecipients%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailRecipients\n   */\n  MailRecipients: \"%MailRecipients%\",\n\n  /**\n   * **Mail Reply To**\n   *\n   * Returns the Reply-To address of the currently selected Mail.app message.\n   *\n   * @token %MailReplyTo%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailReplyTo\n   */\n  MailReplyTo: \"%MailReplyTo%\",\n\n  /**\n   * **Mail Sender**\n   *\n   * Returns the sender of the currently selected Mail.app message.\n   *\n   * @token %MailSender%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailSender\n   */\n  MailSender: \"%MailSender%\",\n\n  /**\n   * **Mail Subject**\n   *\n   * Returns the subject of the currently selected Mail.app message.\n   *\n   * @token %MailSubject%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailSubject\n   */\n  MailSubject: \"%MailSubject%\",\n\n  /**\n   * **Mail To Recipients**\n   *\n   * Returns a comma-separated list of the To recipients in the currently selected Mail.app message.\n   *\n   * @token %MailToRecipients%\n   * @category Mail\n   * @see https://wiki.keyboardmaestro.com/token/MailToRecipients\n   */\n  MailToRecipients: \"%MailToRecipients%\",\n\n  /**\n   * **Main Screen Frame**\n   *\n   * Returns the frame (left,top,width,height) of the main screen (the one with the menu bar).\n   *\n   * @token %Screen%Main%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Screen\n   */\n  MainScreenFrame: \"%Screen%Main%\",\n\n  /**\n   * **Main Screen Possible Resolutions (array of resolutions)**\n   *\n   * The `\\%ScreenResolutions\\%` token (v11.0+) returns a list of the available resolutions for the main screen.\n   *\n   * @token %ScreenResolutions%Main%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/ScreenResolution?redirect=1\n   */\n  MainScreenPossibleResolutions: \"%ScreenResolutions%Main%\",\n\n  /**\n   * **Main Screen Resolution (width,height,pixelwidth,pixelheight,refresh)**\n   *\n   * The `\\%ScreenResolution\\%` token (v11.0+) returns the current resolution of the main screen.\n   * The format is `width,height,pixelwidth,pixelheight,refresh`.\n   *\n   * @token %ScreenResolution%Main%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/ScreenResolution\n   */\n  MainScreenResolution: \"%ScreenResolution%Main%\",\n\n  /**\n   * **Main Screen Visible Frame**\n   *\n   * Same metrics as `%Screen%Main%` but *excludes* areas covered by the Menu Bar and Dock.\n   * Use for maximising windows without hiding system UI.\n   *\n   * @token %ScreenVisible%Main%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/ScreenVisible\n   */\n  MainScreenVisibleFrame: \"%ScreenVisible%Main%\",\n\n  /**\n   * **Music Player State**\n   *\n   * Returns `stopped`, `playing`, `paused`, `fast forwarding`, `rewinding`, or `not running`.\n   * Branch your macro: pause podcasts before a call, resume after.\n   *\n   * @token %MusicPlayerState%\n   * @category Music\n   * @see https://wiki.keyboardmaestro.com/token/MusicPlayerState\n   */\n  MusicPlayerState: \"%MusicPlayerState%\",\n\n  /**\n   * **Named Clipboard**\n   *\n   * Grab the *text* contents of a specific Named Clipboard bucket — persistent across reboots and shareable via sync.\n   * For images or RTF see the flavours token or use clipboard actions.\n   *\n   * @token %NamedClipboard%<Name>%\n   * @category Clipboard\n   * @example\n   * Insert Text: `%NamedClipboard%Email Signature%`\n   * @see https://wiki.keyboardmaestro.com/token/NamedClipboard\n   */\n  NamedClipboard: \"%NamedClipboard%A Named Clipboard%\",\n\n  /**\n   * **Named Clipboard Flavors**\n   *\n   * Which data types are stored in a Named Clipboard (UTF‑8, PNG, RTF…).\n   * Use before paste to decide whether to process as rich text or plain.\n   *\n   * @token %NamedClipboardFlavors%<Name>%\n   * @category Clipboard\n   * @see https://wiki.keyboardmaestro.com/token/NamedClipboardFlavors\n   */\n  NamedClipboardFlavors: \"%NamedClipboardFlavors%A Named Clipboard%\",\n\n  /**\n   * **Network Location**\n   *\n   * The `\\%NetworkLocation\\%` token returns the name of the current network location as set in System Settings.\n   *\n   * @token %NetworkLocation%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/NetworkLocation\n   */\n  NetworkLocation: \"%NetworkLocation%\",\n\n  /**\n   * **Number Date**\n   *\n   * The `\\%NumberDate\\%` token returns the current date in a localized numeric format (e.g., \"9/5/17\").\n   *\n   * @token %NumberDate%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/NumberDate\n   */\n  NumberDate: \"%NumberDate%\",\n\n  /**\n   * **Opaque ID of the Current Execution Instance**\n   *\n   * The `\\%ExecutingInstance\\%` token (v9.0+) returns an opaque ID for the current macro execution instance.\n   * Useful for uniquely identifying a specific run of a macro, especially for scripting or inter-macro communication.\n   *\n   * @token %ExecutingInstance%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingInstance\n   */\n  OpaqueIDOfTheCurrentExecutionInstance: \"%ExecutingInstance%\",\n\n  /**\n   * **Option-Return (Insert Text by Typing Only)**\n   *\n   * The `\\%OptionReturn\\%` token (v11.0+) is a special token for the \"Insert Text by Typing\" action to simulate pressing Option-Return.\n   *\n   * @token %OptionReturn%\n   * @category Character\n   * @see https://wiki.keyboardmaestro.com/token/OptionReturn\n   */\n  OptionReturn: \"%OptionReturn%\",\n\n  /**\n   * **Past Clipboard**\n   *\n   * The `\\%PastClipboard%N\\%` token returns the text of a previous clipboard entry from the history.\n   * `\\%PastClipboard%0\\%` is the current clipboard, `\\%PastClipboard%1\\%` is the one before it, and so on.\n   *\n   * @token %PastClipboard%1%\n   * @category Clipboard\n   * @see https://wiki.keyboardmaestro.com/token/PastClipboard\n   */\n  PastClipboard: \"%PastClipboard%1%\",\n\n  /**\n   * **Past Clipboard Flavors**\n   *\n   * The `\\%PastClipboardFlavors\\%` token (v11.0+) returns the available data types (flavors) of a specified past clipboard entry.\n   *\n   * @token %PastClipboardFlavors%1%\n   * @category Clipboard\n   * @see https://wiki.keyboardmaestro.com/token/PastClipboardFlavors\n   */\n  PastClipboardFlavors: \"%PastClipboardFlavors%1%\",\n\n  /**\n   * **Position Cursor Placeholder**\n   *\n   * Within *Insert Text* actions, `%|%` marks where the caret should land after insertion.\n   * Not useful elsewhere (expands to nothing).\n   *\n   * @token %|%\n   * @category Text\n   * @example\n   * Insert Text: `Hello %|%World` → cursor sits between the words.\n   * @see https://wiki.keyboardmaestro.com/token/PositionCursor\n   */\n  PositionCursor: \"%|%\",\n\n  /**\n   * **Previous Application Name**\n   *\n   * The app that was frontmost *before* the current one. Perfect for “jump back” hotkeys or context‑aware toggles.\n   *\n   * @token %Application%2%\n   * @category Application\n   * @see https://wiki.keyboardmaestro.com/token/Application_Tokens\n   */\n  PreviousApplicationName: \"%Application%2%\",\n\n  /**\n   * **Prompt for Snippet Placeholder (Default from Variable)**\n   *\n   * Used within a snippet to prompt the user for input, with the default value taken from a variable.\n   * Syntax: `%Ask<promptID>:VariableName%`\n   *\n   * @token %Ask20:VarName%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/Ask20VarName\n   */\n  PromptForSnippetPlaceholderDefaultFromVariable: \"%Ask20:VarName%\",\n\n  /**\n   * **Prompt for Snippet Placeholder (Default Text)**\n   *\n   * Used within a snippet to prompt the user for input, with a default text value.\n   * Syntax: `%Ask<promptID>:DefaultText%`\n   *\n   * @token %Ask20:Default%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/Ask20Default\n   */\n  PromptForSnippetPlaceholderDefaultText: \"%Ask20:Default%\",\n\n  /**\n   * **Return (\\r)**\n   *\n   * The `\\%Return\\%` token returns the carriage return character (`\\r`, ASCII 0x0D).\n   *\n   * @token %Return%\n   * @category Character\n   * @see https://wiki.keyboardmaestro.com/token/Return\n   */\n  Return: \"%Return%\",\n\n  /**\n   * **Safari Bundle ID**\n   *\n   * Returns the bundle identifier of Safari.\n   *\n   * @token %SafariBundleID%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariBundleID: \"%SafariBundleID%\",\n\n  /**\n   * **Safari Document Title**\n   *\n   * Returns the title of the document in the frontmost tab of Safari.\n   *\n   * @token %SafariTitle%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariDocumentTitle: \"%SafariTitle%\",\n\n  /**\n   * **Safari Document URL**\n   *\n   * Returns the URL of the document in the frontmost tab of Safari.\n   *\n   * @token %SafariURL%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariDocumentURL: \"%SafariURL%\",\n\n  /**\n   * **Safari Field**\n   *\n   * Returns the value of a specific field in the Safari document.\n   *\n   * @token %SafariField%document.forms[0][0]%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariField: \"%SafariField%document.forms[0][0]%\",\n\n  /**\n   * **Safari JavaScript**\n   *\n   * Executes a JavaScript snippet in the context of the Safari document and returns the result.\n   *\n   * @token %SafariJavaScript%document.forms[0].innerHTML%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariJavaScript: \"%SafariJavaScript%document.forms[0].innerHTML%\",\n\n  /**\n   * **Safari Long Version**\n   *\n   * Returns the detailed version string of Safari.\n   *\n   * @token %SafariLongVersion%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariLongVersion: \"%SafariLongVersion%\",\n\n  /**\n   * **Safari Name**\n   *\n   * Returns the name \"Safari\".\n   *\n   * @token %SafariName%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariName: \"%SafariName%\",\n\n  /**\n   * **Safari Path**\n   *\n   * Returns the file path to the Safari executable.\n   *\n   * @token %SafariPath%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariPath: \"%SafariPath%\",\n\n  /**\n   * **Safari Ready State**\n   *\n   * Returns the ready state of the document in the frontmost tab of Safari.\n   *\n   * @token %SafariReadyState%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariReadyState: \"%SafariReadyState%\",\n\n  /**\n   * **Safari Version**\n   *\n   * Returns the short version string of Safari.\n   *\n   * @token %SafariVersion%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariVersion: \"%SafariVersion%\",\n\n  /**\n   * **Safari Window Name**\n   *\n   * Returns the name (title) of the frontmost Safari window.\n   *\n   * @token %SafariWindowName%\n   * @category Safari\n   * @see https://wiki.keyboardmaestro.com/token/WebBrowserTokens?redirect=1\n   */\n  SafariWindowName: \"%SafariWindowName%\",\n\n  /**\n   * **Second Screen Frame**\n   *\n   * Frame of the second display from the left (excluding the main menu-bar index).\n   * Useful when you want to target an external monitor without concern for its physical resolution.\n   *\n   * @token %Screen%2%\n   * @category Screen\n   * @see https://wiki.keyboardmaestro.com/token/Screen\n   */\n  SecondScreenFrame: \"%Screen%2%\",\n\n  /**\n   * **Short Date**\n   *\n   * The `\\%ShortDate\\%` token returns the current date in a localized short format (e.g., \"9/5/17\").\n   *\n   * @token %ShortDate%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ShortDate\n   */\n  ShortDate: \"%ShortDate%\",\n\n  /**\n   * **Space**\n   *\n   * The `\\%Space\\%` token returns the space character.\n   *\n   * @token %Space%\n   * @category Character\n   * @see https://wiki.keyboardmaestro.com/token/Space\n   */\n  Space: \"%Space%\",\n\n  /**\n   * **Success Result of Last Action**\n   *\n   * The `\\%ActionResult\\%` token returns \"OK\" if the previous action was successful, or an error message if it failed.\n   * Crucial for error handling; must be saved to a variable immediately after the action to be checked.\n   *\n   * @token %ActionResult%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ActionResult\n   */\n  SuccessResultOfLastAction: \"%ActionResult%\",\n\n  /**\n   * **System Clipboard**\n   *\n   * The current clipboard *text*. For images or mixed content inspect `%SystemClipboardFlavors%` first.\n   *\n   * @token %SystemClipboard%\n   * @category Clipboard\n   * @see https://wiki.keyboardmaestro.com/token/SystemClipboard\n   */\n  SystemClipboard: \"%SystemClipboard%\",\n\n  /**\n   * **System Clipboard Flavors**\n   *\n   * All UTI types in the current clipboard (public.utf8‑plain‑text, public.png,…).\n   * Gate macros so they only run on specific content types.\n   *\n   * @token %SystemClipboardFlavors%\n   * @category Clipboard\n   * @see https://wiki.keyboardmaestro.com/token/SystemClipboardFlavors\n   */\n  SystemClipboardFlavors: \"%SystemClipboardFlavors%\",\n\n  /**\n   * **System Long Version**\n   *\n   * Returns the detailed version of macOS, including the build number.\n   *\n   * @token %SystemLongVersion%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/SystemVersion?redirect=1\n   */\n  SystemLongVersion: \"%SystemLongVersion%\",\n\n  /**\n   * **System Version**\n   *\n   * The `\\%SystemVersion\\%` token (v11.0+) returns the version of macOS (e.g., \"14.1.1\").\n   *\n   * @token %SystemVersion%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/SystemVersion\n   */\n  SystemVersion: \"%SystemVersion%\",\n\n  /**\n   * **System Volume**\n   *\n   * The `\\%SystemVolume\\%` token returns the current system volume level (0-100).\n   *\n   * @token %SystemVolume%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/SystemVolume\n   */\n  SystemVolume: \"%SystemVolume%\",\n\n  /**\n   * **Tab (\\t)**\n   *\n   * The `\\%Tab\\%` token returns the tab character (`\\t`, ASCII 0x09).\n   *\n   * @token %Tab%\n   * @category Character\n   * @see https://wiki.keyboardmaestro.com/token/Tab\n   */\n  Tab: \"%Tab%\",\n\n  /**\n   * **The Last Alert Button Selected**\n   *\n   * The `\\%AlertButton\\%` token (v8+) returns the name of the button clicked in the last \"Alert\" action.\n   *\n   * @token %AlertButton%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/AlertButton\n   */\n  TheLastAlertButtonSelected: \"%AlertButton%\",\n\n  /**\n   * **The Last Custom HTML Result**\n   *\n   * The `\\%HTMLResult\\%` token (v8+) returns the result of the last \"Custom HTML Prompt\" action.\n   *\n   * @token %HTMLResult%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/HTMLResult\n   */\n  TheLastCustomHTMLResult: \"%HTMLResult%\",\n\n  /**\n   * **The Last Found Image**\n   *\n   * The `\\%FoundImage\\%` token (v8+) returns the details (left,top,width,height,fuzz) of the last image found by an action or condition.\n   *\n   * @token %FoundImage%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/FoundImage\n   */\n  TheLastFoundImage: \"%FoundImage%\",\n\n  /**\n   * **The Last Prompt Button Selected**\n   *\n   * The `\\%PromptButton\\%` token (v8+) returns the name of the button clicked in the last \"Prompt for User Input\" action.\n   *\n   * @token %PromptButton%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/PromptButton\n   */\n  TheLastPromptButtonSelected: \"%PromptButton%\",\n\n  /**\n   * **The Macro Name of the Specified Instance**\n   *\n   * The `\\%ExecutingInstanceName%instance\\%` token (v9.0+) returns the name of a specific execution instance.\n   *\n   * @token %ExecutingInstanceName%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/ExecutingInstanceName\n   */\n  TheMacroNameOfTheSpecifiedInstance: \"%ExecutingInstanceName%\",\n\n  /**\n   * **The Modifiers Used When Completing a Prompt With List Action**\n   *\n   * The `\\%PromptWithListModifiers\\%` token (v10.2+) returns the modifier keys (e.g., \"Command\") that were held down when an item was selected in a \"Prompt With List\" action.\n   *\n   * @token %PromptWithListModifiers%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/PromptWithListModifiers\n   */\n  TheModifiersUsedWhenCompletingAPromptWithListAction:\n    \"%PromptWithListModifiers%\",\n\n  /**\n   * **The Path of the Front Window’s Document**\n   *\n   * The `\\%FrontDocumentPath\\%` token (v11.0+) returns the file path of the document in the frontmost window, if the application supports it.\n   *\n   * @token %FrontDocumentPath%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/FrontDocumentPath\n   */\n  ThePathOfTheFrontWindowDocument: \"%FrontDocumentPath%\",\n\n  /**\n   * **The Path of the Selected Finder Item**\n   *\n   * The `\\%FinderSelection\\%` token (v10.0+) returns the full path of the single selected item in the Finder. If multiple or no items are selected, it returns an empty string.\n   *\n   * @token %FinderSelection%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/FinderSelection\n   */\n  ThePathOfTheSelectedFinderItem: \"%FinderSelection%\",\n\n  /**\n   * **The Paths of the Selected Finder Items**\n   *\n   * The `\\%FinderSelections\\%` token (v10.0+) returns the full paths of all selected items in the Finder, with each path on a new line.\n   *\n   * @token %FinderSelections%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/FinderSelection?redirect=1\n   */\n  ThePathsOfTheSelectedFinderItems: \"%FinderSelections%\",\n\n  /**\n   * **The Text Entered in a Paste by Name Action**\n   *\n   * The `\\%PasteByNameText\\%` token (v10.0+) returns the text the user entered in the last \"Paste by Name\" action.\n   *\n   * @token %PasteByNameText%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/PasteByNameText\n   */\n  TheTextEnteredInAPasteByNameAction: \"%PasteByNameText%\",\n\n  /**\n   * **The Text Entered in a Prompt With List Action**\n   *\n   * The `\\%PromptWithListText\\%` token (v10.0+) returns the text the user typed into the search field of the last \"Prompt With List\" action.\n   *\n   * @token %PromptWithListText%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/PromptWithListText\n   */\n  TheTextEnteredInAPromptWithListAction: \"%PromptWithListText%\",\n\n  /**\n   * **The Text Entered in a Select Menu by Name Action**\n   *\n   * The `\\%SelectMenuByNameText\\%` token (v11.0.3+) returns the text the user entered in the last \"Select Menu by Name\" action.\n   *\n   * @token %SelectMenuByNameText%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/SelectMenuByNameText\n   */\n  TheTextEnteredInASelectMenuByNameAction: \"%SelectMenuByNameText%\",\n\n  /**\n   * **Time**\n   *\n   * The `\\%ShortTime\\%` token returns the current time in a localized short format (e.g., \"11:17 AM\").\n   *\n   * @token %ShortTime%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/ICUDateTime\n   */\n  Time: \"%ShortTime%\",\n\n  /**\n   * **Time With Seconds**\n   *\n   * The `\\%LongTime\\%` token returns the current time with seconds in a localized format (e.g., \"11:17:35 AM\").\n   *\n   * @token %LongTime%\n   * @category Date\n   * @see https://wiki.keyboardmaestro.com/token/LongTime\n   */\n  TimeWithSeconds: \"%LongTime%\",\n\n  /**\n   * **Tripped Trigger Clipboard Flavors**\n   *\n   * The `\\%TriggerClipboardFlavors\\%` token (v11.0+) returns the data types (flavors) of the clipboard that triggered the macro via a \"Clipboard Filter\" trigger.\n   *\n   * @token %TriggerClipboardFlavors%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/TriggerClipboardFlavors\n   */\n  TrippedTriggerClipboardFlavors: \"%TriggerClipboardFlavors%\",\n\n  /**\n   * **Tripped Trigger Clipboard Value**\n   *\n   * The `\\%TriggerClipboard\\%` token (v8+) returns the text content of the clipboard that triggered the macro.\n   *\n   * @token %TriggerClipboard%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/TriggerClipboard\n   */\n  TrippedTriggerClipboardValue: \"%TriggerClipboard%\",\n\n  /**\n   * **Tripped Trigger Text**\n   *\n   * The `\\%Trigger\\%` token returns a description of the trigger that executed the macro (e.g., \"Hot Key 'F1'\").\n   *\n   * @token %Trigger%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/Trigger\n   */\n  TrippedTriggerText: \"%Trigger%\",\n\n  /**\n   * **Tripped Trigger Type**\n   *\n   * The `\\%TriggerBase\\%` token returns the base type of the trigger that executed the macro (e.g., \"Hot Key Trigger\").\n   *\n   * @token %TriggerBase%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/TriggerBase\n   */\n  TrippedTriggerType: \"%TriggerBase%\",\n\n  /**\n   * **Tripped Trigger Value**\n   *\n   * The `\\%TriggerValue\\%` token returns the value associated with the macro's trigger.\n   * For a hot key trigger, this is the key pressed. For a typed string trigger, it's the string typed. For a remote trigger, it's the parameter passed.\n   *\n   * @token %TriggerValue%\n   * @category Macro Information\n   * @see https://wiki.keyboardmaestro.com/token/TriggerValue\n   */\n  TrippedTriggerValue: \"%TriggerValue%\",\n\n  /**\n   * **User Home Directory**\n   *\n   * The `\\%UserHome\\%` token (v10.0+) returns the path to the current user's home directory (e.g., \"/Users/username\").\n   *\n   * @token %UserHome%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/UserHome\n   */\n  UserHomeDirectory: \"%UserHome%\",\n\n  /**\n   * **User Login ID**\n   *\n   * The `\\%UserLoginID\\%` token returns the current user's login ID or short name.\n   *\n   * @token %UserLoginID%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/UserLoginID\n   */\n  UserLoginID: \"%UserLoginID%\",\n\n  /**\n   * **User Name**\n   *\n   * The `\\%UserName\\%` token returns the current user's full name.\n   *\n   * @token %UserName%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/UserName\n   */\n  UserName: \"%UserName%\",\n\n  /**\n   * **Wireless Network Name(s)**\n   *\n   * The `\\%WirelessNetwork\\%` token returns the name(s) of the currently connected wireless network(s).\n   *\n   * @token %WirelessNetwork%\n   * @category System\n   * @see https://wiki.keyboardmaestro.com/token/WirelessNetwork\n   */\n  WirelessNetworkNames: \"%WirelessNetwork%\",\n} as const;\n\n/**\n * A TypeScript type representing all possible Keyboard Maestro token strings.\n * This is derived from the values of the `KM_TOKENS` object.\n */\nexport type KMToken = (typeof KM_TOKENS)[keyof typeof KM_TOKENS];\n","//FILE: src/utils/template.xml.token.ts\n\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Generic token preset mode for actions that support token insertion.\n * - undefined: normal (use provided text)\n * - Any key from KM_TOKENS: sets text to the corresponding token value\n *\n * @example\n * // Token presets\n * tokenPreset: \"ARandomUniqueID\" // → \"%RandomUUID%\"\n * tokenPreset: \"FrontApplicationName\" // → \"%Application%1%\"\n * tokenPreset: \"CurrentMouseLocation\" // → \"%CurrentMouse%\"\n */\nexport type TokenPresetMode = undefined | keyof typeof KM_TOKENS;\n\n/**\n * Resolves a token preset to its actual token value.\n * If tokenPreset is provided, returns the corresponding token from KM_TOKENS.\n * Otherwise, returns the original text.\n *\n * @param text - The original text value\n * @param tokenPreset - Optional token preset mode\n * @returns The resolved text (either original text or token value)\n *\n * @example\n * resolveTokenPreset(\"Hello\", undefined) // → \"Hello\"\n * resolveTokenPreset(\"Hello\", \"ARandomUniqueID\") // → \"%RandomUUID%\"\n * resolveTokenPreset(\"\", \"FrontApplicationName\") // → \"%Application%1%\"\n */\nexport function resolveTokenPreset(\n  text: string,\n  tokenPreset?: TokenPresetMode,\n): string {\n  if (tokenPreset && tokenPreset in KM_TOKENS) {\n    return KM_TOKENS[tokenPreset as keyof typeof KM_TOKENS];\n  }\n  return text;\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.return.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport {\n  resolveTokenPreset,\n  type TokenPresetMode,\n} from \"../utils/template.xml.token\";\nimport type { VirtualAction } from \"./types\";\n// import chalk from \"chalk\";\n\n/**\n * Options for the Return action.\n * @property text - The string to return from the macro (required by KM, can be empty string).\n */\nexport interface ReturnActionOptions {\n  /** The string to return from the macro. */\n  text: string;\n\n  /**\n   * Token preset for convenience. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the text parameter.\n   */\n  tokenPreset?: TokenPresetMode;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Return action.\n * @param opts - ReturnActionOptions with the string to return from the macro.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic usage\n * createVirtualReturn({ text: \"ExampleString\" })\n *\n * @example\n * // Token presets\n * createVirtualReturn({ text: \"\", tokenPreset: \"ARandomUniqueID\" })\n * createVirtualReturn({ text: \"\", tokenPreset: \"FrontApplicationName\" })\n */\nexport function createVirtualReturn(opts: ReturnActionOptions): VirtualAction {\n  const { text, tokenPreset } = opts;\n\n  // Resolve token preset\n  const finalText = resolveTokenPreset(text, tokenPreset);\n\n  // console.log(\n  //   chalk.cyan(`[VirtualAction] Return:`),\n  //   chalk.grey(JSON.stringify(opts)),\n  // );\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Return</string>\",\n    \"\\t\\t<key>Text</key>\",\n    `\\t\\t<string>${escapeForXml(finalText ?? \"\")}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/kmjs.runVirtualMacro.ts\n\n/**\n * Build a transient macro from an array of VirtualAction and “do script” it.\n */\n// Lazy import to avoid CEP environment issues\nimport chalk from \"chalk\";\nimport { indent } from \"./utils/utils.xml\";\nimport type { VirtualAction } from \"./virtual_actions/types\";\nimport { PLIST_HEADER, PLIST_FOOTER } from \"./utils/template.xml.generic\";\nimport { createVirtualReturn } from \"./virtual_actions/kmjs.virtualAction.return\";\nimport {\n  startWatching,\n  reportErrors,\n  stopWatching,\n} from \"./utils/km.engineLog\";\nimport { getSafeSpawnSync } from \"./utils/utils.spawn\";\n\nconst LOG_XML = true;\n\n/**\n * Wraps an array of VirtualAction XML fragments into a complete .kmmacros plist.\n *\n * This function takes an array of VirtualAction instances, converts each to its XML\n * representation, and wraps them all inside the standard plist XML structure required\n * by Keyboard Maestro for ephemeral macros.\n *\n * If addReturnActionXML is provided, appends a Keyboard Maestro Return action as the last action\n * as a convenience feature of KMJS.\n *\n * @param actions - List of VirtualAction instances to include in the macro.\n * @param addReturnActionXML - Optional string to include in a Return action (adds a Return action at the end)\n * @returns A full XML string representing the ephemeral macro.\n */\nexport function buildEphemeralMacroXml(\n  actions: VirtualAction[],\n  addReturnActionXML?: string,\n): string {\n  const allActions = addReturnActionXML\n    ? [...actions, createVirtualReturn({ text: addReturnActionXML })]\n    : actions;\n  const body = allActions.map((a) => a.toXml()).join(\"\\n\");\n  return PLIST_HEADER + body + \"\\n\" + PLIST_FOOTER;\n}\n\n/**\n * Executes a transient virtual macro in Keyboard Maestro by sending it XML via osascript.\n *\n * This function builds the ephemeral macro XML from the given VirtualAction array,\n * sends it to Keyboard Maestro Engine using JavaScript for Automation (JXA),\n * waits briefly to allow the macro to execute, and then checks for any errors\n * emitted by the engine during execution.\n *\n * If addReturnActionXML is provided, appends a Keyboard Maestro Return action as the last action\n * as a convenience feature of KMJS (but does not capture the return value).\n *\n * If captureReturnValue is true, the function will capture and return the result from the macro execution.\n *\n * @param actions - Array of VirtualAction objects to run.\n * @param name - Optional macro name for logging.\n * @param addReturnActionXML - Optional string to include in a Return action (adds a Return action at the end)\n * @param captureReturnValue - Whether to capture and return the macro's result\n * @returns The macro result if captureReturnValue is true, otherwise void\n */\nexport function runVirtualMacro(\n  actions: VirtualAction[],\n  name?: string,\n  addReturnActionXML?: string,\n  captureReturnValue?: boolean,\n): string | void {\n  if (actions.length === 0 && !addReturnActionXML) {\n    console.log(chalk.yellow(\"No actions supplied — nothing to run.\"));\n    return;\n  }\n\n  // construct the XML for the virtual macro\n  const xml = buildEphemeralMacroXml(actions, addReturnActionXML);\n\n  const macroLabel = name ? `virtual macro '${name}'` : \"virtual macro\";\n  console.log(\n    chalk.gray(\n      `--> Executing ${macroLabel} with ${actions.length}${addReturnActionXML ? \"+Return\" : \"\"} action(s)…`,\n    ),\n  );\n\n  // Start watching the Keyboard Maestro Engine log for errors\n  startWatching();\n\n  // Use osascript to run the macro - modify JXA based on whether we need to capture return value\n  const jxaScript = captureReturnValue\n    ? `(function () {\n        var kme = Application('Keyboard Maestro Engine');\n        var result = kme.doScript(${JSON.stringify(xml)});\n        return (result !== undefined && result !== null) ? String(result) : '';\n      })();`\n    : `Application('Keyboard Maestro Engine').doScript(${JSON.stringify(xml)})`;\n\n  const spawnSync = getSafeSpawnSync();\n\n  const osa = spawnSync(\"osascript\", [\"-l\", \"JavaScript\", \"-e\", jxaScript], {\n    encoding: \"utf8\",\n  });\n\n  // Check for errors in the osascript execution as the first attempt to procure errors\n  if (osa.error) {\n    console.error(chalk.red(\"Spawn error:\"), osa.error);\n    stopWatching();\n    if (captureReturnValue) {\n      throw osa.error;\n    }\n    return;\n  } else {\n    if (osa.stderr.trim()) {\n      console.error(chalk.red(\"[KM ERROR]\"), osa.stderr.trim());\n      stopWatching();\n      if (captureReturnValue) {\n        throw new Error(`KM Error: ${osa.stderr.trim()}`);\n      }\n      return;\n    }\n    if (osa.status !== 0) {\n      console.error(chalk.red(\"Non-zero exit code:\", osa.status));\n      stopWatching();\n      if (captureReturnValue) {\n        throw new Error(`Non-zero exit code: ${osa.status}`);\n      }\n      return;\n    }\n  }\n\n  // Now check the Keyboard Maestro Engine log for any errors that occurred during execution\n  if (!reportErrors(xml)) {\n    if (name) {\n      console.log(chalk.green(`✅ ${macroLabel} executed successfully.`));\n      console.log(\n        chalk.green(\n          `No Keyboard Maestro engine errors detected for '${name}'.`,\n        ),\n      );\n    } else {\n      console.log(chalk.green(\"✅ Virtual macro executed successfully.\"));\n      console.log(chalk.green(\"No Keyboard Maestro engine errors detected.\"));\n    }\n  }\n  stopWatching();\n\n  if (LOG_XML) {\n    console.log(chalk.magenta(\"[VirtualMacro XML]\"));\n    console.log(chalk.grey(xml));\n  }\n\n  // Return the captured result if requested\n  if (captureReturnValue) {\n    const result = osa.stdout.trim();\n    console.log(chalk.green(`[runVirtualMacro] Result: ${result}`));\n    return result;\n  }\n}\n","//FILE: src/utils/template.xml.variable.ts\n\nimport type {\n  ProcessingMode,\n  SetVariableWhere,\n} from \"../virtual_actions/types/types.data\";\nimport type { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Preset modes for Set Variable action (convenience, not in KM UI).\n * - undefined: normal\n * - \"delete\": sets Text to \"%Delete%\" (KM GUI suggested option)\n * - \"positionCursor\": sets Text to \"%|%\" (KM GUI suggested option)\n * - Any key from KM_TOKENS: sets Text to the corresponding token value\n *\n * @example\n * // KM GUI suggested presets\n * presetMode: \"delete\" // → \"%Delete%\"\n * presetMode: \"positionCursor\" // → \"%|%\"\n *\n * // Token presets\n * presetMode: \"ARandomUniqueID\" // → \"%RandomUUID%\"\n * presetMode: \"FrontApplicationName\" // → \"%Application%1%\"\n * presetMode: \"CurrentMouseLocation\" // → \"%CurrentMouse%\"\n */\nexport type SetVariablePresetMode =\n  | undefined\n  | \"delete\"\n  | \"positionCursor\"\n  | keyof typeof KM_TOKENS;\n\n/**\n * Renders the XML for the Set Variable action's ProcessingMode key.\n * Omits the key if mode is undefined (\"Process Text Normally\").\n * @param mode - Processing mode (undefined, \"TextTokensOnly\", \"Nothing\")\n * @returns Array of XML lines (empty if omitted)\n */\nexport function renderSetVariableProcessingModeXml(\n  mode?: ProcessingMode,\n): string[] {\n  if (!mode) return [];\n  return [\"\\t\\t<key>ProcessingMode</key>\", `\\t\\t<string>${mode}</string>`];\n}\n\n/**\n * Renders the XML for the Set Variable action's Where key.\n * Omits the key if where is undefined (\"Set Variable\").\n * @param where - Where mode (undefined, \"Prepend\", \"Append\")\n * @returns Array of XML lines (empty if omitted)\n */\nexport function renderSetVariableWhereXml(where?: SetVariableWhere): string[] {\n  if (!where) return [];\n  return [\"\\t\\t<key>Where</key>\", `\\t\\t<string>${where}</string>`];\n}\n","// FILE: src/utils/utils.styledText.ts\n// RUNTIME: Node 18+ (commonjs) – matches your project\n//\n// -------------------------------------------------------------------------------------------------\n// Purpose\n// -------------------------------------------------------------------------------------------------\n// Utilities for dealing with Keyboard Maestro's <StyledText><data>...</data></StyledText> payloads.\n// These payloads are Base-64 encoded RTF (technically an NSAttributedString archived to RTF/RTFD).\n// We provide:\n//\n//   • decodeStyledTextData(...)  -> Base64 blob -> { rtf, text }\n//   • encodeStyledTextData(...)  -> RTF string  -> Base64 blob (wrapped to 76-chars/line)\n//   • updateStyledTextInXml(...) -> Given a KM Action XML, apply a transform to the RTF, and\n//                                   write the updated Base-64 + <Text> plain string back.\n//\n// References:\n//   • “KM8: XML of Display Text in Window Does Not Update by Script” forum thread\n//     (NSAttributedString <-> RTF(D) <-> Base64 discussion & working AppleScript/ObjC sample).\n//\n// Credits:\n//   • JMichaelTX (https://forum.keyboardmaestro.com/u/JMichaelTX/summary) for the exploration\n//     work required to produce these functions.\n//\n// Caveats:\n//   • We cannot reproduce Cocoa's NSAttributedString fidelity from Node.js. We treat the RTF as\n//     opaque text. Replacing plain ASCII variable names inside the RTF is typically safe, but you\n//     should not try to change fonts/colors/etc. here — do that inside KM or a native helper.\n//   • Every time KM re-archives the NSAttributedString, the resulting data will differ\n//     (as Peter Lewis mentions) — so don't compare Base-64 strings for equality across writes.\n//\n// -------------------------------------------------------------------------------------------------\n\nimport chalk from \"chalk\";\nimport { escapeForXml } from \"./utils.xml\";\n\n/**\n * Result of decoding Keyboard Maestro's StyledText Base-64 payload.\n */\nexport interface DecodedStyledText {\n  /** The decoded RTF string (raw). */\n  rtf: string;\n  /**\n   * A best-effort \"plain text\" extraction from the RTF.\n   * We *do not* implement a full RTF parser here — this is purely heuristic.\n   */\n  text: string;\n}\n\n/**\n * An error thrown by this module. We isolate our thrown errors behind a public, typed class\n * so callers can safely `instanceof StyledTextError`.\n */\nexport class StyledTextError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = \"StyledTextError\";\n  }\n}\n\n/**\n * Decode a Keyboard Maestro `<StyledText>` data blob (Base-64) into its RTF string.\n *\n * @param base64 - The Base-64 text found inside `<data> ... </data>` (whitespace/newlines OK).\n * @returns {DecodedStyledText} { rtf, text }\n */\nexport function decodeStyledTextData(base64: string): DecodedStyledText {\n  try {\n    // Normalize whitespace, KM often wraps @ 76 columns.\n    const compact = base64.replace(/\\s+/g, \"\");\n    const buf = Buffer.from(compact, \"base64\");\n    const rtf = buf.toString(\"utf8\");\n\n    // Heuristic \"plain text\" extraction (strip {\\...}, \\'xx, \\controlwords, and braces).\n    // This is intentionally simple — for quick variable-name manipulations and previews.\n    const text = stripRtfToPlainText(rtf);\n\n    return { rtf, text };\n  } catch (err) {\n    const msg = `[utils.styledText.decode] Failed to decode Base-64 StyledText. ${(err as Error).message}`;\n    console.error(chalk.red(msg));\n    throw new StyledTextError(msg);\n  }\n}\n\n/**\n * Encode an **RTF string** into Keyboard Maestro's Base-64 blob.\n * The output is wrapped to 76 chars per line (a safe default for plist `<data>`).\n *\n * @param rtf - The raw RTF string to encode.\n * @param wrap - Whether to wrap the Base-64 at 76 columns (default: true).\n * @returns Base-64 text ready to drop inside `<data> ... </data>`.\n */\nexport function encodeStyledTextData(rtf: string, wrap = true): string {\n  try {\n    const b64 = Buffer.from(rtf, \"utf8\").toString(\"base64\");\n    return wrap ? wrapBase64(b64, 76) : b64;\n  } catch (err) {\n    const msg = `[utils.styledText.encode] Failed to encode RTF into Base-64. ${(err as Error).message}`;\n    console.error(chalk.red(msg));\n    throw new StyledTextError(msg);\n  }\n}\n\n/**\n * Update a KM Action XML string’s `<StyledText>` + `<Text>` fields by running a function that\n * takes the decoded RTF and returns a new RTF string.\n *\n * **Important**: We do *string* parsing on the XML (regex-based). That’s safer here because\n * Keyboard Maestro’s plist structure can vary slightly per action. If you prefer a DOM/Plist\n * approach, you can wire up `fast-xml-parser` here (already in your deps).\n *\n * @param xml - Entire KM Action XML (a `<dict>` or full `.kmmacros`).\n * @param transformer - Function that receives the decoded RTF and returns the new RTF.\n * @returns Updated XML string.\n */\nexport function updateStyledTextInXml(\n  xml: string,\n  transformer: (rtf: string) => string,\n): string {\n  const styledTextMatch = STYLED_TEXT_RE.exec(xml);\n  if (!styledTextMatch) {\n    console.warn(\n      chalk.yellow(\n        \"[utils.styledText.update] <StyledText><data>...</data> not found in given XML.\",\n      ),\n    );\n    return xml;\n  }\n\n  const rawData = styledTextMatch.groups?.data ?? \"\";\n  const { rtf } = decodeStyledTextData(rawData);\n\n  // Let the caller mutate the RTF however they like (typically variable name replacements).\n  const newRtf = transformer(rtf);\n\n  // Re-encode\n  const newB64 = encodeStyledTextData(newRtf, true);\n\n  // Update <StyledText> data\n  let newXml = replaceAt(\n    xml,\n    styledTextMatch.index,\n    styledTextMatch[0].length,\n    buildStyledTextXml(newB64),\n  );\n\n  // Also update plain text <key>Text</key><string>...</string>\n  const newPlain = stripRtfToPlainText(newRtf);\n  newXml = setPlainTextString(newXml, newPlain);\n\n  return newXml;\n}\n\n// -------------------------------------------------------------------------------------------------\n// Internals\n// -------------------------------------------------------------------------------------------------\n\n/**\n * Simple regex to capture the `<StyledText>` data block.\n * We use named capturing group `data` so it's easy to grab the base64 payload.\n */\nconst STYLED_TEXT_RE =\n  /<key>\\s*StyledText\\s*<\\/key>\\s*<data>(?<data>[\\s\\S]*?)<\\/data>/im;\n\n/**\n * Regex to locate the <key>Text</key> <string> ... </string> so we can keep it in sync.\n */\nconst PLAIN_TEXT_RE =\n  /<key>\\s*Text\\s*<\\/key>\\s*<string>(?<text>[\\s\\S]*?)<\\/string>/im;\n\n/**\n * Build a full `<StyledText>` XML fragment with properly wrapped Base-64.\n */\nfunction buildStyledTextXml(base64: string): string {\n  return [\"<key>StyledText</key>\", \"<data>\", base64, \"</data>\"].join(\"\\n\");\n}\n\n/**\n * Replace a segment of a string using start & length (so we don't do multi-regex confusion).\n */\nfunction replaceAt(\n  src: string,\n  start: number,\n  len: number,\n  insert: string,\n): string {\n  return src.slice(0, start) + insert + src.slice(start + len);\n}\n\n/**\n * Ensure the XML <key>Text</key><string>…</string> holds the *plain* version of the RTF.\n * If it doesn't exist, we do not add it (we keep changes as non-invasive as possible).\n */\nfunction setPlainTextString(xml: string, newText: string): string {\n  const match = PLAIN_TEXT_RE.exec(xml);\n  if (!match) {\n    console.warn(\n      chalk.yellow(\n        \"[utils.styledText.update] <key>Text</key> not found. Leaving XML untouched.\",\n      ),\n    );\n    return xml;\n  }\n  const { 0: all, groups } = match;\n  const oldText = groups?.text ?? \"\";\n\n  // Escape XML entities for safety.\n  const escaped = escapeForXml(newText);\n\n  const replacement = all.replace(oldText, escaped);\n  return xml.replace(all, replacement);\n}\n\n/**\n * Best-effort plain text extraction from RTF.\n * This is *not* a full RTF parser — it just strips basic control words, braces and hex escapes.\n *\n * @param rtf - The raw RTF string.\n * @returns \"Plain\" text.\n */\nexport function stripRtfToPlainText(rtf: string): string {\n  // 1) Handle hex escapes first\n  let s = rtf.replace(/\\\\'[0-9a-fA-F]{2}/g, (m) => {\n    // Convert \\'hh -> that byte\n    const hex = m.slice(2);\n    try {\n      return Buffer.from(hex, \"hex\").toString(\"latin1\");\n    } catch {\n      return \"\";\n    }\n  });\n\n  // 2) Remove RTF header groups\n  s = s.replace(/\\{\\\\fonttbl[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g, \"\");\n  s = s.replace(/\\{\\\\colortbl[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g, \"\");\n\n  // 3) Remove all control words\n  s = s.replace(/\\\\[a-zA-Z]+\\d*\\s?/g, \" \");\n\n  // 4) Remove remaining braces\n  s = s.replace(/[{}]/g, \"\");\n\n  // 5) Collapse multiple spaces/newlines and trim\n  s = s.replace(/\\s+/g, \" \").trim();\n\n  return s;\n}\n\n/**\n * Wrap a Base-64 string into fixed-length lines (default 76 chars) for plist <data>.\n */\nexport function wrapBase64(b64: string, width = 76): string {\n  const out: string[] = [];\n  for (let i = 0; i < b64.length; i += width) {\n    out.push(b64.slice(i, i + width));\n  }\n  return out.join(\"\\n\");\n}\n\n/**\n * Generate a basic RTF wrapper around plain text.\n * This creates a minimal RTF document with the text properly escaped.\n *\n * @param text - The plain text to wrap in RTF\n * @returns RTF string ready for encoding\n */\nexport function generateBasicRtf(text: string): string {\n  // Escape RTF special characters\n  const escapedText = text\n    .replace(/\\\\/g, \"\\\\\\\\\")\n    .replace(/}/g, \"\\\\}\")\n    .replace(/{/g, \"\\\\{\");\n\n  return `{\\\\rtf1\\\\ansi\\\\deff0 ${escapedText}}`;\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.insertText.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { renderSetVariableProcessingModeXml } from \"../utils/template.xml.variable\";\nimport {\n  encodeStyledTextData,\n  generateBasicRtf,\n  stripRtfToPlainText,\n} from \"../utils/utils.styledText\";\nimport {\n  resolveTokenPreset,\n  type TokenPresetMode,\n} from \"../utils/template.xml.token\";\nimport type { VirtualAction } from \"./types\";\nimport type { ProcessingMode } from \"./types/types.data\";\n\n/**\n * Action modes for Insert Text action.\n * - \"ByTyping\": Insert text by typing (simulates keystrokes)\n * - \"ByPasting\": Insert text by pasting (uses clipboard)\n * - \"ByPastingStyles\": Insert text by pasting with styles (uses styled text)\n * - \"DisplayWindow\": Display text in a window\n * - \"DisplayBriefly\": Display text briefly (notification-style)\n * - \"DisplayLarge\": Display text in large format\n */\nexport type InsertTextAction =\n  | \"ByTyping\"\n  | \"ByPasting\"\n  | \"ByPastingStyles\"\n  | \"DisplayWindow\"\n  | \"DisplayBriefly\"\n  | \"DisplayLarge\";\n\n/**\n * Options for Insert Text action.\n */\nexport interface InsertTextOptions {\n  /** The text to insert or display. */\n  text: string;\n\n  /**\n   * Token preset for convenience. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the text parameter.\n   */\n  tokenPreset?: TokenPresetMode;\n\n  /**\n   * Action mode - how the text should be inserted or displayed.\n   * @default \"ByTyping\"\n   */\n  action?: InsertTextAction;\n\n  /**\n   * Processing mode for the text.\n   * - undefined: Process Text Normally (default)\n   * - \"TextTokensOnly\": Process Text Tokens Only\n   * - \"Nothing\": Process Nothing\n   */\n  processingMode?: ProcessingMode;\n\n  /**\n   * Whether to include styled text data for actions that support it.\n   * Only applies to \"ByPastingStyles\" and \"DisplayWindow\" actions.\n   * When true, generates <StyledText><data>...</data></StyledText> from RTF.\n   * @default false\n   */\n  includeStyledText?: boolean;\n\n  /**\n   * RTF string for styled text. Only used when includeStyledText is true.\n   * If not provided, a basic RTF wrapper will be created around the text.\n   */\n  rtfContent?: string;\n\n  /**\n   * Target application for ByTyping action.\n   * - \"Front\": Target front application (default)\n   * - Custom targeting can be added later if needed\n   */\n  targetingType?: \"Front\";\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Insert Text action.\n *\n * This action can insert text by typing, pasting, or display it in various ways.\n * It supports styled text for certain action modes and text processing options.\n *\n * @param opts - InsertTextOptions for text content, action mode, processing, and styling.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic text insertion by typing\n * createVirtualInsertText({ text: \"Hello World\" })\n *\n * @example\n * // Display text in window with styled text\n * createVirtualInsertText({\n *   text: \"Styled Text\",\n *   action: \"DisplayWindow\",\n *   includeStyledText: true\n * })\n *\n * @example\n * // Insert by pasting with text tokens only\n * createVirtualInsertText({\n *   text: \"Variable: %Variable%MyVar%\",\n *   action: \"ByPasting\",\n *   processingMode: \"TextTokensOnly\"\n * })\n *\n * @example\n * // Token presets\n * createVirtualInsertText({ text: \"\", tokenPreset: \"ARandomUniqueID\" })\n * createVirtualInsertText({ text: \"\", tokenPreset: \"FrontApplicationName\", action: \"ByPasting\" })\n */\nexport function createVirtualInsertText(\n  opts: InsertTextOptions,\n): VirtualAction {\n  const {\n    text,\n    tokenPreset,\n    action = \"ByTyping\",\n    processingMode,\n    includeStyledText = false,\n    rtfContent,\n    targetingType = \"Front\",\n  } = opts;\n\n  // Resolve token preset\n  const resolvedText = resolveTokenPreset(text, tokenPreset);\n\n  // Build styled text data for actions that support it\n  const supportsStyledText =\n    action === \"ByPastingStyles\" || action === \"DisplayWindow\";\n  let styledTextXml = \"\";\n  let finalText = resolvedText;\n\n  if (includeStyledText && supportsStyledText) {\n    // Generate RTF content if not provided\n    let finalRtfContent = rtfContent;\n    if (!finalRtfContent) {\n      finalRtfContent = generateBasicRtf(resolvedText);\n    }\n\n    try {\n      // Encode the RTF as base64 styled text data\n      const styledTextData = encodeStyledTextData(finalRtfContent);\n      const indentedData = styledTextData\n        .split(\"\\n\")\n        .map((line) => `\\t\\t${line}`)\n        .join(\"\\n\");\n\n      styledTextXml = [\n        \"\\t\\t<key>StyledText</key>\",\n        \"\\t\\t<data>\",\n        indentedData,\n        \"\\t\\t</data>\",\n      ].join(\"\\n\");\n\n      // When using custom RTF, extract the plain text from it for the Text field\n      // This matches Keyboard Maestro's behavior\n      if (rtfContent) {\n        finalText = stripRtfToPlainText(finalRtfContent);\n      }\n    } catch (error) {\n      // If styled text encoding fails, fall back to plain text\n      console.warn(\n        `[insertText] Failed to encode styled text, falling back to plain text: ${error}`,\n      );\n    }\n  }\n\n  // Build target application XML for ByTyping action\n  const targetingXml =\n    action === \"ByTyping\"\n      ? [\n          \"\\t\\t<key>TargetApplication</key>\",\n          \"\\t\\t<dict/>\",\n          \"\\t\\t<key>TargetingType</key>\",\n          `\\t\\t<string>${targetingType}</string>`,\n        ].join(\"\\n\")\n      : \"\";\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    `\\t\\t<string>${action}</string>`,\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>InsertText</string>\",\n    ...(processingMode\n      ? renderSetVariableProcessingModeXml(processingMode)\n      : []),\n    ...(styledTextXml ? [styledTextXml] : []),\n    ...(targetingXml ? [targetingXml] : []),\n    \"\\t\\t<key>Text</key>\",\n    `\\t\\t<string>${escapeForXml(finalText)}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.displayText.ts\n\n/**\n * DISPLAY TEXT WRAPPERS\n *\n * This module provides convenience functions around the InsertText virtual action\n * to display text in common KM modes: briefly (notification-style) or in a window.\n * It leverages createVirtualInsertText under the hood, reducing boilerplate for callers.\n *\n * Inline documentation is provided for parameters and behavior to assist new contributors\n * and automated agents in understanding the purpose of each wrapper.\n */\n\nimport type { VirtualAction } from \"./types\";\nimport type { ProcessingMode } from \"./types/types.data\";\nimport { createVirtualInsertText } from \"./kmjs.virtualAction.insertText\";\nimport {\n  resolveTokenPreset,\n  type TokenPresetMode,\n} from \"../utils/template.xml.token\";\n\n/**\n * Options for DisplayText virtual action wrapper.\n */\nexport interface DisplayTextOptions {\n  /** The text to display. */\n  text: string;\n\n  /**\n   * Token preset for convenience. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the text parameter.\n   */\n  tokenPreset?: TokenPresetMode;\n\n  /**\n   * Optional text processing mode.\n   * - undefined: Process text normally (default)\n   * - \"TextTokensOnly\": Process text tokens only\n   * - \"Nothing\": Process nothing\n   */\n  processingMode?: ProcessingMode;\n\n  /**\n   * Whether to include styled text data (only applies to DisplayWindow).\n   * @default false\n   */\n  includeStyledText?: boolean;\n\n  /**\n   * Optional RTF content when includeStyledText is true.\n   */\n  rtfContent?: string;\n}\n\n/**\n * Constructs a VirtualAction to display text briefly (notification-style, self-dimssing after a short timeframe).\n *\n * Appropirate for quick messages, small in nature and importance.\n *\n * This is a wrapper around the InsertText action, preconfigured for\n * the 'DisplayBriefly' mode.\n *\n * @param opts - Options including the text to display and optional processing.\n * @returns A VirtualAction emitting the corresponding KM XML.\n *\n * @example\n * // Basic usage\n * createVirtualDisplayTextBriefly({ text: \"Hello World\" })\n *\n * @example\n * // Token presets\n * createVirtualDisplayTextBriefly({ text: \"\", tokenPreset: \"ARandomUniqueID\" })\n * createVirtualDisplayTextBriefly({ text: \"\", tokenPreset: \"FrontApplicationName\" })\n */\nexport function createVirtualDisplayTextBriefly(\n  opts: DisplayTextOptions,\n): VirtualAction {\n  const finalText = resolveTokenPreset(opts.text, opts.tokenPreset);\n\n  return createVirtualInsertText({\n    text: finalText,\n    action: \"DisplayBriefly\",\n    processingMode: opts.processingMode,\n    includeStyledText: false,\n  });\n}\n\n/**\n * Constructs a VirtualAction to display text in a window.\n *\n * Creates a pop-up modal window appropriate for displaying large amounts of information.\n *\n * This is a wrapper around the InsertText action, preconfigured for\n * the 'DisplayWindow' mode. Supports optional styled text.\n *\n * @param opts - Options including the text to display, processing, and styling.\n * @returns A VirtualAction emitting the corresponding KM XML.\n *\n * @example\n * // Basic usage\n * createVirtualDisplayTextWindow({ text: \"Hello World\" })\n *\n * @example\n * // Token presets\n * createVirtualDisplayTextWindow({ text: \"\", tokenPreset: \"CurrentMouseLocation\" })\n * createVirtualDisplayTextWindow({ text: \"\", tokenPreset: \"FrontApplicationName\" })\n */\nexport function createVirtualDisplayTextWindow(\n  opts: DisplayTextOptions,\n): VirtualAction {\n  const finalText = resolveTokenPreset(opts.text, opts.tokenPreset);\n\n  return createVirtualInsertText({\n    text: finalText,\n    action: \"DisplayWindow\",\n    processingMode: opts.processingMode,\n    includeStyledText: opts.includeStyledText ?? false,\n    rtfContent: opts.rtfContent,\n  });\n}\n","//FILE: src/kmjs.generateMacro.ts\n\n/**\n * Generate macro XML from virtual actions with flexible output options.\n *\n * This module provides the core `generateMacro` function that takes an array of VirtualAction\n * instances and generates the corresponding Keyboard Maestro XML. Unlike `runVirtualMacro`,\n * this function focuses on XML generation rather than execution, offering multiple output\n * targets including raw XML, file export, text window display, and direct KM group import.\n */\n\nimport chalk from \"chalk\";\nimport type { VirtualAction } from \"./virtual_actions/types\";\nimport { PLIST_HEADER, PLIST_FOOTER } from \"./utils/template.xml.generic\";\nimport { createVirtualDisplayTextWindow } from \"./virtual_actions/kmjs.virtualAction.displayText\";\nimport { runVirtualMacro } from \"./kmjs.runVirtualMacro\";\nimport { getSafeSpawnSync } from \"./utils/utils.spawn\";\nimport { wrapAsKMMacros } from \"./utils/km.interface\";\nimport { generateKMTimeCode } from \"./utils/utils.xml\";\n\n/**\n * Export target configuration for generateMacro function.\n * Determines how the generated XML should be output or processed.\n */\nexport interface ExportTarget {\n  /**\n   * Display the generated XML in a Keyboard Maestro text window.\n   * Uses the createVirtualDisplayTextWindow action to show the XML content.\n   */\n  displayInTextWindow?: boolean;\n\n  /**\n   * File path to export the macro as a .kmmacros file.\n   * When specified, the XML will be wrapped with plist headers and saved to disk.\n   * The file extension .kmmacros will be added automatically if not present.\n   */\n  filePath?: string;\n\n  /**\n   * Name of the Keyboard Maestro macro group to export the macro to.\n   * When specified, the macro will be imported directly into the specified group.\n   * If the group doesn't exist, it will be created automatically.\n   */\n  toKMGroup?: string;\n}\n\n/**\n * Options for the generateMacro function.\n */\nexport interface GenerateMacroOptions {\n  /**\n   * Whether to add plist XML wrapper (header and footer).\n   * Required for file export and KM group import.\n   * @default false\n   */\n  addPlistWrapping?: boolean;\n\n  /**\n   * Export target configuration. If not specified, returns raw XML.\n   * Multiple targets can be specified simultaneously.\n   */\n  exportTarget?: ExportTarget;\n\n  /**\n   * Optional macro name for identification in logs and KM interface.\n   * Used when exporting to files or KM groups.\n   */\n  macroName?: string;\n}\n\n/**\n * Generates Keyboard Maestro XML from an array of VirtualAction instances.\n *\n * This function provides flexible output options for the generated XML:\n * - Raw XML string (default)\n * - Display in KM text window\n * - Export to .kmmacros file\n * - Import directly to KM macro group\n *\n * Unlike `runVirtualMacro`, this function focuses on XML generation and export\n * rather than immediate execution, making it ideal for macro development,\n * debugging, and batch processing workflows.\n *\n * @param actions - Array of VirtualAction instances to convert to XML\n * @param options - Configuration options for XML generation and export\n * @returns The generated XML string (always returned regardless of export targets)\n *\n * @example\n * ```typescript\n * // Generate raw XML\n * const xml = generateMacro([\n *   createVirtualNotification({ title: \"Hello\" }),\n *   createVirtualPause({ time: 1 })\n * ]);\n *\n * // Display XML in text window\n * generateMacro(actions, {\n *   exportTarget: { displayInTextWindow: true }\n * });\n *\n * // Export to file with plist wrapping\n * generateMacro(actions, {\n *   addPlistWrapping: true,\n *   exportTarget: { filePath: \"/path/to/macro.kmmacros\" },\n *   macroName: \"My Generated Macro\"\n * });\n *\n * // Import directly to KM group\n * generateMacro(actions, {\n *   exportTarget: { toKMGroup: \"Generated Macros\" },\n *   macroName: \"Auto Generated\"\n * });\n * ```\n */\nexport function generateMacro(\n  actions: VirtualAction[],\n  options: GenerateMacroOptions = {},\n): string {\n  const {\n    addPlistWrapping = false,\n    exportTarget = {},\n    macroName = \"Generated Macro\",\n  } = options;\n\n  // Validate inputs\n  if (actions.length === 0) {\n    console.log(\n      chalk.yellow(\"No actions provided - generating empty macro XML.\"),\n    );\n  }\n\n  // Generate the core XML from actions\n  const actionsXml = actions.map((action) => action.toXml()).join(\"\\n\");\n\n  // Apply plist wrapping if requested or required by export target\n  const needsPlistWrapping =\n    addPlistWrapping || exportTarget.filePath || exportTarget.toKMGroup;\n\n  const finalXml = needsPlistWrapping\n    ? PLIST_HEADER + actionsXml + \"\\n\" + PLIST_FOOTER\n    : actionsXml;\n\n  console.log(\n    chalk.gray(\n      `Generated XML for ${actions.length} action(s)${needsPlistWrapping ? \" with plist wrapping\" : \"\"}`,\n    ),\n  );\n\n  // Process export targets\n  if (exportTarget.displayInTextWindow) {\n    handleDisplayInTextWindow(finalXml);\n  }\n\n  if (exportTarget.filePath) {\n    try {\n      handleFileExport(finalXml, exportTarget.filePath, macroName);\n    } catch (error) {\n      // In test environments, we may not have real file system access\n      // Log the error but don't throw to allow testing of XML generation\n      if (process.env.NODE_ENV === \"test\" || process.env.VITEST) {\n        console.warn(\n          `File export skipped in test environment: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  if (exportTarget.toKMGroup) {\n    try {\n      // Pass the raw actions XML, not the plist-wrapped version\n      handleKMGroupExport(actionsXml, exportTarget.toKMGroup, macroName);\n    } catch (error) {\n      // In test environments, we may not have Keyboard Maestro access\n      // Log the error but don't throw to allow testing of XML generation\n      if (process.env.NODE_ENV === \"test\" || process.env.VITEST) {\n        console.warn(\n          `KM group export skipped in test environment: ${error instanceof Error ? error.message : String(error)}`,\n        );\n      } else {\n        throw error;\n      }\n    }\n  }\n\n  return finalXml;\n}\n\n/**\n * Displays the generated XML in a Keyboard Maestro text window.\n *\n * Creates and executes a virtual macro containing a DisplayTextWindow action\n * to show the XML content in a readable format within Keyboard Maestro.\n *\n * @param xml - The XML content to display\n */\nfunction handleDisplayInTextWindow(xml: string): void {\n  console.log(chalk.blue(\"Displaying XML in Keyboard Maestro text window...\"));\n\n  const displayAction = createVirtualDisplayTextWindow({\n    text: xml,\n    processingMode: \"Nothing\", // Prevent token processing in XML content\n  });\n\n  runVirtualMacro([displayAction], \"Display Generated XML\");\n}\n\n/**\n * Exports the generated XML to a .kmmacros file.\n *\n * Writes the XML content to the specified file path, automatically adding\n * the .kmmacros extension if not present. The XML must include plist wrapping\n * for the file to be valid for Keyboard Maestro import.\n *\n * @param xml - The XML content to export (should include plist wrapping)\n * @param filePath - Target file path for export\n * @param macroName - Name of the macro for logging purposes\n */\nfunction handleFileExport(\n  xml: string,\n  filePath: string,\n  macroName: string,\n): void {\n  // Lazy import to avoid CEP environment issues\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  // Ensure .kmmacros extension\n  const finalPath = filePath.endsWith(\".kmmacros\")\n    ? filePath\n    : `${filePath}.kmmacros`;\n\n  try {\n    // Ensure directory exists\n    const dir = path.dirname(finalPath);\n    if (!fs.existsSync(dir)) {\n      fs.mkdirSync(dir, { recursive: true });\n    }\n\n    // Write the file\n    fs.writeFileSync(finalPath, xml, \"utf8\");\n\n    const stats = fs.statSync(finalPath);\n    console.log(\n      chalk.green(\n        `✅ Exported \"${macroName}\" to ${finalPath} (${stats.size} bytes)`,\n      ),\n    );\n  } catch (error) {\n    console.error(\n      chalk.red(\n        `❌ Failed to export to file: ${error instanceof Error ? error.message : String(error)}`,\n      ),\n    );\n    throw error;\n  }\n}\n\n/**\n * Imports the generated macro directly into a Keyboard Maestro macro group.\n *\n * Creates a temporary .kmmacros file and uses AppleScript to import it into\n * the specified macro group. If the group doesn't exist, Keyboard Maestro\n * will create it automatically. Any existing macro with the same name will\n * be deleted before import to prevent duplicates.\n *\n * @param xml - The XML content to import (should include plist wrapping)\n * @param groupName - Name of the target macro group\n * @param macroName - Name of the macro for identification and cleanup\n */\n/**\n * Creates a proper .kmmacros file structure for importing into Keyboard Maestro.\n *\n * This function wraps the actions XML in the proper macro group structure that\n * Keyboard Maestro expects, including the group metadata and individual macro\n * structure with Actions array, Name, UID, etc.\n *\n * @param actionsXml - The raw actions XML (without plist wrapping)\n * @param macroName - Name of the macro\n * @param groupName - Name of the target group\n * @returns Complete .kmmacros file content\n */\nfunction createMacroGroupPlist(\n  actionsXml: string,\n  macroName: string,\n  groupName: string,\n): string {\n  const macroUID = Date.now().toString();\n  const groupUID = (Date.now() + 1).toString(); // Ensure unique UIDs\n  const timeCode = generateKMTimeCode();\n\n  // Create the macro structure with proper indentation\n  const macroDict = [\n    `\\t\\t\\t<dict>`,\n    `\\t\\t\\t\\t<key>Actions</key>`,\n    `\\t\\t\\t\\t<array>`,\n    // Actions XML needs to be indented 5 tabs deep\n    ...actionsXml.split(\"\\n\").map((line) => (line ? `\\t\\t\\t\\t\\t${line}` : \"\")),\n    `\\t\\t\\t\\t</array>`,\n    `\\t\\t\\t\\t<key>CreationDate</key>`,\n    `\\t\\t\\t\\t<real>${timeCode}</real>`,\n    `\\t\\t\\t\\t<key>ModificationDate</key>`,\n    `\\t\\t\\t\\t<real>${timeCode}</real>`,\n    `\\t\\t\\t\\t<key>Name</key>`,\n    `\\t\\t\\t\\t<string>${macroName}</string>`,\n    `\\t\\t\\t\\t<key>Triggers</key>`,\n    `\\t\\t\\t\\t<array/>`,\n    `\\t\\t\\t\\t<key>UID</key>`,\n    `\\t\\t\\t\\t<string>${macroUID}</string>`,\n    `\\t\\t\\t</dict>`,\n  ].join(\"\\n\");\n\n  // Create the group structure\n  const groupPlist = [\n    `<?xml version=\"1.0\" encoding=\"UTF-8\"?>`,\n    `<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">`,\n    `<plist version=\"1.0\">`,\n    `<array>`,\n    `\\t<dict>`,\n    `\\t\\t<key>Activate</key>`,\n    `\\t\\t<string>Normal</string>`,\n    `\\t\\t<key>CreationDate</key>`,\n    `\\t\\t<real>${timeCode}</real>`,\n    `\\t\\t<key>Macros</key>`,\n    `\\t\\t<array>`,\n    macroDict,\n    `\\t\\t</array>`,\n    `\\t\\t<key>Name</key>`,\n    `\\t\\t<string>${groupName}</string>`,\n    `\\t\\t<key>ToggleMacroUID</key>`,\n    `\\t\\t<string>00000000-0000-0000-0000-000000000000</string>`,\n    `\\t\\t<key>UID</key>`,\n    `\\t\\t<string>${groupUID}</string>`,\n    `\\t</dict>`,\n    `</array>`,\n    `</plist>`,\n  ].join(\"\\n\");\n\n  return groupPlist;\n}\n\nfunction handleKMGroupExport(\n  actionsXml: string,\n  groupName: string,\n  macroName: string,\n): void {\n  // Lazy imports to avoid CEP environment issues\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n  const os = require(\"os\");\n\n  console.log(\n    chalk.blue(`Importing \"${macroName}\" to KM group \"${groupName}\"...`),\n  );\n\n  // Create the proper macro group plist structure\n  const plistXml = createMacroGroupPlist(actionsXml, macroName, groupName);\n\n  // Create temporary file\n  const tempPath = path.join(\n    os.tmpdir(),\n    `kmjs-generated-${Date.now()}.kmmacros`,\n  );\n\n  try {\n    // Write temporary .kmmacros file\n    fs.writeFileSync(tempPath, plistXml, \"utf8\");\n\n    // Delete existing macro with same name to prevent duplicates\n    console.log(\n      chalk.gray(`Deleting existing macro \"${macroName}\" if present...`),\n    );\n    const spawnSync = getSafeSpawnSync();\n\n    const deleteResult = spawnSync(\n      \"osascript\",\n      [\n        \"-e\",\n        `tell application \"Keyboard Maestro\" to deleteMacro \"${macroName}\"`,\n      ],\n      { encoding: \"utf8\" },\n    );\n\n    if (deleteResult.status === 0) {\n      console.log(chalk.gray(`Deleted existing macro \"${macroName}\"`));\n    } else {\n      console.log(chalk.gray(`No existing macro \"${macroName}\" to delete`));\n    }\n\n    // Import the macro using AppleScript\n    const importResult = spawnSync(\n      \"osascript\",\n      [\n        \"-e\",\n        `tell application \"Keyboard Maestro\" to importMacros (POSIX file \"${tempPath}\" as alias)`,\n      ],\n      { encoding: \"utf8\" },\n    );\n\n    if (importResult.status !== 0) {\n      throw new Error(\n        `Import failed: ${importResult.stderr.trim() || importResult.stdout.trim()}`,\n      );\n    }\n\n    console.log(\n      chalk.green(\n        `✅ Successfully imported \"${macroName}\" to group \"${groupName}\"`,\n      ),\n    );\n  } catch (error) {\n    console.error(\n      chalk.red(\n        `❌ Failed to import to KM group: ${error instanceof Error ? error.message : String(error)}`,\n      ),\n    );\n    throw error;\n  } finally {\n    // Clean up temporary file\n    try {\n      if (fs.existsSync(tempPath)) {\n        fs.unlinkSync(tempPath);\n      }\n    } catch (cleanupError) {\n      console.warn(\n        chalk.yellow(`Warning: Could not delete temp file ${tempPath}`),\n      );\n    }\n  }\n}\n","//FILE: src/kmjs.kmvar.ts\n\n/**\n * @file kmjs.kmvar.ts\n * @module kmjs.kmvar\n * @description Access Keyboard Maestro variables from Node.js.\n *\n * Provides `get(name)`, `set(name, value)`, and a callable `kmvar(name)` wrapper.\n *\n * Example:\n *   kmvar.set('MyVar', 'value');\n *   const val = kmvar.get('MyVar');\n *   kmvar('MyVar', 'new'); // sets\n *   const v = kmvar('MyVar'); // gets\n */\n// Lazy import to avoid CEP environment issues\n\nconst INSTANCE_PREFIX = /^(?:INSTANCE|LOCAL)/i;\n\n/** Determine whether the supplied name denotes a local / instance variable. */\nfunction isInstanceVariable(name: string): boolean {\n  return INSTANCE_PREFIX.test(name);\n}\n\n/**\n * Get the value of a Keyboard Maestro variable.\n *\n * @param name - Variable name (prefix INSTANCE or LOCAL for instance vars).\n * @returns The variable’s value, or empty string if not set.\n * @throws If `KMINSTANCE` is missing when accessing an instance/local variable.\n */\nexport function get(name: string): string {\n  // Safe process.env access for CEP environments\n  const kmInstance =\n    typeof process !== \"undefined\" && process.env\n      ? (process.env.KMINSTANCE ?? \"\")\n      : \"\";\n\n  let script: string;\n  if (isInstanceVariable(name)) {\n    if (!kmInstance) {\n      throw new Error(\n        `KMINSTANCE env var is not set – cannot access instance/local variable “${name}”.`,\n      );\n    }\n    script = `tell application \"Keyboard Maestro Engine\" to getvariable \"${name}\" instance \"${kmInstance}\"`;\n  } else {\n    script = `tell application \"Keyboard Maestro Engine\" to getvariable \"${name}\"`;\n  }\n\n  const { execSync } = require(\"child_process\");\n\n  // Safe child_process check\n  if (typeof execSync !== \"function\") {\n    throw new Error(\"child_process.execSync not available in this environment\");\n  }\n\n  return execSync(`osascript -e '${script}'`, { encoding: \"utf8\" }).trim();\n}\n\n/**\n * Set the value of a Keyboard Maestro variable.\n *\n * @param name - Variable name (prefix INSTANCE or LOCAL for instance vars).\n * @param value - Value to assign; will be converted to string.\n * @throws If `KMINSTANCE` is missing when setting an instance/local variable.\n */\nexport function set(name: string, value: unknown): void {\n  // Safe process.env access for CEP environments\n  const kmInstance =\n    typeof process !== \"undefined\" && process.env\n      ? (process.env.KMINSTANCE ?? \"\")\n      : \"\";\n\n  let script: string;\n  if (isInstanceVariable(name)) {\n    if (!kmInstance) {\n      throw new Error(\n        `KMINSTANCE env var is not set – cannot set instance/local variable “${name}”.`,\n      );\n    }\n    script = `tell application \"Keyboard Maestro Engine\" to setvariable \"${name}\" to \"${value}\" instance \"${kmInstance}\"`;\n  } else {\n    script = `tell application \"Keyboard Maestro Engine\" to setvariable \"${name}\" to \"${value}\"`;\n  }\n\n  const { execSync } = require(\"child_process\");\n\n  // Safe child_process check\n  if (typeof execSync !== \"function\") {\n    throw new Error(\"child_process.execSync not available in this environment\");\n  }\n\n  execSync(`osascript -e '${script}'`);\n}\n\n/**\n * Uniform getter/setter function for Keyboard Maestro variables.\n *\n * @param name - Variable name.\n * @param value - Optional: value to set; if omitted, the current value is returned.\n * @returns The variable’s value when used as getter, otherwise undefined.\n */\nexport const kmvar = Object.assign(\n  function (name: string, value?: unknown): string | void {\n    return typeof value === \"undefined\" ? get(name) : set(name, value);\n  },\n  { get, set },\n) as {\n  (name: string): string;\n  (name: string, value: unknown): void;\n  get: typeof get;\n  set: typeof set;\n};\n\nexport default kmvar;\n","//FILE: src/virtual_actions/kmjs.virtualAction.playSound.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport type { KMSound } from \"./types/types.system\";\nimport chalk from \"chalk\";\n\n/**\n * Options for building a PlaySound action.\n */\nexport interface PlaySoundOptions {\n  /**\n   * A built‑in sound name to play (from KMSound).\n   * If omitted, defaults to \"Tink\".\n   */\n  sound?: KMSound;\n  /**\n   * A full path to a custom sound file.\n   * If provided, this path will be used instead of a built‑in sound.\n   */\n  path?: string;\n  /**\n   * Whether the sound should play asynchronously.\n   * Defaults to true.\n   */\n  asynchronously?: boolean;\n  /**\n   * Volume percentage (0–100).\n   * Defaults to 75.\n   */\n  volume?: number;\n  /**\n   * The output device identifier.\n   * Defaults to \"SOUNDEFFECTS\" (the system default effects device).\n   */\n  deviceID?: string;\n  /**\n   * Whether timeout should abort the macro.\n   * Defaults to true.\n   */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro PlaySound action.\n *\n * @param opts - PlaySoundOptions to configure sound, path, async behavior, etc.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n */\nexport function createVirtualPlaySound(\n  opts: PlaySoundOptions = {},\n): VirtualAction {\n  console.log(\n    chalk.cyan(`[VirtualAction] PlaySound:`),\n    chalk.grey(JSON.stringify(opts)),\n  );\n  const {\n    sound = \"Tink\",\n    path,\n    asynchronously = true,\n    volume = 75,\n    // KM appears to always serialize TimeOutAbortsMacro = true for PlaySound.\n    // We accept the option for API symmetry but ignore falsy values to avoid diffs.\n    timeoutAborts = true,\n  } = opts;\n\n  // Determine output device: custom files should use SOUNDEFFECTS to match KM behavior\n  const isCustomPath = typeof path === \"string\" && path.includes(\"/\");\n  const deviceID = \"SOUNDEFFECTS\";\n  const soundPath = isCustomPath\n    ? path!\n    : `/System/Library/Sounds/${sound}.aiff`;\n\n  // KM ordering observed in retrieved XML:\n  // ActionUID, Asynchronously?, DeviceID, MacroActionType, Path, TimeOutAbortsMacro, Volume?\n  const volInt = Math.max(0, Math.min(100, Math.round(volume)));\n  const includeVolume = volInt !== 100; // KM omits when default (100) — observed in retrieval.\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    asynchronously ? \"\\t\\t<key>Asynchronously</key>\" : \"\",\n    asynchronously ? \"\\t\\t<true/>\" : \"\",\n    \"\\t\\t<key>DeviceID</key>\",\n    `\\t\\t<string>${deviceID}</string>`,\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>PlaySound</string>\",\n    \"\\t\\t<key>Path</key>\",\n    `\\t\\t<string>${escapeForXml(soundPath)}</string>`,\n    // Force TimeOutAbortsMacro true (KM seems to always set)\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    \"\\t\\t<true/>\",\n    includeVolume ? \"\\t\\t<key>Volume</key>\" : \"\",\n    includeVolume ? `\\t\\t<integer>${volInt}</integer>` : \"\",\n    \"\\t</dict>\",\n  ].filter(Boolean);\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.notification.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { createVirtualPlaySound } from \"./kmjs.virtualAction.playSound\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport {\n  resolveTokenPreset,\n  type TokenPresetMode,\n} from \"../utils/template.xml.token\";\nimport type { VirtualAction } from \"./types\";\nimport chalk from \"chalk\";\n\n/**\n * Options for building a Notification action.\n */\nexport interface NotificationOptions {\n  title: string;\n  subtitle?: string;\n  body: string;\n  /**\n   * Either a built‑in KP sound name, or a full path to a custom file.\n   */\n  sound?: string;\n\n  /**\n   * Token preset for title. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the title parameter.\n   */\n  titleTokenPreset?: TokenPresetMode;\n\n  /**\n   * Token preset for subtitle. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the subtitle parameter.\n   */\n  subtitleTokenPreset?: TokenPresetMode;\n\n  /**\n   * Token preset for body. Any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   * When provided, overrides the body parameter.\n   */\n  bodyTokenPreset?: TokenPresetMode;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Notification.\n * @param opts - NotificationOptions with title, body, subtitle, and optional sound.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic usage\n * createVirtualNotification({ title: \"Alert\", body: \"Something happened\" })\n *\n * @example\n * // Token presets\n * createVirtualNotification({\n *   title: \"\",\n *   titleTokenPreset: \"FrontApplicationName\",\n *   body: \"\",\n *   bodyTokenPreset: \"CurrentMouseLocation\"\n * })\n */\nexport function createVirtualNotification(\n  opts: NotificationOptions,\n): VirtualAction {\n  console.log(\n    chalk.cyan(`[VirtualAction] Notification:`),\n    chalk.grey(JSON.stringify(opts)),\n  );\n  const {\n    title,\n    subtitle = \"\",\n    body,\n    sound = \"\",\n    titleTokenPreset,\n    subtitleTokenPreset,\n    bodyTokenPreset,\n  } = opts;\n\n  // Resolve token presets\n  const finalTitle = resolveTokenPreset(title, titleTokenPreset);\n  const finalSubtitle = resolveTokenPreset(subtitle, subtitleTokenPreset);\n  const finalBody = resolveTokenPreset(body, bodyTokenPreset);\n\n  // Detect custom file path if it contains a slash\n  const isCustomPath = sound.includes(\"/\");\n\n  // Build notification XML (no SoundName if using custom path)\n  const xmlLines = [\n    `\\t<dict>`,\n    ...generateActionUIDXml(),\n    `\\t\\t<key>MacroActionType</key>`,\n    `\\t\\t<string>Notification</string>`,\n    `\\t\\t<key>SoundName</key>`,\n    isCustomPath\n      ? `\\t\\t<string></string>`\n      : `\\t\\t<string>${escapeForXml(sound)}</string>`,\n    `\\t\\t<key>Subtitle</key>`,\n    `\\t\\t<string>${escapeForXml(finalSubtitle)}</string>`,\n    `\\t\\t<key>Text</key>`,\n    `\\t\\t<string>${escapeForXml(finalBody)}</string>`,\n    `\\t\\t<key>Title</key>`,\n    `\\t\\t<string>${escapeForXml(finalTitle)}</string>`,\n    `\\t</dict>`,\n  ].join(\"\\n\");\n\n  // If custom path, append a PlaySound action\n  if (isCustomPath) {\n    const playAction = createVirtualPlaySound({ path: sound });\n    const combined = [xmlLines, playAction.toXml().trim()].join(\"\\n\");\n    return { toXml: () => formatXmlAction(combined) };\n  }\n\n  // Default built‑in notification sound\n  return { toXml: () => formatXmlAction(xmlLines) };\n}\n","//FILE: src/kmjs.notify.ts\n\n/**\n * @file kmjs.notify.ts\n * @module kmjs.notify\n * @description Sends a notification using a virtual Keyboard Maestro Notification action.\n *\n * The return value of this function corresponds to the final 'Return'\n * action if you add one to the virtual macro.\n *\n * @example\n * import { notify } from 'kmjs';\n * notify({ title: 'Done', body: 'Finished', sound: 'Ping' });\n */\n\nimport chalk from \"chalk\";\nimport { createVirtualNotification } from \"./virtual_actions/kmjs.virtualAction.notification\";\nimport { runVirtualMacro } from \"./kmjs.runVirtualMacro\";\nimport type { NotificationOptions } from \"./virtual_actions/kmjs.virtualAction.notification\";\nimport type { KMSound } from \"./virtual_actions/types/types.system\";\n\n/**\n * Options for sending a Keyboard Maestro notification via KMJS.\n *\n * @property title - Notification title (required)\n * @property body - Notification body text (required)\n * @property subtitle - Optional subtitle (shown smaller, below title)\n * @property sound - Optional sound effect (built-in KM sound name or custom file path)\n */\nexport interface NotifyOptions extends Omit<NotificationOptions, never> {\n  /** Notification title. */\n  title: string;\n  /** Notification body. */\n  body: string;\n  /** Optional subtitle (shown smaller, below title). */\n  subtitle?: string;\n  /** Optional KM sound effect name (see KMSound) or custom file path. */\n  sound?: KMSound | string;\n}\n\n/**\n * Convenience function to immediately display a Keyboard Maestro notification using a virtual action.\n *\n * This is a fire-and-forget utility: import and call it directly to show a notification in KM.\n * It automatically generates and executes a transient macro containing a single notification action.\n *\n * @param options - Notification options (title, body, optional subtitle, sound)\n * @returns void\n *\n * @example\n * import { notify } from 'kmjs';\n * notify({ title: 'Done', body: 'Finished', sound: 'Glass' });\n * notify({ title: 'Alert', body: 'Something happened', subtitle: 'Heads up!' });\n */\nexport function notify({\n  title,\n  body,\n  subtitle = \"\",\n  sound = \"\",\n}: NotifyOptions): void {\n  console.log(\n    chalk.magenta(`→ [kmjs.notify] Using virtual notification action`),\n  );\n\n  const action = createVirtualNotification({ title, body, subtitle, sound });\n  console.log(chalk.blue(\"Sending virtual Keyboard Maestro notification…\"));\n  runVirtualMacro([action], \"notify\");\n  console.log(chalk.green(\"Notification sent.\"));\n}\n\n/* ------------------------------------------------------------------ */\n/* Optional CLI usage:                                                */\n/* node dist/kmjs.notify.js \"Hello\" \"World\" \"Hero\"                    */\n/* ------------------------------------------------------------------ */\n// Safe CLI entry point for environments where require.main might not exist\ntry {\n  if (require.main === module) {\n    const argv =\n      typeof process !== \"undefined\" && process.argv\n        ? process.argv.slice(2)\n        : [];\n    const [title, body, sound] = argv;\n    if (!title || !body) {\n      console.error(\"Usage: node kmjs.notify.js <title> <body> [sound]\");\n      if (typeof process !== \"undefined\" && process.exit) process.exit(1);\n    } else {\n      try {\n        notify({ title, body, sound });\n      } catch (err) {\n        console.error(\"Error sending notification:\", (err as Error).message);\n        if (typeof process !== \"undefined\" && process.exit) process.exit(1);\n      }\n    }\n  }\n} catch (error) {\n  // Silently ignore if require.main is not available (e.g., in CEP environments)\n}\n","// FILE: src/tokens/km.token.lookup.ts\n\n/**\n * @file Lightweight utility to translate Keyboard Maestro token names\n * between Human-Readable, PascalCase, and Raw KM Token representations.\n */\n\n// Lazy imports to avoid CEP environment issues\n\n/**\n * Represents the three forms of a Keyboard Maestro token.\n */\ninterface TokenTriple {\n  human: string;\n  pascal: string;\n  token: string;\n}\n\n/**\n * A cached map of all token data for fast lookups.\n */\nlet tokenData: {\n  lookupByHuman: Map<string, TokenTriple>;\n  lookupByPascal: Map<string, TokenTriple>;\n  lookupByToken: Map<string, TokenTriple>;\n} | null = null;\n\n/**\n * Loads and caches the token mapping data from the JSON file.\n * This function is called automatically on the first lookup.\n */\nfunction loadTokenData(): void {\n  if (tokenData) {\n    return;\n  }\n\n  try {\n    let tokenMap: TokenTriple[] = [];\n\n    // Try multiple approaches to load the token data\n    let tokenMapLoaded = false;\n\n    // Approach 1: Try direct require (works in some bundled environments)\n    try {\n      tokenMap = require(\"./data/km.tokens.mapping.json\");\n      tokenMapLoaded = true;\n    } catch {\n      // Approach 2: Try file system reading with different possible paths\n      const fs = require(\"fs\");\n      const path = require(\"path\");\n\n      // Safe fs check\n      if (typeof fs.readFileSync === \"function\") {\n        const possiblePaths = [\n          path.resolve(__dirname, \"./data/km.tokens.mapping.json\"), // dist version\n          path.resolve(__dirname, \"./tokens/data/km.tokens.mapping.json\"), // bundle version\n          path.resolve(__dirname, \"../tokens/data/km.tokens.mapping.json\"), // alternative bundle path\n        ];\n\n        for (const tokenMapPath of possiblePaths) {\n          try {\n            const existsSync =\n              typeof fs.existsSync === \"function\" ? fs.existsSync : () => false;\n            if (existsSync(tokenMapPath)) {\n              tokenMap = JSON.parse(fs.readFileSync(tokenMapPath, \"utf8\"));\n              tokenMapLoaded = true;\n              break;\n            }\n          } catch {\n            // Continue to next path\n          }\n        }\n      }\n\n      // Approach 3: Use embedded data (for bundled versions)\n      if (!tokenMapLoaded) {\n        try {\n          tokenMap = getEmbeddedTokenData();\n          tokenMapLoaded = true;\n        } catch {\n          throw new Error(\"Could not locate token mapping data file\");\n        }\n      }\n    }\n\n    const lookupByHuman = new Map<string, TokenTriple>();\n    const lookupByPascal = new Map<string, TokenTriple>();\n    const lookupByToken = new Map<string, TokenTriple>();\n\n    for (const entry of tokenMap) {\n      lookupByHuman.set(entry.human, entry);\n      lookupByPascal.set(entry.pascal, entry);\n      lookupByToken.set(entry.token, entry);\n    }\n\n    tokenData = { lookupByHuman, lookupByPascal, lookupByToken };\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.warn(\"[km.token.lookup] Failed to load token data:\", errorMessage);\n    // Create empty maps as fallback\n    tokenData = {\n      lookupByHuman: new Map(),\n      lookupByPascal: new Map(),\n      lookupByToken: new Map(),\n    };\n  }\n}\n\n/**\n * Returns embedded token data for bundled versions.\n * This function will be replaced during the bundle process.\n */\nfunction getEmbeddedTokenData(): TokenTriple[] {\n  // This is a placeholder that will be replaced during bundling\n  // If this runs, it means the bundle process didn't replace it\n  throw new Error(\n    \"Token data not embedded - this should not happen in bundled versions\",\n  );\n}\n\ntype ReturnKey = \"human\" | \"pascal\" | \"token\";\n\n/**\n * Looks up a Keyboard Maestro token by any of its forms (human-readable, PascalCase, or raw token).\n *\n * @param query The token string to look up.\n * @param returnKey Optional. If specified, returns only the value for that key (e.g., 'human', 'pascal', 'token').\n * @returns If `returnKey` is specified, a string. Otherwise, an object containing the other two forms of the token.\n * @throws An error if the token is not found.\n *\n * @example\n * // Get the full object\n * lookupKMToken('%RandomUUID%'); // → { human: 'A Random Unique ID', pascal: 'ARandomUniqueID' }\n *\n * @example\n * // Get a specific value\n * lookupKMToken('Linefeed (\\\\n)', 'token'); // → '%LineFeed%'\n *\n * @example\n * // Get a specific value\n * lookupKMToken('AddressBookEmail', 'human'); // → 'AddressBook Email'\n */\nexport function lookupKMToken(query: string, returnKey: ReturnKey): string;\nexport function lookupKMToken(\n  query: string,\n): Omit<TokenTriple, \"human\" | \"pascal\" | \"token\">;\nexport function lookupKMToken(\n  query: string,\n  returnKey?: ReturnKey,\n): string | Omit<TokenTriple, \"human\" | \"pascal\" | \"token\"> {\n  loadTokenData();\n  const { lookupByHuman, lookupByPascal, lookupByToken } = tokenData!;\n\n  const found =\n    lookupByHuman.get(query) ??\n    lookupByPascal.get(query) ??\n    lookupByToken.get(query);\n\n  if (!found) {\n    throw new Error(`Unknown Keyboard Maestro token: \"${query}\"`);\n  }\n\n  if (returnKey) {\n    return found[returnKey];\n  }\n\n  const result: Partial<TokenTriple> = { ...found };\n  if (query === found.human) delete result.human;\n  if (query === found.pascal) delete result.pascal;\n  if (query === found.token) delete result.token;\n\n  return result;\n}\n","//FILE: src/queries/kmjs.query.getMousePosition.ts\n\n/**\n * @file kmjs.query.getMousePosition.ts\n * @module kmjs.query.getMousePosition\n * @description Returns the current mouse position using a virtual macro.\n *\n * This function executes a virtual macro that returns the value of the\n * Keyboard Maestro %CurrentMouse% token, abstracting away all boilerplate.\n * Supports both string format (default Keyboard Maestro behavior) and array format.\n *\n * @example\n * import { getMousePosition } from 'kmjs';\n *\n * // Default string format\n * const pos = getMousePosition(); // \"123,456\"\n *\n * // Array format for more structured coordinate access\n * const [x, y] = getMousePosition(true); // [123, 456]\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\nimport chalk from \"chalk\";\n\n// CLI entry point\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n\n/**\n * Returns the current mouse position using a virtual macro.\n *\n * This function executes a virtual macro that returns the value of the\n * Keyboard Maestro %CurrentMouse% token, abstracting away all boilerplate.\n *\n * @param asArray - If true, returns coordinates as [x, y] array. If false or undefined, returns as \"x,y\" string (default Keyboard Maestro behavior).\n * @returns The current mouse position as reported by Keyboard Maestro. String format: \"123,456\", Array format: [123, 456].\n * @throws {Error} If the mouse position cannot be retrieved or is invalid.\n *\n * @example\n * // Default string format\n * const position = getMousePosition(); // \"123,456\"\n *\n * @example\n * // Array format for easier coordinate access\n * const [x, y] = getMousePosition(true); // [123, 456]\n */\nexport function getMousePosition(): string;\nexport function getMousePosition(asArray: true): [number, number];\nexport function getMousePosition(asArray: false): string;\nexport function getMousePosition(asArray?: boolean): string | [number, number] {\n  try {\n    console.log(\n      chalk.gray(\"[getMousePosition] Querying current mouse position...\"),\n    );\n\n    // The %CurrentMouse% token returns the current mouse position as \"x,y\"\n    // We use runVirtualMacro with captureReturnValue=true to get the result\n    const result = runVirtualMacro(\n      [],\n      \"getMousePosition\",\n      KM_TOKENS.CurrentMouseLocation,\n      true,\n    );\n\n    if (!result || typeof result !== \"string\") {\n      throw new Error(\"No result returned from Keyboard Maestro\");\n    }\n\n    // Validate the format is \"x,y\" and both are valid numbers\n    const trimmedResult = result.trim();\n    if (!trimmedResult) {\n      throw new Error(\"Empty result returned from Keyboard Maestro\");\n    }\n\n    const parts = trimmedResult.split(\",\");\n    if (parts.length !== 2) {\n      throw new Error(\n        `Invalid mouse position format: expected \"x,y\", got \"${trimmedResult}\"`,\n      );\n    }\n\n    const [xStr, yStr] = parts;\n    const x = parseInt(xStr.trim(), 10);\n    const y = parseInt(yStr.trim(), 10);\n\n    if (isNaN(x)) {\n      throw new Error(\n        `Invalid X coordinate: \"${xStr.trim()}\" is not a valid number`,\n      );\n    }\n\n    if (isNaN(y)) {\n      throw new Error(\n        `Invalid Y coordinate: \"${yStr.trim()}\" is not a valid number`,\n      );\n    }\n\n    console.log(\n      chalk.green(\n        `[getMousePosition] Successfully retrieved position: ${trimmedResult} (X: ${x}, Y: ${y})`,\n      ),\n    );\n\n    // Return as array if requested, otherwise return as string (default KM behavior)\n    return asArray ? [x, y] : trimmedResult;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    console.error(chalk.red(\"[getMousePosition] Error:\"), errorMessage);\n    throw new Error(`Failed to get mouse position: ${errorMessage}`);\n  }\n}\n","//FILE: src/queries/kmjs.query.getFrontAppInfo.ts\n\n/**\n * @file kmjs.query.getFrontAppInfo.ts\n * @module kmjs.query\n * @description Provides a function to query information about the frontmost application.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens\";\n\n/**\n * Interface describing the frontmost application.\n */\nexport interface FrontAppInfo {\n  name: string;\n  bundleId: string;\n  path: string;\n}\n\n/**\n * Queries Keyboard Maestro for details about the frontmost application.\n *\n * This function retrieves the name, bundle identifier, and file path of the\n * application that is currently active.\n *\n * @returns An object containing the name, bundleId, and path of the front app.\n * @throws {Error} If the application info cannot be retrieved.\n *\n * @example\n * const appInfo = getFrontAppInfo();\n * // -> { name: \"Finder\", bundleId: \"com.apple.finder\", path: \"/System/Library/CoreServices/Finder.app\" }\n */\nexport function getFrontAppInfo(): FrontAppInfo {\n  try {\n    // We can retrieve multiple tokens at once by separating them with a unique delimiter.\n    const delimiter = \"::KMJS_DELIMITER::\";\n    const tokenString = [\n      KM_TOKENS.FrontApplicationName,\n      KM_TOKENS.FrontApplicationBundleID,\n      KM_TOKENS.FrontApplicationPath,\n    ].join(delimiter);\n\n    const result = runVirtualMacro(\n      [],\n      \"query:getFrontAppInfo\",\n      tokenString,\n      true,\n    ) as string;\n\n    const [name, bundleId, path] = result.split(delimiter);\n\n    if (!name || !bundleId || !path) {\n      throw new Error(`Incomplete app info returned from KM: \"${result}\"`);\n    }\n\n    return { name, bundleId, path };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get front app info: ${message}`);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getFrontWindowInfo.ts\n\n/**\n * @file kmjs.query.getFrontWindowInfo.ts\n * @module kmjs.query\n * @description Provides a function to query information about the frontmost window.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens\";\n\n/**\n * Represents the frame of a window.\n */\nexport interface WindowFrame {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n/**\n * Represents information about the frontmost window.\n */\nexport interface FrontWindowInfo {\n  name: string;\n  frame: WindowFrame;\n}\n\n/**\n * Queries Keyboard Maestro for details about the frontmost window of the active application.\n *\n * @returns An object containing the window's name and its frame (x, y, width, height).\n * @throws {Error} If the window info cannot be retrieved or is in an invalid format.\n *\n * @example\n * const windowInfo = getFrontWindowInfo();\n * // -> { name: \"my-file.txt - VSCode\", frame: { x: 100, y: 50, width: 1280, height: 800 } }\n */\nexport function getFrontWindowInfo(): FrontWindowInfo {\n  try {\n    const delimiter = \"::KMJS_DELIMITER::\";\n    const tokenString = [\n      KM_TOKENS.FrontWindowName,\n      KM_TOKENS.FrontWindowFrame,\n    ].join(delimiter);\n\n    const result = runVirtualMacro(\n      [],\n      \"query:getFrontWindowInfo\",\n      tokenString,\n      true,\n    ) as string;\n\n    const [name, frameString] = result.split(delimiter);\n    const frameParts = frameString.split(\",\").map(Number);\n\n    if (!name || frameParts.length !== 4 || frameParts.some(isNaN)) {\n      throw new Error(`Invalid window info returned from KM: \"${result}\"`);\n    }\n\n    const [x, y, width, height] = frameParts;\n    return { name, frame: { x, y, width, height } };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get front window info: ${message}`);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","// FILE: src/queries/kmjs.query.getFinderSelections.ts\n\n/**\n * @file kmjs.query.getFinderSelections.ts\n * @module kmjs.query\n * @description Provides functions to query the current selection in Finder.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens\";\n\n/**\n * Queries Keyboard Maestro for the paths of all currently selected items in Finder.\n *\n * @returns An array of strings, where each string is the full path to a selected item.\n *          Returns an empty array if no items are selected.\n * @throws {Error} If the query fails.\n *\n * @example\n * const selectedFiles = getFinderSelections();\n * // -> [\"/Users/USERNAME/Documents/file1.txt\", \"/Users/USERNAME/Documents/image.png\"]\n */\nexport function getFinderSelections(): string[] {\n  try {\n    const result = runVirtualMacro(\n      [],\n      \"query:getFinderSelections\",\n      KM_TOKENS.ThePathsOfTheSelectedFinderItems,\n      true,\n    ) as string;\n\n    // If the result is empty, it means no files are selected.\n    // Split on newline and filter out any empty strings that might result.\n    return result ? result.split(\"\\n\").filter(Boolean) : [];\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get Finder selections: ${message}`);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getSystemClipboard.ts\n\n/**\n * @file kmjs.query.getSystemClipboard.ts\n * @module kmjs.query\n * @description Provides a function to query the system clipboard content.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens\";\n\n/**\n * Queries Keyboard Maestro for the current text content of the system clipboard.\n * Note: This retrieves plain text only. For other data types, see `getSystemClipboardFlavors`.\n *\n * @returns The text content of the system clipboard.\n * @throws {Error} If the query fails.\n *\n * @example\n * const clipboardText = getSystemClipboard();\n * // -> \"This is the text that was on my clipboard.\"\n */\nexport function getSystemClipboard(): string {\n  try {\n    const result = runVirtualMacro(\n      [],\n      \"query:getSystemClipboard\",\n      KM_TOKENS.SystemClipboard,\n      true,\n    ) as string;\n\n    return result;\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get system clipboard: ${message}`);\n  }\n}\n\n// CLI entry point\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getSystemVolume.ts\n\n/**\n * @file kmjs.query.getSystemVolume.ts\n * @module kmjs.query\n * @description Provides a function to query the current system audio volume.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Queries Keyboard Maestro for the current system volume level.\n *\n * The `%SystemVolume%` token returns the volume as a number from 0 to 100.\n *\n * @returns The current system volume as a number (0-100).\n * @throws {Error} If the volume level cannot be retrieved or parsed.\n *\n * @example\n * const volume = getSystemVolume();\n * // -> 75\n */\nexport function getSystemVolume(): number {\n  try {\n    // Execute a virtual macro to return the value of the SystemVolume token.\n    const result = runVirtualMacro(\n      [],\n      \"query:getSystemVolume\",\n      KM_TOKENS.SystemVolume,\n      true, // Capture the return value\n    ) as string;\n\n    // Parse the result string into an integer.\n    const volume = parseInt(result, 10);\n\n    // Validate that the result is a valid number.\n    if (isNaN(volume)) {\n      throw new Error(`Invalid volume level returned: \"${result}\"`);\n    }\n\n    return volume;\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get system volume: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getScreenFrames.ts\n\n/**\n * @file kmjs.query.getScreenFrames.ts\n * @module kmjs.query\n * @description Provides a function to query the frames of all connected screens.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Interface representing the frame (position and size) of a screen or window.\n * Coordinates are relative to the top-left corner of the main screen.\n */\nexport interface ScreenFrame {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n}\n\n/**\n * Queries Keyboard Maestro for the frames of all connected screens.\n *\n * The `%AllScreenFrames%` token returns a multi-line string, with each line\n * containing the comma-separated frame of a screen (`x,y,width,height`).\n *\n * @returns An array of ScreenFrame objects, one for each connected display.\n * @throws {Error} If screen frames cannot be retrieved or parsed.\n *\n * @example\n * const screens = getScreenFrames();\n * // -> [{ x: 0, y: 0, width: 1920, height: 1080 }, { x: 1920, y: 0, width: 1440, height: 900 }]\n */\nexport function getScreenFrames(): ScreenFrame[] {\n  try {\n    // Execute a virtual macro to return the value of the AllScreenFrames token.\n    const result = runVirtualMacro(\n      [],\n      \"query:getScreenFrames\",\n      KM_TOKENS.AllScreenFrames,\n      true, // Capture the return value\n    ) as string;\n\n    // If the result is empty, return an empty array.\n    if (!result) {\n      return [];\n    }\n\n    // Split the multi-line string into individual lines and parse each one.\n    return result\n      .split(\"\\n\")\n      .filter(Boolean) // Remove any empty lines\n      .map((line, index) => {\n        const parts = line.split(\",\").map(Number);\n        if (parts.length !== 4 || parts.some(isNaN)) {\n          throw new Error(\n            `Invalid screen frame format on line ${index + 1}: \"${line}\"`,\n          );\n        }\n        const [x, y, width, height] = parts;\n        return { x, y, width, height };\n      });\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get screen frames: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getRunningApps.ts\n\n/**\n * @file kmjs.query.getRunningApps.ts\n * @module kmjs.query\n * @description Provides a function to get a list of all running applications.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Queries Keyboard Maestro for a list of all running applications.\n *\n * This includes both foreground applications (with a UI) and background\n * applications (agents, daemons).\n *\n * @returns An array of strings, where each string is the name of a running application.\n * @throws {Error} If the list of applications cannot be retrieved.\n *\n * @example\n * const apps = getRunningApps();\n * // -> [\"Finder\", \"Safari\", \"SystemUIServer\", \"Dropbox\", ...]\n */\nexport function getRunningApps(): string[] {\n  try {\n    // The token returns a multi-line string of application names.\n    const result = runVirtualMacro(\n      [],\n      \"query:getRunningApps\",\n      KM_TOKENS.AllRunningApplicationNames,\n      true, // Capture the return value\n    ) as string;\n\n    // If the result is empty, return an empty array.\n    if (!result) {\n      return [];\n    }\n\n    // Split the multi-line string into an array of names.\n    return result.split(\"\\n\").filter(Boolean);\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get running applications: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getNetworkInfo.ts\n\n/**\n * @file kmjs.query.getNetworkInfo.ts\n * @module kmjs.query\n * @description Provides a function to query various network details.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Interface for structured network information.\n */\nexport interface NetworkInfo {\n  location: string;\n  wirelessNames: string[];\n  ipAddress: string;\n}\n\n/**\n * Queries Keyboard Maestro for network details, including the current network\n * location, connected Wi-Fi network names, and the primary IP address.\n *\n * @returns An object containing the network location, wireless network names, and IP address.\n * @throws {Error} If the network information cannot be retrieved.\n *\n * @example\n * const netInfo = getNetworkInfo();\n * // -> { location: \"Automatic\", wirelessNames: [\"MyWiFi\"], ipAddress: \"192.168.1.100\" }\n */\nexport function getNetworkInfo(): NetworkInfo {\n  try {\n    // Combine multiple tokens into a single query for efficiency.\n    const delimiter = \"::KMJS_DELIMITER::\";\n    const tokenString = [\n      KM_TOKENS.NetworkLocation,\n      KM_TOKENS.WirelessNetworkNames,\n      KM_TOKENS.MachineIPAddress,\n    ].join(delimiter);\n\n    const result = runVirtualMacro(\n      [],\n      \"query:getNetworkInfo\",\n      tokenString,\n      true, // Capture the return value\n    ) as string;\n\n    const [location, wireless, ipAddress] = result.split(delimiter);\n\n    if (\n      location === undefined ||\n      wireless === undefined ||\n      ipAddress === undefined\n    ) {\n      throw new Error(`Incomplete network info returned from KM: \"${result}\"`);\n    }\n\n    return {\n      location,\n      // Wireless network names can also be multi-line if connected to multiple.\n      wirelessNames: wireless ? wireless.split(\"\\n\").filter(Boolean) : [],\n      ipAddress,\n    };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get network info: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getUserInfo.ts\n\n/**\n * @file kmjs.query.getUserInfo.ts\n * @module kmjs.query\n * @description Provides a function to query details about the current macOS user.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Interface for structured user information.\n */\nexport interface UserInfo {\n  name: string;\n  loginId: string;\n  home: string;\n}\n\n/**\n * Queries Keyboard Maestro for details about the current macOS user.\n *\n * Retrieves the user's full name, short login ID, and home directory path.\n *\n * @returns An object containing the user's name, loginId, and home directory.\n * @throws {Error} If the user information cannot be retrieved.\n *\n * @example\n * const user = getUserInfo();\n * // -> { name: \"John Smith\", loginId: \"johnsmith\", home: \"/Users/johnsmith\" }\n */\nexport function getUserInfo(): UserInfo {\n  try {\n    const delimiter = \"::KMJS_DELIMITER::\";\n    const tokenString = [\n      KM_TOKENS.UserName,\n      KM_TOKENS.UserLoginID,\n      KM_TOKENS.UserHomeDirectory,\n    ].join(delimiter);\n\n    const result = runVirtualMacro(\n      [],\n      \"query:getUserInfo\",\n      tokenString,\n      true,\n    ) as string;\n\n    const [name, loginId, home] = result.split(delimiter);\n\n    if (!name || !loginId || !home) {\n      throw new Error(`Incomplete user info returned from KM: \"${result}\"`);\n    }\n\n    return { name, loginId, home };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get user info: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getSystemVersion.ts\n\n/**\n * @file kmjs.query.getSystemVersion.ts\n * @module kmjs.query\n * @description Provides a function to query the current macOS version.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Interface for structured macOS version information.\n */\nexport interface SystemVersionInfo {\n  short: string;\n  long: string;\n}\n\n/**\n * Queries Keyboard Maestro for the current version of macOS.\n *\n * Retrieves both the short version (e.g., \"14.1.1\") and the long version,\n * which may include the build number.\n *\n * @returns An object containing the short and long version strings.\n * @throws {Error} If the version information cannot be retrieved.\n *\n * @example\n * const version = getSystemVersion();\n * // -> { short: \"14.1.1\", long: \"Version 14.1.1 (Build 23B81)\" }\n */\nexport function getSystemVersion(): SystemVersionInfo {\n  try {\n    const delimiter = \"::KMJS_DELIMITER::\";\n    const tokenString = [\n      KM_TOKENS.SystemVersion,\n      KM_TOKENS.SystemLongVersion,\n    ].join(delimiter);\n\n    const result = runVirtualMacro(\n      [],\n      \"query:getSystemVersion\",\n      tokenString,\n      true,\n    ) as string;\n\n    const [short, long] = result.split(delimiter);\n\n    if (!short || !long) {\n      throw new Error(\n        `Incomplete system version returned from KM: \"${result}\"`,\n      );\n    }\n\n    return { short, long };\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(`Failed to get system version: ${message}`);\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getPastClipboard.ts\n\n/**\n * @file kmjs.query.getPastClipboard.ts\n * @module kmjs.query\n * @description Provides a function to query the clipboard history.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\n\n/**\n * Queries Keyboard Maestro for a specific entry from the clipboard history.\n *\n * This function uses a dynamically constructed token, `%PastClipboard%<index>%`, to\n * retrieve an item from the clipboard history.\n *\n * Note: Index `0` is the current system clipboard. Index `1` is the previous item.\n *\n * @param index - The history index to retrieve (0-based). Must be a non-negative integer.\n * @returns The text content of the specified clipboard history entry.\n * @throws {Error} If the index is invalid or the query fails.\n *\n * @example\n * // Get the most recent clipboard item (same as getSystemClipboard())\n * const current = getPastClipboard(0);\n *\n * @example\n * // Get the item before the current one\n * const previous = getPastClipboard(1);\n */\nexport function getPastClipboard(index: number): string {\n  // Validate that the index is a non-negative integer.\n  if (!Number.isInteger(index) || index < 0) {\n    throw new Error(\n      `Clipboard history index must be a non-negative integer, but received: ${index}`,\n    );\n  }\n\n  try {\n    // The %PastClipboard% token is dynamic, so we construct it manually.\n    const tokenString = `%PastClipboard%${index}%`;\n\n    const result = runVirtualMacro(\n      [],\n      `query:getPastClipboard:${index}`,\n      tokenString,\n      true,\n    ) as string;\n\n    return result;\n  } catch (error) {\n    const message = error instanceof Error ? error.message : String(error);\n    throw new Error(\n      `Failed to get past clipboard at index ${index}: ${message}`,\n    );\n  }\n}\n\n// CLI entry point for direct execution via kmjs.query.cli.ts\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/kmjs.query.getScreenResolution.ts\n\n/**\n * @file kmjs.query.getScreenResolution.ts\n * @module kmjs.query\n * @description Returns the resolution of a specified screen.\n *\n * This module provides a function to query the resolution of a specific screen or all screens\n * via Keyboard Maestro tokens. It parses the result into a strongly-typed object or array of objects.\n *\n * The function is robust to token errors and will throw if the result is not in the expected format.\n *\n * Inline documentation is provided to assist new contributors and LLM agents in understanding the\n * control flow and the purpose of each variable and function.\n */\nimport { runVirtualMacro } from \"../kmjs.runVirtualMacro\";\nimport { KM_TOKENS } from \"../tokens/km.tokens\";\n\n/**\n * Represents a single screen resolution record as returned by Keyboard Maestro.\n *\n * @property nominalWidth - The logical (scaled) width of the screen in points.\n * @property nominalHeight - The logical (scaled) height of the screen in points.\n * @property pixelWidth - The physical pixel width of the screen.\n * @property pixelHeight - The physical pixel height of the screen.\n * @property refreshRate - The refresh rate of the screen in Hz.\n */\nexport interface ScreenResolutionRecord {\n  /** Nominal (scaled) width in points. */\n  nominalWidth: number;\n  /** Nominal (scaled) height in points. */\n  nominalHeight: number;\n  /** Physical pixel width. */\n  pixelWidth: number;\n  /** Physical pixel height. */\n  pixelHeight: number;\n  /** Refresh rate in Hz. */\n  refreshRate: number;\n}\n\n/**\n * Queries Keyboard Maestro for the resolution of a given screen or all screens.\n *\n * @param screenSpecifier - The screen to query. Accepts \"Main\", \"Second\", a numeric index, \"Mouse\", or \"All\".\n *   Defaults to \"Main\". If \"All\" is provided, returns an array of records for all screens.\n * @returns A single {@link ScreenResolutionRecord} for a specific screen, or an array of records for all screens.\n * @throws {Error} If the result cannot be parsed into the expected format.\n *\n * @example\n * // Get resolution for the main display\n * const main = getScreenResolution();\n * // → { nominalWidth: 1512, nominalHeight: 982, pixelWidth: 2880, pixelHeight: 1800, refreshRate: 60 }\n *\n * @example\n * // Get resolutions for all displays\n * const all = getScreenResolution(\"All\");\n * // → [ { ... }, { ... } ]\n */\nexport function getScreenResolution(\n  screenSpecifier: string = \"Main\",\n): ScreenResolutionRecord | ScreenResolutionRecord[] {\n  // Construct the Keyboard Maestro token for the requested screen.\n  // Example: \"%ScreenResolution%Main%\" or \"%ScreenResolution%All%\"\n  const token = `%ScreenResolution%${screenSpecifier}%`;\n\n  // Execute the virtual macro to retrieve the raw result string.\n  // The result is expected to be a comma-separated string for a single screen,\n  // or a newline-separated list of comma-separated strings for all screens.\n  const raw = runVirtualMacro(\n    [],\n    \"query:getScreenResolution\",\n    token,\n    true,\n  ) as string;\n\n  /**\n   * Parses a single line of screen resolution data into a ScreenResolutionRecord.\n   *\n   * @param line - A comma-separated string representing one screen's resolution.\n   * @returns A ScreenResolutionRecord object.\n   * @throws {Error} If the line does not contain exactly 5 numeric values.\n   */\n  const parse = (line: string): ScreenResolutionRecord => {\n    // Split the line into its numeric components.\n    const parts = line.split(\",\").map(Number);\n    // Validate the format: must have 5 numbers, all valid.\n    if (parts.length !== 5 || parts.some(isNaN)) {\n      throw new Error(`Invalid ScreenResolution format: “${line}”`);\n    }\n    // Destructure the values for clarity.\n    const [nominalWidth, nominalHeight, pixelWidth, pixelHeight, refreshRate] =\n      parts;\n    return {\n      nominalWidth,\n      nominalHeight,\n      pixelWidth,\n      pixelHeight,\n      refreshRate,\n    };\n  };\n\n  // If querying all screens, split the result by newlines and parse each line.\n  if (screenSpecifier.toLowerCase() === \"all\") {\n    // Each line represents one screen's resolution.\n    return raw\n      .split(/\\n|\\r|\\r\\n/)\n      .filter(Boolean)\n      .map(parse);\n  }\n  // Otherwise, parse the single result line.\n  return parse(raw);\n}\n\n// CLI entry point for direct execution\nif (require.main === module) {\n  require(\"./kmjs.query.cli\");\n}\n","//FILE: src/queries/index.ts\n\n/**\n * @file src/queries/index.ts\n * @module kmjs.query\n * @description Barrel file for all query helpers.\n *\n * ## QUICK START\n * ```ts\n * import { runQuery } from 'kmjs';\n * const { x, y } = runQuery.getMousePosition(true);\n * const { musicPlayerState } = runQuery.getCurrentTrackInfo();\n * ```\n *\n * ## Available Queries\n * | Key | What it returns |\n * | --- | --------------- |\n * | getMousePosition | Cursor coordinates. `string` (\"x,y\") or `[number, number]`. |\n * | getFrontAppInfo | Active app’s `{ name, bundleId, path }`. |\n * | getFrontWindowInfo | Frontmost window title + frame. |\n * | getFinderSelections | Array of selected Finder items’ full paths. |\n * | getSystemClipboard | Plain-text system clipboard contents. |\n * | getPastClipboard | Historical clipboard entry (index ≥ 0). |\n * | getSystemVolume | Output volume `0‒100`. |\n * | getScreenFrames | Frames of all connected displays. |\n * | getScreenResolution | Resolution tuple(s) for given screen(s). |\n * | getRunningApps | Names of every running process. |\n * | getNetworkInfo | Location, SSID(s), IP address. |\n * | getUserInfo | macOS user `{ name, loginId, home }`. |\n * | getSystemVersion | macOS short + long versions. |\n *\n * All query helpers are pure (side-effect-free) and synchronous so\n * they are safe to call inside render loops or tight computational pipelines.\n */\n\nimport { getMousePosition } from \"./kmjs.query.getMousePosition\";\nimport { getFrontAppInfo } from \"./kmjs.query.getFrontAppInfo\";\nimport { getFrontWindowInfo } from \"./kmjs.query.getFrontWindowInfo\";\nimport { getFinderSelections } from \"./kmjs.query.getFinderSelections\";\nimport { getSystemClipboard } from \"./kmjs.query.getSystemClipboard\";\nimport { getSystemVolume } from \"./kmjs.query.getSystemVolume\";\nimport { getScreenFrames } from \"./kmjs.query.getScreenFrames\";\nimport { getRunningApps } from \"./kmjs.query.getRunningApps\";\nimport { getNetworkInfo } from \"./kmjs.query.getNetworkInfo\";\nimport { getUserInfo } from \"./kmjs.query.getUserInfo\";\nimport { getSystemVersion } from \"./kmjs.query.getSystemVersion\";\nimport { getPastClipboard } from \"./kmjs.query.getPastClipboard\";\nimport { getScreenResolution } from \"./kmjs.query.getScreenResolution\";\n\n// Centralized object for all query functions\nconst queryFns = {\n  getMousePosition,\n  getFrontAppInfo,\n  getFrontWindowInfo,\n  getFinderSelections,\n  getSystemClipboard,\n  getSystemVolume,\n  getScreenFrames,\n  getRunningApps,\n  getNetworkInfo,\n  getUserInfo,\n  getSystemVersion,\n  getPastClipboard,\n  getScreenResolution,\n};\n\n/**\n * A collection of query functions to retrieve live state from Keyboard Maestro.\n * These are synchronous, read-only operations.\n *\n * @example\n * // Using the query object (string format)\n * import { runQuery } from 'kmjs';\n * const position = runQuery.getMousePosition(); // \"1234,567\"\n *\n * @example\n * // Using the query object (array format)\n * import { runQuery } from 'kmjs';\n * const [x, y] = runQuery.getMousePosition(true); // [1234, 567]\n *\n * @example\n * // Using individual functions\n * import { getMousePosition } from 'kmjs';\n * const position = getMousePosition(); // \"1234,567\"\n * const [x, y] = getMousePosition(true); // [1234, 567]\n */\nexport const runQuery = { ...queryFns };\nexport const queries = { ...queryFns } as const;\n\n// Export individual functions for direct import\n/**\n * Individual query helpers for direct import and tree-shaking.\n * Each function is pure and synchronous.\n */\nexport {\n  getMousePosition,\n  getFrontAppInfo,\n  getFrontWindowInfo,\n  getFinderSelections,\n  getSystemClipboard,\n  getSystemVolume,\n  getScreenFrames,\n  getRunningApps,\n  getNetworkInfo,\n  getUserInfo,\n  getSystemVersion,\n  getPastClipboard,\n  getScreenResolution,\n};\n","//FILE: src/virtual_actions/kmjs.virtualAction.activate.ts\n\nimport chalk from \"chalk\";\nimport { formatXmlAction, escapeForXml, kmKeyOrder } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport type { SpecificAppOptions } from \"./types/types.ui\";\n\n/**\n * What to do if the app is already frontmost.\n */\nexport type AlreadyActivatedActionType =\n  | \"Normal\" // leave it at front\n  | \"SwitchToLast\" // switch to last app\n  | \"BringAllWindows\" // bring all app windows forward\n  | \"Reopen\" // reopen initial windows\n  | \"Hide\" // hide app\n  | \"HideOthers\" // hide other apps\n  | \"Quit\"; // quit app\n\n/**\n * Options for ActivateApplication virtual action.\n */\nexport interface ActivateOptions {\n  /** Activate the frontmost app or a specific one. */\n  target?: \"Front\" | \"Specific\";\n  /** If targeting a specific app, supply these selectors. */\n  specific?: SpecificAppOptions;\n  /** Activate all windows? */\n  allWindows?: boolean;\n  /** Reopen initial windows? */\n  reopenWindows?: boolean;\n  /** Behavior if already frontmost. */\n  alreadyActivatedAction?: AlreadyActivatedActionType;\n  /** Whether timeout aborts the macro. */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction for ActivateApplication.\n */\nexport function createVirtualActivate(\n  opts: ActivateOptions = {},\n): VirtualAction {\n  const {\n    target = \"Front\",\n    specific = {},\n    allWindows = false,\n    reopenWindows = false,\n    alreadyActivatedAction = \"Normal\",\n    timeoutAborts = true,\n  } = opts;\n\n  console.log(\n    chalk.cyan(\"[VirtualAction] ActivateApplication:\"),\n    chalk.yellowBright(JSON.stringify(opts)),\n  );\n\n  // Build the <Application> dict (or empty)\n  let applicationXml: string;\n  if (target === \"Specific\") {\n    const { name, bundleIdentifier, path, match, newFile } = specific;\n    const appData: Record<string, string> = {};\n    if (bundleIdentifier) appData.BundleIdentifier = bundleIdentifier;\n    if (match) appData.Match = match;\n    if (name) appData.Name = name;\n    if (newFile) appData.NewFile = newFile;\n    if (path) appData.Path = path;\n\n    const orderedKeys = kmKeyOrder(Object.keys(appData), \"application\");\n    const lines: string[] = [\"<dict>\"];\n    for (const key of orderedKeys) {\n      lines.push(`<key>${key}</key>`);\n      lines.push(`<string>${escapeForXml(appData[key])}</string>`);\n    }\n    lines.push(\"</dict>\");\n    applicationXml = lines.join(\"\\n\");\n  } else {\n    applicationXml = \"<dict/>\";\n  }\n\n  /**\n   * Canonical KM order (including ActionUID — stripped later in test normalisation):\n   *  ActionUID\n   *  AllWindows\n   *  AlreadyActivatedActionType\n   *  Application\n   *  MacroActionType\n   *  ReopenWindows\n   *  TimeOutAbortsMacro\n   */\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>AllWindows</key>\",\n    allWindows ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t\\t<key>AlreadyActivatedActionType</key>\",\n    `\\t\\t<string>${alreadyActivatedAction}</string>`,\n    \"\\t\\t<key>Application</key>\",\n    ...applicationXml.split(\"\\n\").map((l) => \"\\t\\t\" + l),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>ActivateApplication</string>\",\n    \"\\t\\t<key>ReopenWindows</key>\",\n    reopenWindows ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    timeoutAborts ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.cancel.ts\n\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport type { CancelType } from \"./types/types.system\";\n\n/**\n * Options for the Cancel action.\n * - variant: Which cancel operation to perform (required)\n * - instance: For 'CancelSpecificMacro', the macro name or UUID to cancel (required for that variant)\n *\n * @example\n * { variant: \"CancelAllMacros\" }\n * { variant: \"CancelSpecificMacro\", instance: \"MyMacroNameOrUUID\" }\n */\nexport interface CancelActionOptions {\n  /** Which cancel operation to perform. */\n  cancelType: CancelType;\n  /** For 'CancelSpecificMacro', the macro name or UUID to cancel. */\n  instance?: string;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Cancel action.\n * Supports all cancel variants, including canceling all macros, this macro, a specific macro, and loop control.\n *\n * @param opts - CancelActionOptions specifying the variant and (if needed) the macro instance to cancel.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualCancel({ variant: \"CancelAllMacros\" })\n * createVirtualCancel({ variant: \"CancelSpecificMacro\", instance: \"MyMacroNameOrUUID\" })\n */\nexport function createVirtualCancel(opts: CancelActionOptions): VirtualAction {\n  const { cancelType, instance } = opts;\n\n  // Validate required field for CancelSpecificMacro\n  if (cancelType === \"CancelSpecificMacro\" && !instance) {\n    throw new Error(\n      \"CancelSpecificMacro requires an 'instance' (macro name or UUID) to cancel.\",\n    );\n  }\n\n  // Use generateActionUIDXml() directly, as in other actions, with no extra string manipulation\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    `\\t\\t<string>${cancelType}</string>`,\n    ...generateActionUIDXml(),\n    ...(cancelType === \"CancelSpecificMacro\"\n      ? [\n          \"\\t\\t<key>Instance</key>\",\n          `\\t\\t<string>${escapeForXml(instance ?? \"\")}</string>`,\n        ]\n      : []),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Cancel</string>\",\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/utils/template.xml.ui.ts\n\nimport type { ScreenArea } from \"../virtual_actions/types\";\n\n/**\n * Normalises a found image condition to ensure it has all required fields.\n * - Always supplies a ScreenArea (defaults to ScreenAll).\n * - Removes template-source keys that KM never serialises for conditions.\n * - Ensures DisplayMatches + Fuzz have sane values.\n * @param cond - The condition to normalise.\n * @returns Normalised condition object.\n */\nexport function normaliseFoundImage(cond: any): any {\n  if (cond.ConditionType !== \"ScreenImage\") return cond;\n\n  // 1. Always supply a ScreenArea (KM defaults to ScreenAll)\n  if (\n    !cond.ScreenArea ||\n    typeof cond.ScreenArea !== \"object\" ||\n    !(cond.ScreenArea as any).type\n  ) {\n    cond.ScreenArea = { type: \"ScreenAll\" };\n  }\n\n  // 1b. KM also serialises ImageScreenArea for Screen source;\n  // mirror ScreenArea if not explicitly provided.\n  if (cond.ImageSource === \"Screen\" && !cond.ImageScreenArea) {\n    cond.ImageScreenArea = cond.ScreenArea;\n  }\n\n  // 2. Remove template-source keys that KM never serialises for conditions\n  delete cond.ImageSelection; // never used\n  if (cond.ImageSource === \"Image\" || !cond.ImageSource) {\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n    delete cond.ImageSource; // KM omits default\n  } else if (cond.ImageSource === \"File\") {\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n  } else if (cond.ImageSource === \"NamedClipboard\") {\n    delete cond.ImagePath;\n  } else if (\n    cond.ImageSource === \"SystemClipboard\" ||\n    cond.ImageSource === \"TriggerClipboard\"\n  ) {\n    // KM does not serialize the *named* clipboard metadata for system/trigger clipboards\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n  } else if (cond.ImageSource === \"Icon\") {\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n  } else if (cond.ImageSource === \"Screen\") {\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n  }\n\n  // 3. Ensure DisplayMatches + Fuzz have sane values\n  if (cond.DisplayMatches === undefined) cond.DisplayMatches = false;\n  if (cond.Fuzz === undefined) cond.Fuzz = 0;\n\n  return cond;\n}\n\n/**\n * Renders a <dict> for ScreenArea / ImageScreenArea.\n * @param keyName  Either \"ScreenArea\" or \"ImageScreenArea\".\n * @param area     The ScreenArea definition.\n */\nexport function screenAreaToXml(keyName: string, area: ScreenArea): string {\n  switch (area.type) {\n    /* -----------------------------------------------------------\n     * 1)  Screen / Window by **index**\n     * --------------------------------------------------------- */\n    case \"ScreenIndex\":\n      return [\n        `<key>${keyName}</key>`,\n        `<dict>`,\n        `\\t<key>IndexExpression</key>`,\n        `\\t<string>${area.index}</string>`,\n        `\\t<key>ScreenAreaType</key>`,\n        `\\t<string>ScreenIndex</string>`,\n        `</dict>`,\n      ].join(\"\\n\");\n\n    case \"WindowIndex\":\n      return [\n        `<key>${keyName}</key>`,\n        `<dict>`,\n        `\\t<key>IndexExpression</key>`,\n        `\\t<string>${area.index}</string>`,\n        `\\t<key>ScreenAreaType</key>`,\n        `\\t<string>WindowIndex</string>`,\n        `</dict>`,\n      ].join(\"\\n\");\n\n    /* -----------------------------------------------------------\n     * 2)  Rectangular **Area**\n     *     Height → Left → ScreenAreaType → Top → Width\n     * --------------------------------------------------------- */\n    case \"Area\":\n      return [\n        `<key>${keyName}</key>`,\n        `<dict>`,\n        `\\t<key>HeightExpression</key>`,\n        `\\t<string>${area.height}</string>`,\n        `\\t<key>LeftExpression</key>`,\n        `\\t<string>${area.left}</string>`,\n        `\\t<key>ScreenAreaType</key>`,\n        `\\t<string>Area</string>`,\n        `\\t<key>TopExpression</key>`,\n        `\\t<string>${area.top}</string>`,\n        `\\t<key>WidthExpression</key>`,\n        `\\t<string>${area.width}</string>`,\n        `</dict>`,\n      ].join(\"\\n\");\n\n    /* -----------------------------------------------------------\n     * 3)  Window-by-name variants (same order as before)\n     * --------------------------------------------------------- */\n    case \"WindowName\":\n    case \"WindowNameContaining\":\n    case \"WindowNameMatching\":\n      return [\n        `<key>${keyName}</key>`,\n        `<dict>`,\n        `\\t<key>ScreenAreaType</key>`,\n        `\\t<string>${area.type}</string>`,\n        `\\t<key>WindowName</key>`,\n        `\\t<string>${area.name}</string>`,\n        `</dict>`,\n      ].join(\"\\n\");\n\n    /* -----------------------------------------------------------\n     * 4)  All simple, flag-only variants\n     * --------------------------------------------------------- */\n    default:\n      return [\n        `<key>${keyName}</key>`,\n        `<dict>`,\n        `\\t<key>ScreenAreaType</key>`,\n        `\\t<string>${area.type}</string>`,\n        `</dict>`,\n      ].join(\"\\n\");\n  }\n}\n","//FILE: src/utils/utils.keystroke.mapping.ts\n\n/**\n * Mac-only keyboard → AppleScript mapping helpers\n *\n * Provides:\n * - Modifier aliases and canonicalization\n * - Canonical-name normalization\n * - JavaScript `event.code` → AppleScript key-code table\n * - Modifier-combo → AppleScript modifier-mask table\n *\n * Key-code data taken from the public domain reference\n * “Complete List of AppleScript Key Codes” by Christopher Kielty (2018).\n */\n\n/* ---------------------- */\n/* Interfaces / Types\n/* ---------------------- */\n\nexport type MacModifier = \"Cmd\" | \"Shift\" | \"Option\" | \"Control\";\n\n/* ---------------------- */\n/* Functions\n/* ---------------------- */\n\n/**\n * Returns the canonical modifier name (“Cmd”, “Shift”, “Option”, “Control”),\n * or the original token if it is not recognized as a modifier.\n * @param token - Modifier or alias string.\n * @returns Canonical modifier name or original token.\n */\nexport function canonicalizeModifier(token: string): MacModifier | string {\n  return MODIFIER_ALIASES[token] ?? token;\n}\n\n/**\n * Looks up the AppleScript key code for a given JavaScript `event.code` string.\n * @param code - JavaScript event.code string (e.g. 'KeyD', 'Digit5').\n * @returns AppleScript key code (number) or undefined if not mapped.\n */\nexport function toAppleScriptKeyCode(code: string): number | undefined {\n  return JS_CODE_TO_AS_KEY_CODE[code];\n}\n\n/* ---------------------- */\n/* Mappings\n/* ---------------------- */\n\n/**\n * Acceptable modifier aliases.\n * Maps various modifier names and aliases to their canonical form (Cmd, Shift, Option, Control).\n */\nexport const MODIFIER_ALIASES: Record<string, MacModifier> = {\n  /* Command -------------------------------------------------------------- */\n  Cmd: \"Cmd\",\n  Command: \"Cmd\",\n  Meta: \"Cmd\",\n  CmdLeft: \"Cmd\",\n  CmdRight: \"Cmd\",\n  CommandLeft: \"Cmd\",\n  CommandRight: \"Cmd\",\n  MetaLeft: \"Cmd\",\n  MetaRight: \"Cmd\",\n  Win: \"Cmd\", // Windows key on Apple keyboards\n  WinLeft: \"Cmd\", // Windows key on Apple keyboards\n  WinRight: \"Cmd\", // Windows key on Apple keyboards\n  Windows: \"Cmd\", // Windows key on Apple keyboards\n  WindowsLeft: \"Cmd\", // Windows key on Apple keyboards\n  WindowsRight: \"Cmd\", // Windows key on Apple keyboards\n  /* Shift ---------------------------------------------------------------- */\n  Shift: \"Shift\",\n  ShiftLeft: \"Shift\",\n  ShiftRight: \"Shift\",\n  /* Option / Alt --------------------------------------------------------- */\n  Option: \"Option\",\n  OptionLeft: \"Option\",\n  OptionRight: \"Option\",\n  Opt: \"Option\",\n  OptLeft: \"Option\",\n  OptRight: \"Option\",\n  Alt: \"Option\",\n  AltLeft: \"Option\",\n  AltRight: \"Option\",\n  /* Control -------------------------------------------------------------- */\n  Ctrl: \"Control\",\n  CtrlLeft: \"Control\",\n  CtrlRight: \"Control\",\n  Control: \"Control\",\n  ControlLeft: \"Control\",\n  ControlRight: \"Control\",\n  macControl: \"Control\", // Adobe-specific alias\n};\n\n/**\n * Single-modifier → AppleScript mask values.\n * Maps canonical modifier names to their AppleScript mask values.\n */\nexport const MAC_MODIFIER_CODES: Record<MacModifier, number> = {\n  Cmd: 256, // 0x0100\n  Shift: 512, // 0x0200\n  Option: 2048, // 0x0800\n  Control: 4096, // 0x1000\n};\n\n/**\n * Pre-computed combination-mask table.\n * Maps modifier combination strings to their AppleScript mask values.\n */\nexport const MODIFIER_COMBO_TO_CODE: Record<string, number> = {\n  \"\": 0,\n  Cmd: 256,\n  Shift: 512,\n  \"Cmd+Shift\": 768,\n  Option: 2048,\n  \"Cmd+Option\": 2304,\n  \"Option+Shift\": 2560,\n  \"Cmd+Option+Shift\": 2816,\n  Control: 4096,\n  \"Cmd+Control\": 4352,\n  \"Control+Shift\": 4608,\n  \"Cmd+Control+Shift\": 4864,\n  \"Control+Option\": 6144,\n  \"Cmd+Control+Option\": 6400,\n  \"Control+Option+Shift\": 6656,\n  \"Cmd+Control+Option+Shift\": 6912,\n};\n\n/**\n * JavaScript event.code → AppleScript key code mapping.\n * Full static list for every key present on a standard Mac keyboard.\n */\nexport const JS_CODE_TO_AS_KEY_CODE: Record<string, number> = {\n  /* 4.1 –– Alphanumeric row --------------------------------------------- */\n  Backquote: 50, // ` ~\n  Digit1: 18, // 1 !\n  Digit2: 19, // 2 @\n  Digit3: 20, // 3 #\n  Digit4: 21, // 4 $\n  Digit5: 23, // 5 %\n  Digit6: 22, // 6 ^\n  Digit7: 26, // 7 &\n  Digit8: 28, // 8 *\n  Digit9: 25, // 9 (\n  Digit0: 29, // 0 )\n  Minus: 27, // - _\n  Equal: 24, // = +\n  /* 4.2 –– QWERTY row ---------------------------------------------------- */\n  KeyQ: 12,\n  KeyW: 13,\n  KeyE: 14,\n  KeyR: 15,\n  KeyT: 17,\n  KeyY: 16,\n  KeyU: 32,\n  KeyI: 34,\n  KeyO: 31,\n  KeyP: 35,\n  BracketLeft: 33, // [ {\n  BracketRight: 30, // ] }\n  Backslash: 42, // \\ |\n  /* 4.3 –– ASDF row ------------------------------------------------------ */\n  KeyA: 0,\n  KeyS: 1,\n  KeyD: 2,\n  KeyF: 3,\n  KeyG: 5,\n  KeyH: 4,\n  KeyJ: 38,\n  KeyK: 40,\n  KeyL: 37,\n  Semicolon: 41, // ; :\n  Quote: 39, // ' \"\n  /* 4.4 –– ZXCV row ------------------------------------------------------ */\n  KeyZ: 6,\n  KeyX: 7,\n  KeyC: 8,\n  KeyV: 9,\n  KeyB: 11,\n  KeyN: 45,\n  KeyM: 46,\n  Comma: 43, // , <\n  Period: 47, // . >\n  Slash: 44, // / ?\n  /* 4.5 –– Whitespace & editing ----------------------------------------- */\n  Space: 49,\n  Tab: 48,\n  Enter: 36, // Return (main)\n  NumpadEnter: 76, // Enter (numeric pad)\n  Backspace: 51, // Delete ⌫ (backwards)\n  Delete: 51, // alias for Backspace\n  Escape: 53,\n  CapsLock: 57,\n  /* 4.6 –– Arrow / navigation ------------------------------------------- */\n  ArrowLeft: 123,\n  ArrowRight: 124,\n  ArrowDown: 125,\n  ArrowUp: 126,\n  Home: 115,\n  End: 119,\n  PageUp: 116,\n  PageDown: 121,\n  /* 4.7 –– Function keys ------------------------------------------------- */\n  F1: 122,\n  F2: 120,\n  F3: 99,\n  F4: 118,\n  F5: 96,\n  F6: 97,\n  F7: 98,\n  F8: 100,\n  F9: 101,\n  F10: 109,\n  F11: 103,\n  F12: 111,\n  F13: 105,\n  F14: 107,\n  F15: 113,\n  F16: 106,\n  F17: 64,\n  F18: 79,\n  F19: 80,\n  F20: 90,\n  /* 4.8 –– Numpad -------------------------------------------------------- */\n  Numpad0: 82,\n  Numpad1: 83,\n  Numpad2: 84,\n  Numpad3: 85,\n  Numpad4: 86,\n  Numpad5: 87,\n  Numpad6: 88,\n  Numpad7: 89,\n  Numpad8: 91,\n  Numpad9: 92,\n  NumpadMultiply: 67,\n  NumpadAdd: 69,\n  NumpadSubtract: 78,\n  NumpadDivide: 75,\n  NumpadDecimal: 65,\n  NumpadEqual: 81,\n  NumLock: 71, // “Clear”\n  /* 4.9 –– Misc system keys --------------------------------------------- */\n  Insert: 114, // “Help” on Apple keyboards\n  PrintScreen: 114, // same physical key as Help\n  Pause: 131, // F16 top-function variant\n};\n","//FILE: src/utils/utils.keystroke.ts\n\n/**\n * Keyboard Shortcut Utilities for macOS Automation\n *\n * This module provides functions for parsing, normalizing, and converting keyboard shortcuts\n * into AppleScript/Keyboard Maestro compatible formats. The main entry point is\n * {@link normalizeAppleScriptShortcut}, which accepts a shortcut in various forms (string, number,\n * or mask→key map) and returns a normalized map suitable for automation scripting.\n *\n * Key features:\n * - Parse human-readable javascript shortcut strings (e.g. \"Cmd+Shift+KeyD\")\n * - Convert to AppleScript modifier mask and key code\n * - Handle modifier aliases and canonicalization\n * - Utility functions for sorting, combining, and mapping modifiers\n * - Support for single-character keys and digit keys\n * - Handles passing in existing mask→key maps directly without modification for a seamless interface\n *\n * See also:\n * - keystroke.mapping.ts: Contains static tables for modifier aliases, key code mapping, and mask values.\n *  - Included converting from JavaScript `event.code`, and windows modifier aliases for convenience.\n *  - Directional modifers like \"CmdLeft\" and \"OptRight\" are flattened to non-directional variants\n *\n * Example usage:\n *   import { normalizeAppleScriptShortcut } from \"./keystroke.utils\";\n *   const shortcut = normalizeAppleScriptShortcut(\"Cmd+Option+O\"); // { 2304: 31 }\n *\n * For lower-level utilities, see {@link processKeys}, {@link toAppleScript}, {@link comboMask}, etc.\n */\n\nimport {\n  MacModifier,\n  canonicalizeModifier,\n  MAC_MODIFIER_CODES,\n  MODIFIER_ALIASES,\n  MODIFIER_COMBO_TO_CODE,\n  toAppleScriptKeyCode,\n} from \"./utils.keystroke.mapping\";\n\n/* ---------------------- */\n/* Interfaces / Types\n/* ---------------------- */\n\n/**\n * Represents the result of parsing a shortcut string.\n * @property modifiers - Array of canonical modifier names.\n * @property keyToken - The key portion of the shortcut (e.g. 'KeyD', 'A', 'Digit5').\n */\nexport interface ParsedShortcut {\n  modifiers: MacModifier[];\n  keyToken: string;\n}\n\n/**\n * Represents a shortcut in AppleScript format.\n * @property modifier - Numeric AppleScript modifier mask (0–6912).\n * @property key - Numeric AppleScript key code (0–255), or null for modifier-only shortcuts\n */\nexport interface AppleScriptShortcut {\n  /** AppleScript modifier mask (0 – 6912) */\n  modifier: number;\n  /** AppleScript key code (0 – 255), or null for modifier-only shortcuts */\n  key: number | null;\n}\n\n/* ---------------------- */\n/* Functions\n/* ---------------------- */\n\n/**\n * Checks if a token is a recognized modifier (Cmd, Shift, Option, Control or any alias).\n * @param token - The string to test (e.g. 'Cmd', 'Alt', 'Control', 'Foo').\n * @returns True if the token is a modifier or alias, false otherwise.\n */\nexport function isModifier(token: string): boolean {\n  return token in MODIFIER_ALIASES;\n}\n\n/**\n * Sorts an array of modifiers into canonical macOS order: Cmd → Option → Shift → Control.\n * @param mods - Array of unsorted modifier names (canonical or aliases).\n * @returns Sorted array of canonical modifier names.\n */\nexport function sortModifiers(mods: MacModifier[]): MacModifier[] {\n  const order: MacModifier[] = [\"Cmd\", \"Option\", \"Shift\", \"Control\"];\n  return [...mods].sort((a, b) => order.indexOf(a) - order.indexOf(b));\n}\n\n/**\n * Combines an array of modifiers into a single AppleScript modifier mask value.\n * @param mods - Array of canonical modifier names.\n * @returns Numeric mask (e.g. 768 for Cmd+Shift).\n */\nexport function buildModifierMask(mods: MacModifier[]): number {\n  return mods.reduce((acc, m) => acc + MAC_MODIFIER_CODES[m], 0);\n}\n\n/**\n * Parses a shortcut string (e.g. 'Cmd+Shift+KeyD') into its modifier and key components.\n * @param shortcut - Shortcut string to parse.\n * @returns ParsedShortcut object with sorted modifiers and keyToken.\n */\nexport function parseShortcut(shortcut: string): ParsedShortcut {\n  const parts = shortcut\n    .split(\"+\")\n    .map((p) => p.trim())\n    .filter(Boolean);\n\n  const modifiers: MacModifier[] = [];\n  let keyToken = \"\";\n\n  for (const part of parts) {\n    if (isModifier(part)) {\n      modifiers.push(canonicalizeModifier(part) as MacModifier);\n    } else {\n      keyToken = part;\n    }\n  }\n\n  return {\n    modifiers: sortModifiers(modifiers),\n    keyToken,\n  };\n}\n\n/**\n * Converts a human-readable shortcut (e.g. 'Cmd+Shift+KeyD' or 'd')\n * into an AppleScriptShortcut object with modifier mask and key code.\n * Throws an Error if the key or modifiers are unknown.\n * @param shortcut - Shortcut string to process.\n * @returns AppleScriptShortcut object.\n */\nexport function processKeys(shortcut: string): AppleScriptShortcut {\n  const { modifiers, keyToken } = parseShortcut(shortcut);\n\n  // Compute modifier mask\n  const modifierMask = buildModifierMask(modifiers);\n\n  // Explicit KeyCode:NN optional syntax (always wins)\n  let rawToken = keyToken;\n  let explicitRaw = false;\n  const keyCodePrefixMatch = /^KeyCode:(\\d+)$/.exec(rawToken);\n  if (keyCodePrefixMatch) {\n    explicitRaw = true;\n    rawToken = keyCodePrefixMatch[1];\n  }\n\n  // 1) Direct lookup (event.code style already, e.g. Digit1 / KeyA)\n  let keyCode = !explicitRaw ? toAppleScriptKeyCode(rawToken) : undefined;\n\n  // 2) Single-character alphanumeric → map to DigitX / KeyX\n  if (!explicitRaw && keyCode === undefined && rawToken.length === 1) {\n    const ch = rawToken.toUpperCase();\n    const code = /[A-Z]/.test(ch)\n      ? `Key${ch}`\n      : /[0-9]/.test(ch)\n        ? `Digit${ch}`\n        : undefined;\n    if (code) keyCode = toAppleScriptKeyCode(code);\n  }\n\n  // 3) Raw numeric keycode fallback:\n  //    - explicit \"KeyCode:NN\"\n  //    - OR multi-digit numeric string (length > 1 and all digits)\n  if (\n    keyCode === undefined &&\n    /^\\d+$/.test(rawToken) &&\n    (explicitRaw || rawToken.length > 1)\n  ) {\n    const numeric = Number(rawToken);\n    if (numeric >= 0 && numeric <= 255) {\n      keyCode = numeric;\n    }\n  }\n\n  // (Do *not* treat single-digit numeric string without prefix as raw code; already resolved above.)\n\n  // 4. Give up if still undefined\n  if (keyCode === undefined) {\n    throw new Error(`Unsupported key token: \"${keyToken}\"`);\n  }\n\n  return { modifier: modifierMask, key: keyCode };\n}\n\n/**\n * Converts a shortcut string (e.g. 'Cmd+Shift+KeyD') into a map of modifier mask to key code.\n * Always returns an object with a single key-value pair: {modifierMask: keyCode}.\n * @param shortcut - Shortcut string to convert.\n * @returns Record<number, number> mapping modifier mask to key code.\n */\nexport function toAppleScript(shortcut: string): Record<number, number | null> {\n  const { modifier, key } = processKeys(shortcut);\n  // Always return the mask→key map, even when modifier === 0\n  return { [modifier]: key };\n}\n\n/**\n * Returns the precomputed AppleScript modifier mask for a given combination string (e.g. 'Cmd+Option').\n * Throws an Error if the combination is not recognized.\n * @param combo - Modifier combination string (e.g. 'Cmd+Shift').\n * @returns Numeric mask value for the combination.\n */\nexport function comboMask(combo: string): number {\n  const tokens = combo\n    .split(\"+\")\n    .map((m) => m.trim())\n    .filter(Boolean);\n\n  // Validate all tokens are valid modifiers\n  for (const token of tokens) {\n    if (!isModifier(token)) {\n      throw new Error(`Unknown modifier combination: \"${combo}\"`);\n    }\n  }\n\n  const mods = tokens.map((m) => canonicalizeModifier(m) as MacModifier);\n  const sorted = sortModifiers(mods).join(\"+\");\n  const val = MODIFIER_COMBO_TO_CODE[sorted];\n  if (val !== undefined) return val;\n\n  // Fallback: build mask dynamically (prevents need for exhaustive table entries)\n  return buildModifierMask(sortModifiers(mods));\n}\n\n/**\n * Normalize any form of shortcut input into a ready-to-use AppleScript modifier mask → key code map.\n *\n * This is the main entry point for keystroke processing in kmjs. It accepts various input formats\n * and converts them to a standardized format suitable for AppleScript/Keyboard Maestro automation.\n *\n * **Supported Input Formats:**\n * - **String shortcuts**: Human-readable combinations like \"Cmd+S\", \"Shift+KeyA\", \"Option+F1\"\n * - **Single characters**: \"a\", \"1\", \"A\" (automatically mapped to KeyA, Digit1, etc.)\n * - **Event codes**: JavaScript event.code strings like \"KeyA\", \"Digit1\", \"Space\", \"Enter\"\n * - **Raw key codes**: Numeric values (0-255) representing AppleScript key codes\n * - **Explicit key codes**: \"KeyCode:36\" format for explicit raw key code specification\n * - **Modifier-only**: \"Cmd\", \"Shift+Option\" (returns null key with modifier mask)\n * - **Existing maps**: Pre-formatted {mask: keyCode} objects (returned as-is)\n *\n * **Modifier Support:**\n * - Cmd/Command/Meta (aliases supported)\n * - Shift\n * - Option/Alt (aliases supported)\n * - Control/Ctrl (aliases supported)\n * - All combinations: \"Cmd+Shift+Option+Control\"\n *\n * **Return Format:**\n * Returns a Record<number, number | null> where:\n * - Key: AppleScript modifier mask (0-6912)\n * - Value: AppleScript key code (0-255) or null for modifier-only shortcuts\n *\n * @param input - The keystroke input to normalize. Can be:\n *   - `string`: Human-readable shortcut like \"Cmd+S\" or \"KeyA\" or modifier-only like \"Cmd\"\n *   - `number`: Raw AppleScript key code (0-255)\n *   - `Record<number, number | null>`: Pre-formatted mask→key map (returned verbatim)\n *\n * @returns A normalized AppleScript-compatible map with modifier mask as key and key code as value.\n *   For modifier-only shortcuts, the value will be null.\n *\n * @throws {Error} When key code is out of valid range (0-255) or input format is invalid\n *\n * @example\n * ```typescript\n * // String shortcuts\n * normalizeAppleScriptShortcut(\"Cmd+S\")           // { 256: 1 }\n * normalizeAppleScriptShortcut(\"Shift+KeyA\")      // { 512: 0 }\n * normalizeAppleScriptShortcut(\"Cmd+Option+F1\")   // { 2304: 122 }\n *\n * // Single characters (auto-mapped)\n * normalizeAppleScriptShortcut(\"a\")               // { 0: 0 }\n * normalizeAppleScriptShortcut(\"1\")               // { 0: 18 }\n *\n * // Event codes\n * normalizeAppleScriptShortcut(\"Space\")           // { 0: 49 }\n * normalizeAppleScriptShortcut(\"Enter\")           // { 0: 36 }\n *\n * // Raw key codes\n * normalizeAppleScriptShortcut(36)                // { 0: 36 }\n * normalizeAppleScriptShortcut(\"KeyCode:36\")      // { 0: 36 }\n *\n * // Modifier-only (returns null key)\n * normalizeAppleScriptShortcut(\"Cmd\")             // { 256: null }\n * normalizeAppleScriptShortcut(\"Shift+Option\")    // { 2560: null }\n *\n * // Pre-formatted maps (returned as-is)\n * normalizeAppleScriptShortcut({ 256: 1 })       // { 256: 1 }\n * ```\n *\n * @see {@link processKeys} For the underlying string processing logic\n * @see {@link toAppleScript} For direct string-to-map conversion\n * @see {@link buildModifierMask} For modifier mask calculation\n */\nexport function normalizeAppleScriptShortcut(\n  input: number | Record<number, number | null> | string,\n): Record<number, number | null> {\n  // Raw numeric keyCode (no modifiers) – treat as already-resolved\n  if (typeof input === \"number\" && Number.isInteger(input)) {\n    // Guard: ensure plausible keycode range (0–255 typical; KM uses <= 126 main keys, some higher fn keys)\n    if (input < 0 || input > 255) {\n      throw new Error(`Key code out of range: ${input}`);\n    }\n    return { 0: input };\n  }\n  // NOTE: numeric *string* forms are handled in processKeys():\n  //  - Single digit \"1\" → Digit1 key (NOT raw code 1)\n  //  - Multi-digit \"36\" → raw keyCode 36\n  //  - \"KeyCode:1\"     → raw keyCode 1 (explicit override)\n\n  // Already a mask→key map?\n  if (\n    typeof input === \"object\" &&\n    input !== null &&\n    Object.keys(input).length === 1 &&\n    Object.entries(input).every(\n      ([mask, key]) =>\n        !isNaN(Number(mask)) && (typeof key === \"number\" || key === null),\n    )\n  ) {\n    return input as Record<number, number | null>;\n  }\n\n  // If input is a string of just modifiers, allow mask→key map with key null\n  if (typeof input === \"string\") {\n    const parsed = parseShortcut(input);\n    if (parsed.keyToken === \"\" && parsed.modifiers.length > 0) {\n      const mask = buildModifierMask(parsed.modifiers);\n      return { [mask]: null };\n    }\n  }\n\n  // Otherwise treat as human-readable (or numeric) shortcut\n  return toAppleScript(String(input));\n}\n","//FILE: src/utils/utils.mouse.ts\n\nimport type {\n  MouseButton,\n  ClickKind,\n} from \"../virtual_actions/types/types.input\";\n\n/* ----------------------------- */\n/* Mouse mappings\n/* ----------------------------- */\n\nexport const BUTTON_INT: Record<MouseButton, number> = {\n  Left: 0,\n  Right: 1,\n  Center: 2,\n  Button4: 3,\n  Button5: 4,\n  Button6: 5,\n};\n\nexport const CLICK_COUNT_INT: Record<\n  Exclude<ClickKind, \"Move\" | \"Release\">,\n  number\n> = {\n  Click: 1,\n  DoubleClick: 2,\n  TripleClick: 3,\n};\n","//FILE: src/virtual_actions/kmjs.virtualAction.clickAtFoundImage.ts\n\nimport chalk from \"chalk\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { screenAreaToXml } from \"../utils/template.xml.ui\";\nimport { normalizeAppleScriptShortcut } from \"../utils/utils.keystroke\";\nimport { BUTTON_INT, CLICK_COUNT_INT } from \"../utils/utils.mouse\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type {\n  VirtualAction,\n  ScreenArea,\n  ImageSource,\n  CoordinateReference,\n  RelativeCorner,\n  ImageSelection,\n  ClickKind,\n  MouseButton,\n  MouseDrag,\n} from \"./index\";\n\n/* ------------------------------------------------------------------ */\n/* Enumerations / Option types                                         */\n/* ------------------------------------------------------------------ */\n\nexport interface ClickAtFoundImageOptions {\n  /* --- Basic click parameters --------------------------------------- */\n  clickKind?: ClickKind; // default = \"Click\"\n  button?: MouseButton; // default = \"Left\"\n  clickModifiers?: string | number | Record<number, number | null>; // KB mods\n\n  /* --- Relative positioning ----------------------------------------- */\n  horizontal?: number; // HorizontalPositionExpression\n  vertical?: number; // VerticalPositionExpression\n  /** Where the (x,y) offset is measured from. */\n  relative?: CoordinateReference; // default = \"Image\"\n  relativeCorner?: RelativeCorner; // default = \"Center\"\n\n  /* --- Image finding ------------------------------------------------- */\n  /**\n   * Where the *template* image is loaded from.\n   *   • **Image** (default) – pasted/inline image\n   *   • **File** – supply `filePath`\n   *   • **NamedClipboard** – supply `namedClipboardUUID`\n   *   • **Screen / Icon / …** – other KM sources\n   */\n  imageSource?: ImageSource; // default = \"Image\"\n  fuzz?: number; // 0–100 (defaults = 15)\n  waitForImage?: boolean; // default = true (omit key when true)\n  imageSelection?: ImageSelection; // default = \"Unique\"\n  namedClipboardUUID?: string; // ↥ required if `imageSource === \"NamedClipboard\"`\n  filePath?: string; // ↥ required if `imageSource === \"File\"`\n\n  /* --- Screen / drag / restore -------------------------------------- */\n  /** Where to click (Screen/Window/Area). */\n  screenArea?: ScreenArea;\n  /** Image search crop when ImageSource === \"Screen\" (defaults to `screenArea`). */\n  imageScreenArea?: ScreenArea;\n  mouseDrag?: MouseDrag;\n  dragTargetX?: number;\n  dragTargetY?: number;\n  restoreMouseLocation?: boolean; // default = false\n}\n\n/* ------------------------------------------------------------------ */\n/* Main factory function                                               */\n/* ------------------------------------------------------------------ */\n\n/**\n * Creates a Keyboard Maestro virtual action that clicks at a found image on the screen.\n * This is the most comprehensive mouse action, supporting image search, coordinate systems, and advanced click behaviors.\n *\n * ## Advanced Mouse Control with Image Recognition\n *\n * This function combines image recognition with mouse automation, making it perfect for:\n * - Clicking on UI elements that may move or change\n * - Dragging elements found via image search\n * - Complex automation that adapts to different screen layouts\n * - Precise clicking relative to visual landmarks\n *\n * ### Key Concepts:\n *\n * **Image-Based vs Coordinate-Based Operation:**\n * - When `relative: \"Image\"` (default): Finds an image first, then clicks relative to it\n * - When `relative: \"Screen\"/\"Window\"/\"Mouse\"/\"Absolute\"`: Uses this as a pure coordinate-based click (like createVirtualMoveAndClick)\n *\n * **Image Sources (`imageSource` parameter):**\n * - `\"Image\"` - Uses an image pasted into the Keyboard Maestro action (default)\n * - `\"File\"` - Loads template image from file path (requires `filePath`)\n * - `\"NamedClipboard\"` - Uses image from named clipboard (requires `namedClipboardUUID`)\n * - `\"Screen\"` - Uses a screenshot of specified area as template\n *\n * **Coordinate Systems (`relative` parameter):**\n * - `\"Image\"` - Relative to the found image (0,0 = image center by default)\n * - `\"Screen\"` - Absolute screen coordinates (0,0 = top-left of main screen)\n * - `\"Window\"` - Relative to the front window (0,0 = top-left of window content)\n * - `\"Mouse\"` - Relative to current mouse position (0,0 = current mouse location)\n * - `\"Absolute\"` - Same as Screen but uses different internal handling\n *\n * **Drag Operations for Image-Based Actions:**\n * - `\"None\"` - Just click, no dragging\n * - `\"Absolute\"` - Drag from found image to absolute screen coordinates\n * - `\"Relative\"` - Drag by offset from the found image position\n * - `\"To\"` - Drag to specific coordinates\n * - `\"From\"` - Start drag from specific coordinates\n *\n * @param opts - Options to configure the click action\n * @param opts.clickKind - Type of click: \"Click\", \"DoubleClick\", \"RightClick\", \"Move\", \"Release\" (default: \"Click\")\n * @param opts.button - Mouse button: \"Left\", \"Right\", \"Middle\" (default: \"Left\")\n * @param opts.clickModifiers - Modifier keys as string, number, or object (default: 0)\n * @param opts.horizontal - X coordinate offset (default: 0)\n * @param opts.vertical - Y coordinate offset (default: 0)\n * @param opts.relative - Coordinate reference: \"Image\", \"Window\", \"Screen\", \"Mouse\", \"Absolute\" (default: \"Image\")\n * @param opts.relativeCorner - Corner for relative positioning: \"TopLeft\", \"TopRight\", \"BottomLeft\", \"BottomRight\", \"Center\" (default: \"Center\" for Image, \"TopLeft\" for Mouse/Absolute)\n * @param opts.imageSource - Template image source: \"Image\", \"File\", \"NamedClipboard\", \"Screen\", etc. (default: \"Image\")\n * @param opts.fuzz - Image match tolerance 0-100 (default: 15)\n * @param opts.waitForImage - Wait for image to appear (default: true)\n * @param opts.imageSelection - Which image if multiple found: \"Unique\", \"Best\", \"TopLeft\", etc. (default: \"Unique\")\n * @param opts.namedClipboardUUID - UUID for named clipboard (required if imageSource is \"NamedClipboard\")\n * @param opts.filePath - File path for image (required if imageSource is \"File\")\n * @param opts.screenArea - Area to search/click (default: entire screen)\n * @param opts.imageScreenArea - Area to crop image search when imageSource is \"Screen\"\n * @param opts.mouseDrag - Mouse drag behavior: \"None\", \"Absolute\", \"Relative\", \"To\", \"From\" (default: \"None\")\n * @param opts.dragTargetX - X coordinate for drag target (default: 0)\n * @param opts.dragTargetY - Y coordinate for drag target (default: 0)\n * @param opts.restoreMouseLocation - Restore mouse position after click (default: false)\n *\n * @example\n * // Find and click on a button image (basic image-based clicking)\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/button.png\"\n * })\n *\n * // Click 20px to the right and 10px below a found image\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/reference.png\",\n *   horizontal: 20,\n *   vertical: 10,\n *   relative: \"Image\"  // Relative to the found image\n * })\n *\n * // Drag from a found image to a specific screen location\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/draggable-item.png\",\n *   relative: \"Image\",\n *   mouseDrag: \"Absolute\",  // Drag to absolute coordinates\n *   dragTargetX: 500,       // Target screen X\n *   dragTargetY: 300,       // Target screen Y\n *   clickKind: \"Click\"\n * })\n *\n * // Find an image and drag it by a relative offset\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/slider-handle.png\",\n *   relative: \"Image\",\n *   mouseDrag: \"Relative\",  // Drag by offset\n *   dragTargetX: 100,       // Move 100px right from image\n *   dragTargetY: 0,         // No vertical movement\n *   clickKind: \"Click\"\n * })\n *\n * // Use as coordinate-based click (ignoring image search)\n * createVirtualClickAtFoundImage({\n *   horizontal: 400,\n *   vertical: 300,\n *   relative: \"Screen\",     // Pure coordinate-based\n *   clickKind: \"Click\"\n * })\n *\n * // Complex drag: Find image, then drag to another found location\n * // (This would typically be done in multiple steps)\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/source.png\",\n *   relative: \"Image\",\n *   mouseDrag: \"Absolute\",\n *   dragTargetX: 600,       // Coordinates of destination\n *   dragTargetY: 400,\n *   clickKind: \"Click\",\n *   restoreMouseLocation: true  // Return mouse to original position\n * })\n *\n * // Move mouse to found image without clicking (useful for positioning)\n * createVirtualClickAtFoundImage({\n *   imageSource: \"File\",\n *   filePath: \"/path/to/target.png\",\n *   relative: \"Image\",\n *   clickKind: \"Move\"       // Just move, don't click\n * })\n *\n * @returns A VirtualAction object that can render itself as KM XML.\n */\nexport function createVirtualClickAtFoundImage(\n  opts: ClickAtFoundImageOptions = {},\n): VirtualAction {\n  /**\n   * Extract and set defaults for all click/image options.\n   * @see ClickAtFoundImageOptions for details on each option.\n   */\n  const {\n    clickKind = \"Click\", // Type of click (single, double, etc.)\n    button = \"Left\", // Mouse button to use\n    clickModifiers = 0, // Modifier keys\n\n    horizontal = 0, // Horizontal position\n    vertical = 0, // Vertical position\n    relative = \"Image\", // Relative source for position\n    // relativeCorner = \"Center\", // Corner to use for relative positioning\n    relativeCorner, // Corner to use for relative positioning\n\n    imageSource = \"Image\", // Template image source\n    fuzz, // Image match fuzziness\n    waitForImage = true, // Wait for image to appear\n    imageSelection = \"Unique\", // Which image to select if multiple found\n    namedClipboardUUID, // Named clipboard UUID if needed\n    filePath, // File path if needed\n\n    screenArea = { type: \"ScreenAll\" }, // Area to search/click\n    imageScreenArea, // Area to crop image search\n    mouseDrag = \"None\", // Mouse drag behaviour\n    dragTargetX = 0, // Drag target X\n    dragTargetY = 0, // Drag target Y\n    restoreMouseLocation: _restoreMouseLocation = false, // Restore mouse location after click\n  } = opts;\n\n  // Release actions ignore restoreMouseLocation (GUI hides it)\n  const restoreMouseLocation =\n    clickKind === \"Release\" ? false : _restoreMouseLocation;\n\n  /* -----------------------------------------------------------\n   * 1) Normalize relativeCorner:\n   *    • If caller passed one, use it.\n   *    • Else if relative is Mouse or Absolute → TopLeft (KM uses\n   *      these as vestigal reference for some reason).\n   *    • Otherwise → Center.\n   * --------------------------------------------------------- */\n  const _relativeCorner: RelativeCorner =\n    relativeCorner !== undefined\n      ? relativeCorner\n      : relative === \"Mouse\" || relative === \"Absolute\"\n        ? \"TopLeft\"\n        : \"Center\";\n\n  /* -----------------------------------------------------------\n   * Named Clipboard handling\n   * --------------------------------------------------------- */\n  const DEFAULT_CLIPBOARD_UUID = \"FE1390C3-74DF-4983-9C6B-E2C441F97963\";\n  const DEFAULT_CLIPBOARD_LABEL = \"Unnamed Named Clipboard\";\n\n  // If the template comes from a named clipboard but the caller did\n  // not supply a UUID, just mimic KM’s own fallback.\n  const clipboardUUID =\n    imageSource === \"NamedClipboard\"\n      ? (namedClipboardUUID ?? DEFAULT_CLIPBOARD_UUID)\n      : undefined;\n\n  /**\n   * Validate required options for certain image sources.\n   */\n  if (imageSource === \"File\" && !filePath) {\n    throw new Error(\"filePath must be supplied when imageSource === 'File'\");\n  }\n\n  /**\n   * Resolve the modifier mask for the click action.\n   * Converts clickModifiers to a numeric mask.\n   */\n  const mask = (() => {\n    if (typeof clickModifiers === \"number\") return clickModifiers;\n    const map = normalizeAppleScriptShortcut(clickModifiers as any);\n    return Number(Object.keys(map)[0]);\n  })();\n\n  /**\n   * Determine the action string and click count for the KM XML.\n   * Uses centralized mapping for click counts.\n   */\n  let actionString: string;\n  let clickCount: number;\n  switch (clickKind) {\n    case \"Move\":\n      actionString = \"Move\";\n      clickCount = 0;\n      break;\n    case \"Release\":\n      // KM serialises Release as MoveAndClick + ClickCount -1.\n      // Ignore restoreMouseLocation (GUI hides it).\n      actionString = \"MoveAndClick\";\n      clickCount = -1;\n      break;\n    default:\n      // Use mapping for click counts\n      clickCount = CLICK_COUNT_INT[clickKind];\n      actionString = restoreMouseLocation ? \"Click\" : \"MoveAndClick\";\n      break;\n  }\n\n  /** ----------------------------------------------------------------\n   *  Mouse-drag sanity\n   *  ----------------------------------------------------------------\n   *  KM silently resets MouseDrag → “None” whenever you pick\n   *  Click / DoubleClick *and* ask for a drag phase that makes no sense\n   *  (“From”, “Drag”, “Release”).  Re-create that behaviour so our\n   *  generated XML round-trips 1-for-1.\n   */\n  let effectiveMouseDrag: MouseDrag = mouseDrag;\n  if (\n    (clickKind === \"Click\" || clickKind === \"DoubleClick\") &&\n    ((mouseDrag as any) === \"From\" ||\n      (mouseDrag as any) === \"Drag\" ||\n      (mouseDrag as any) === \"Release\")\n  ) {\n    effectiveMouseDrag = \"None\";\n  }\n\n  /**\n   * Build the KM XML for the click action with proper structure.\n   */\n  const fuzzValue =\n    typeof fuzz === \"number\"\n      ? Math.max(0, Math.min(100, Math.round(fuzz)))\n      : 15; // KM default\n\n  /* ----------------------------------------------------------------\n   * TEMPLATE-SOURCE KEYS\n   * ----------------------------------------------------------------\n   * Only keep the template‐source keys (ImagePath/ImageSource/...),\n   * when we're positioning *relative to the found image*.\n   */\n  const keepTemplateSourceKeys = relative === \"Image\";\n\n  const imagePathXml =\n    keepTemplateSourceKeys && imageSource === \"File\"\n      ? [\"\\t\\t<key>ImagePath</key>\", `\\t\\t<string>${filePath}</string>`]\n      : [];\n\n  const namedClipboardXml =\n    keepTemplateSourceKeys && imageSource === \"NamedClipboard\"\n      ? [\n          `\\t\\t<key>ImageNamedClipboardName</key>`,\n          `\\t\\t<string>${clipboardUUID}</string>`,\n          `\\t\\t<key>ImageNamedClipboardRedundandDisplayName</key>`,\n          `\\t\\t<string>${DEFAULT_CLIPBOARD_LABEL}</string>`,\n        ]\n      : [];\n\n  const imageScreenAreaXml =\n    keepTemplateSourceKeys && imageSource === \"Screen\"\n      ? screenAreaToXml(\n          \"ImageScreenArea\",\n          imageScreenArea ?? screenArea ?? { type: \"ScreenAll\" },\n        )\n          .split(\"\\n\")\n          .map((l) => (l ? `\\t\\t${l}` : l))\n      : [];\n\n  const imageSelectionXml =\n    imageSelection !== \"Unique\" && relative === \"Image\"\n      ? [\n          `\\t\\t<key>ImageSelection</key>`,\n          `\\t\\t<string>${imageSelection}</string>`,\n        ]\n      : [];\n\n  const relativeCornerXml = _relativeCorner\n    ? [\n        `\\t\\t<key>RelativeCorner</key>`,\n        `\\t\\t<string>${_relativeCorner}</string>`,\n      ]\n    : [];\n\n  /* -----------------------------------------------------------\n   * Only include <ScreenArea> when the click is measured\n   * relative to the *found image*.\n   * --------------------------------------------------------- */\n  const includeScreenArea = relative === \"Image\";\n\n  const screenAreaLines = includeScreenArea\n    ? screenAreaToXml(\"ScreenArea\", screenArea)\n        .split(\"\\n\")\n        .map((l) => (l ? `\\t\\t${l}` : l))\n    : [];\n\n  const imageSourceXml =\n    keepTemplateSourceKeys && imageSource !== \"Image\"\n      ? [\"\\t\\t<key>ImageSource</key>\", `\\t\\t<string>${imageSource}</string>`]\n      : [];\n\n  // Only emit KM’s timeout block when waitForImage is explicitly true.\n  let waitForImageXml: string[] = [];\n  if (opts.waitForImage === true) {\n    waitForImageXml = [\n      `\\t\\t<key>TimeOutAbortsMacro</key>`,\n      `\\t\\t<true/>`,\n      `\\t\\t<key>WaitForImage</key>`,\n      `\\t\\t<true/>`,\n    ];\n  }\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    `\\t\\t<string>${actionString}</string>`,\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>Button</key>\",\n    `\\t\\t<integer>${BUTTON_INT[button]}</integer>`,\n    \"\\t\\t<key>ClickCount</key>\",\n    `\\t\\t<integer>${clickCount}</integer>`,\n    \"\\t\\t<key>DisplayMatches</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>DragHorizontalPosition</key>\",\n    `\\t\\t<string>${dragTargetX}</string>`,\n    \"\\t\\t<key>DragVerticalPosition</key>\",\n    `\\t\\t<string>${dragTargetY}</string>`,\n    \"\\t\\t<key>Fuzz</key>\",\n    `\\t\\t<integer>${fuzzValue}</integer>`,\n    \"\\t\\t<key>HorizontalPositionExpression</key>\",\n    `\\t\\t<string>${horizontal}</string>`,\n    ...imagePathXml,\n    ...namedClipboardXml,\n    ...imageScreenAreaXml,\n    ...imageSelectionXml,\n    ...imageSourceXml,\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>MouseMoveAndClick</string>\",\n    \"\\t\\t<key>Modifiers</key>\",\n    `\\t\\t<integer>${mask}</integer>`,\n    \"\\t\\t<key>MouseDrag</key>\",\n    `\\t\\t<string>${effectiveMouseDrag}</string>`,\n    \"\\t\\t<key>Relative</key>\",\n    `\\t\\t<string>${relative}</string>`,\n    ...relativeCornerXml,\n    \"\\t\\t<key>RestoreMouseLocation</key>\",\n    `\\t\\t<${restoreMouseLocation ? \"true\" : \"false\"}/>`,\n    ...screenAreaLines,\n    \"\\t\\t<key>VerticalPositionExpression</key>\",\n    `\\t\\t<string>${vertical}</string>`,\n    ...waitForImageXml,\n    \"\\t</dict>\",\n  ];\n\n  /**\n   * Return the VirtualAction object with XML rendering.\n   */\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.copy.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderTimeoutXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Options for the Copy action.\n * Both timeout-related options are optional and default to their standard KM behavior.\n */\nexport interface CopyActionOptions {\n  /** Whether to notify when a timeout occurs. Defaults to true. */\n  notifyOnTimeout?: boolean;\n  /** Whether timeout aborts the macro. Defaults to true. */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Copy action.\n * Copies the current selection to the clipboard.\n *\n * @param opts - CopyActionOptions for timeout behavior configuration\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualCopy()\n * createVirtualCopy({ notifyOnTimeout: false, timeoutAborts: true })\n */\nexport function createVirtualCopy(opts: CopyActionOptions = {}): VirtualAction {\n  const { notifyOnTimeout = true, timeoutAborts = true } = opts;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    \"\\t\\t<string>Copy</string>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>IsDisclosed</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>CutCopyPaste</string>\",\n    ...renderTimeoutXml({ notifyOnTimeout, timeoutAborts }),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.cut.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderTimeoutXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Options for the Cut action.\n * Both timeout-related options are optional and default to their standard KM behavior.\n */\nexport interface CutActionOptions {\n  /** Whether to notify when a timeout occurs. Defaults to true. */\n  notifyOnTimeout?: boolean;\n  /** Whether timeout aborts the macro. Defaults to false. */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Cut action.\n * Cuts the current selection to the clipboard.\n *\n * @param opts - CutActionOptions for timeout behavior configuration\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualCut()\n * createVirtualCut({ notifyOnTimeout: false, timeoutAborts: true })\n */\nexport function createVirtualCut(opts: CutActionOptions = {}): VirtualAction {\n  const { notifyOnTimeout = true, timeoutAborts = false } = opts;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    \"\\t\\t<string>Cut</string>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>IsDisclosed</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>CutCopyPaste</string>\",\n    ...renderTimeoutXml({ notifyOnTimeout, timeoutAborts }),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/utils/template.xml.condition.window.ts\n\nimport type { KMCondition } from \"../virtual_actions/types/types.conditions\";\n\n/* ──────────────────────────────────────────────────────────────────────────\n *  Helpers to coerce   FrontWindowCondition / AnyWindowCondition\n *  into the exact key/value surface Keyboard Maestro serialises.\n * ────────────────────────────────────────────────────────────────────────── */\n\nconst FRONT_OP_TITLE_NEEDED = new Set([\n  \"TitleIs\",\n  \"TitleIsNot\",\n  \"TitleContains\",\n  \"TitleDoesNotContain\",\n  \"TitleMatches\",\n  \"TitleDoesNotMatch\",\n]);\n\nconst FRONT_OP_TITLE_OPTIONAL = new Set([\n  \"ExistsButTitleIsNot\",\n  \"ExistsButTitleDoesNotContain\",\n  \"ExistsButTitleDoesNotMatch\",\n]);\n\nexport function normaliseWindowCondition(raw: KMCondition): KMCondition {\n  if (\n    raw.ConditionType !== \"FrontWindow\" &&\n    raw.ConditionType !== \"AnyWindow\"\n  ) {\n    return raw;\n  }\n  // Shallow-copy to avoid mutating the caller’s object\n  const c: any = { ...raw };\n\n  // 1. Ensure IsFrontApplication and Application are mutually-valid\n\n  if (c.IsFrontApplication === undefined) c.IsFrontApplication = true;\n  if (c.IsFrontApplication) {\n    delete c.Application; // KM drops the dict entirely\n  } else {\n    // Guarantee an <Application><dict/></Application> – KM never serialises\n    // a bare <dict/>\n    if (!c.Application || Object.keys(c.Application).length === 0) {\n      c.Application = {}; // empty dict is fine – template.xml will emit <dict/>\n    }\n  }\n\n  // 2. Title key semantics (FrontWindow only)\n\n  if (c.ConditionType === \"FrontWindow\") {\n    const op = c.FrontWindowConditionType as string;\n    if (FRONT_OP_TITLE_NEEDED.has(op)) {\n      if (c.FrontWindowTitle === undefined) c.FrontWindowTitle = \"Untitled\";\n    } else if (FRONT_OP_TITLE_OPTIONAL.has(op)) {\n      if (c.FrontWindowTitle === undefined) c.FrontWindowTitle = \"\";\n    } else {\n      delete c.FrontWindowTitle; // KM omits key entirely\n    }\n  }\n\n  // 3. AnyWindow always has AnyWindowTitle (may be empty string)\n\n  if (c.ConditionType === \"AnyWindow\") {\n    if (c.AnyWindowTitle === undefined) c.AnyWindowTitle = \"\";\n  }\n  return c;\n}\n","//FILE: src/utils/template.xml.condition.script.ts\n\nimport type { KMCondition } from \"../virtual_actions/types/types.conditions\";\n\n/**\n * Normalises a ScriptCondition so IncludedVariables is always present.\n *\n * Rules:\n *  - If the user supplies IncludedVariables: use it verbatim.\n *  - If they set includeAllVariables flag: emit sentinel [\"9999\"].\n *  - If neither provided: emit [] (no variables).\n *\n * The helper property `includeAllVariables` is removed before serialisation.\n */\nexport function normaliseScriptCondition(raw: KMCondition): KMCondition {\n  if (raw.ConditionType !== \"Script\") return raw;\n  const c: any = { ...raw };\n\n  if (Array.isArray(c.IncludedVariables)) {\n    // Use explicit list exactly as given (empty / one / many / [\"9999\"])\n  } else if (c.includeAllVariables === true) {\n    c.IncludedVariables = [\"9999\"];\n  } else {\n    c.IncludedVariables = [];\n  }\n\n  delete c.includeAllVariables;\n  return c as KMCondition;\n}\n","//FILE: src/utils/template.xml.condition.ocr.ts\n\n/**\n * @fileoverview OCR (Optical Character Recognition) condition template utilities for Keyboard Maestro XML generation.\n *\n * This module provides utilities for normalizing and rendering OCR-based conditions in Keyboard Maestro macros.\n * OCR conditions allow macros to detect and respond to text found on screen through image recognition.\n *\n * @module template.xml.condition.ocr\n * @since 1.0.0\n */\n\nimport { screenAreaToXml } from \"./template.xml.ui\";\n\n/**\n * Normalizes an OCR condition object by removing unnecessary properties based on the image source type.\n *\n * OCR conditions in Keyboard Maestro can use different image sources (File, NamedClipboard, Screen, etc.),\n * and each source type requires different XML properties. This function ensures that only the relevant\n * properties are included in the final XML output by removing properties that don't apply to the\n * specified image source.\n *\n * ## Image Source Types and Their Properties:\n *\n * - **File**: Uses `ImagePath`, removes clipboard and screen area properties\n * - **NamedClipboard**: Uses clipboard properties, removes file path and screen area\n * - **Screen**: Uses `ImageScreenArea`, removes file path and clipboard properties\n * - **SystemClipboard/TriggerClipboard/Icon/Image**: Uses minimal properties, removes most others\n *\n * @param cond - The OCR condition object to normalize\n * @param cond.ConditionType - Must be \"OCR\" for this function to process the condition\n * @param cond.ImageSource - The source type for the OCR image (\"File\", \"NamedClipboard\", \"Screen\", etc.)\n * @param cond.ImagePath - File path (used when ImageSource is \"File\")\n * @param cond.ImageNamedClipboardName - Named clipboard identifier (used when ImageSource is \"NamedClipboard\")\n * @param cond.ImageNamedClipboardRedundandDisplayName - Display name for named clipboard\n * @param cond.ImageScreenArea - Screen area definition (used when ImageSource is \"Screen\")\n *\n * @returns The normalized condition object with unnecessary properties removed\n *\n * @example\n * ```typescript\n * // File-based OCR condition\n * const fileCondition = {\n *   ConditionType: \"OCR\",\n *   ImageSource: \"File\",\n *   ImagePath: \"/path/to/template.png\",\n *   ImageNamedClipboardName: \"unused\", // Will be removed\n *   ImageScreenArea: { type: \"ScreenAll\" } // Will be removed\n * };\n *\n * const normalized = normaliseOCRCondition(fileCondition);\n * // Result: { ConditionType: \"OCR\", ImageSource: \"File\", ImagePath: \"/path/to/template.png\" }\n * ```\n *\n * @example\n * ```typescript\n * // Screen-based OCR condition\n * const screenCondition = {\n *   ConditionType: \"OCR\",\n *   ImageSource: \"Screen\",\n *   ImagePath: \"/unused/path.png\", // Will be removed\n *   ImageScreenArea: { type: \"ScreenAll\" }\n * };\n *\n * const normalized = normaliseOCRCondition(screenCondition);\n * // Result: { ConditionType: \"OCR\", ImageSource: \"Screen\", ImageScreenArea: { type: \"ScreenAll\" } }\n * ```\n *\n * @example\n * ```typescript\n * // Non-OCR condition (passes through unchanged)\n * const otherCondition = { ConditionType: \"Variable\", Variable: \"MyVar\" };\n * const result = normaliseOCRCondition(otherCondition);\n * // Result: { ConditionType: \"Variable\", Variable: \"MyVar\" } (unchanged)\n * ```\n */\nexport function normaliseOCRCondition(cond: any): any {\n  // Only process OCR conditions, pass through others unchanged\n  if (cond.ConditionType !== \"OCR\") return cond;\n\n  const src = cond.ImageSource;\n\n  // Remove properties that don't apply to File-based image sources\n  if (src === \"File\") {\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n    delete cond.ImageScreenArea;\n  }\n  // Remove properties that don't apply to NamedClipboard-based image sources\n  else if (src === \"NamedClipboard\") {\n    delete cond.ImagePath;\n    delete cond.ImageScreenArea;\n  }\n  // Remove properties that don't apply to Screen-based image sources\n  else if (src === \"Screen\") {\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n  }\n  // Remove properties that don't apply to clipboard/icon/image sources\n  else if (\n    src === \"SystemClipboard\" ||\n    src === \"TriggerClipboard\" ||\n    src === \"Icon\" ||\n    src === \"Image\"\n  ) {\n    delete cond.ImagePath;\n    delete cond.ImageNamedClipboardName;\n    delete cond.ImageNamedClipboardRedundandDisplayName;\n    delete cond.ImageScreenArea;\n\n    // For default \"Image\" source, remove the ImageSource property entirely\n    if (src === \"Image\") {\n      delete cond.ImageSource;\n    }\n  }\n\n  // Clean up any undefined properties that may have been set\n  Object.keys(cond).forEach((k) => {\n    if (cond[k] === undefined) delete cond[k];\n  });\n\n  return cond;\n}\n\n/**\n * Renders the ImageScreenArea XML for OCR conditions that use screen-based image sources.\n *\n * This function generates the XML representation of a screen area definition specifically\n * for OCR conditions. It uses the shared `screenAreaToXml` utility and formats the output\n * with proper indentation for inclusion in Keyboard Maestro XML.\n *\n * The ImageScreenArea defines the region of the screen where OCR text detection should occur.\n * This is particularly useful for limiting OCR processing to specific areas of the screen\n * for better performance and accuracy.\n *\n * @param value - The screen area definition object\n * @param value.type - The type of screen area (\"ScreenAll\", \"ScreenMain\", \"ScreenWithMouse\", etc.)\n * @param value.frame - Optional frame coordinates for custom screen areas\n * @param value.screen - Optional screen identifier for multi-monitor setups\n *\n * @returns Array of XML strings representing the ImageScreenArea, properly indented for inclusion in conditions\n *\n * @example\n * ```typescript\n * // Full screen OCR area\n * const fullScreen = { type: \"ScreenAll\" };\n * const xml = renderOCRImageScreenAreaXml(fullScreen);\n * // Returns:\n * // [\n * //   \"\\t<key>ImageScreenArea</key>\",\n * //   \"\\t<dict>\",\n * //   \"\\t\\t<key>Type</key>\",\n * //   \"\\t\\t<string>ScreenAll</string>\",\n * //   \"\\t</dict>\"\n * // ]\n * ```\n *\n * @example\n * ```typescript\n * // Custom screen area with specific coordinates\n * const customArea = {\n *   type: \"ScreenCustom\",\n *   frame: { x: 100, y: 100, width: 500, height: 300 }\n * };\n * const xml = renderOCRImageScreenAreaXml(customArea);\n * // Returns properly formatted XML for the custom screen area\n * ```\n *\n * @example\n * ```typescript\n * // Main screen only (useful for multi-monitor setups)\n * const mainScreen = { type: \"ScreenMain\" };\n * const xml = renderOCRImageScreenAreaXml(mainScreen);\n * // Returns XML targeting only the main display\n * ```\n *\n * @see {@link screenAreaToXml} - The underlying utility function for screen area XML generation\n */\nexport function renderOCRImageScreenAreaXml(value: any): string[] {\n  // Use shared renderer for correct key mapping and consistent XML structure\n  const xml = screenAreaToXml(\"ImageScreenArea\", value);\n\n  // Split into lines, remove empty lines, and add proper indentation\n  return xml\n    .split(\"\\n\")\n    .filter(Boolean) // Remove empty lines\n    .map((l) => \"\\t\" + l); // Add one level of indentation for condition context\n}\n","//FILE: src/utils/template.xml.condition.pixel.ts\n\nimport type { KMCondition } from \"../virtual_actions/types\";\n\n/**\n * Normalizes a PixelCondition to ensure only valid combinations of PixelConditionType and PixelConditionTypeGood are serialized.\n * - Ensures types are not identical.\n * - Ensures mutually exclusive pairs are not generated.\n * - Optionally corrects or skips invalid combinations.\n */\nexport function normalisePixelCondition(raw: KMCondition): KMCondition {\n  if (raw.ConditionType !== \"Pixel\") return { ...raw };\n\n  const PAIRS: Record<string, string> = {\n    Is: \"IsNot\",\n    IsNot: \"IsBrighter\",\n    IsBrighter: \"IsDarker\",\n    IsDarker: \"IsMoreRed\",\n    IsMoreRed: \"IsLessRed\",\n    IsLessRed: \"IsMoreGreen\",\n    IsMoreGreen: \"IsLessGreen\",\n    IsLessGreen: \"IsMoreBlue\",\n    IsMoreBlue: \"IsLessBlueIsNot\",\n    IsLessBlue: \"IsLessBlue\", // self-pair\n  };\n\n  const validBad = new Set(Object.values(PAIRS));\n  const validGood = new Set(Object.keys(PAIRS));\n\n  let {\n    PixelConditionType: bad,\n    PixelConditionTypeGood: good,\n    ...rest\n  } = raw as any;\n\n  // 1) Fallback to known good values if either side is illegal\n  if (!validBad.has(bad)) bad = \"IsNot\";\n  if (!validGood.has(good)) good = \"Is\";\n\n  // 2) Realign mismatched pairs\n  if (PAIRS[good] !== bad) bad = PAIRS[good];\n\n  return {\n    ...(rest as KMCondition),\n    ConditionType: \"Pixel\",\n    PixelConditionType: bad,\n    PixelConditionTypeGood: good,\n  } as KMCondition;\n}\n","//FILE: src/utils/template.xml.condition.ts\n\nimport { kmKeyOrder } from \"./utils.xml\";\nimport { normaliseFoundImage, screenAreaToXml } from \"./template.xml.ui\";\nimport { normaliseWindowCondition } from \"./template.xml.condition.window\";\nimport { normaliseScriptCondition } from \"./template.xml.condition.script\";\nimport {\n  normaliseOCRCondition,\n  renderOCRImageScreenAreaXml,\n} from \"./template.xml.condition.ocr\";\nimport { normalisePixelCondition } from \"./template.xml.condition.pixel\";\nimport type { KMCondition } from \"../virtual_actions/types/types.conditions\";\n\n/**\n * Converts a single KMCondition object into its XML representation.\n * @param condition - The condition object to serialize.\n * @returns An XML string for the condition dictionary.\n */\nexport function conditionToXml(condition: KMCondition): string {\n  // If the condition is FoundImageCondition (actually 'ScreenImage' in KM)\n  if (condition.ConditionType === \"ScreenImage\") {\n    // Normalize it first\n    condition = normaliseFoundImage(condition);\n  }\n  // If the condition is OCRCondition, normalize it\n  if (condition.ConditionType === \"OCR\") {\n    condition = normaliseOCRCondition(condition);\n  }\n  // If the condition is FrontWindow or AnyWindow, normalize it for window conditions\n  if (\n    condition.ConditionType === \"FrontWindow\" ||\n    condition.ConditionType === \"AnyWindow\"\n  ) {\n    condition = normaliseWindowCondition(condition);\n  }\n  // If the condition is PixelCondition, normalize it for valid type pairs\n  if (condition.ConditionType === \"Pixel\") {\n    condition = normalisePixelCondition(condition);\n  }\n  // If the condition is ScriptCondition, normalize it\n  if (condition.ConditionType === \"Script\") {\n    condition = normaliseScriptCondition(condition);\n  }\n\n  const lines: string[] = [\"<dict>\"];\n  const orderedKeys = kmKeyOrder(Object.keys(condition), \"condition\");\n\n  for (const key of orderedKeys) {\n    const value = (condition as any)[key];\n    if (value === undefined || value === null) continue;\n\n    // Special handling for ImageScreenArea in OCRCondition\n    if (\n      condition.ConditionType === \"OCR\" &&\n      key === \"ImageScreenArea\" &&\n      typeof value === \"object\" &&\n      \"type\" in value\n    ) {\n      renderOCRImageScreenAreaXml(value).forEach((l) => lines.push(l));\n      continue;\n    }\n\n    // --- Special handling for ScreenArea / ImageScreenArea in ScreenImage conditions ---\n    if (\n      condition.ConditionType === \"ScreenImage\" &&\n      (key === \"ScreenArea\" || key === \"ImageScreenArea\") &&\n      typeof value === \"object\" &&\n      \"type\" in value\n    ) {\n      // Re-use existing renderer so ordering for complex variants matches KM.\n      const xml = screenAreaToXml(key, value);\n      xml\n        .split(\"\\n\")\n        .filter(Boolean)\n        .forEach((l) => lines.push(\"\\t\" + l));\n      continue;\n    }\n\n    // Special handling for MouseButtonCondition.Pressed\n    if (condition.ConditionType === \"MouseButton\" && key === \"Pressed\") {\n      // Only serialize if false; KM omits if true\n      if (value === false) {\n        lines.push(`\\t<key>Pressed</key>`);\n        lines.push(`\\t<false/>`);\n      }\n      continue;\n    }\n\n    // Generic rendering\n    lines.push(`\\t<key>${key}</key>`);\n    if (typeof value === \"string\") {\n      // KM uses a self-closing form for empty strings\n      lines.push(value === \"\" ? \"\\t<string/>\" : `\\t<string>${value}</string>`);\n    } else if (typeof value === \"number\") {\n      lines.push(`\\t<integer>${value}</integer>`);\n    } else if (typeof value === \"boolean\") {\n      lines.push(`\\t${value ? \"<true/>\" : \"<false/>\"}`);\n    } else if (Array.isArray(value)) {\n      lines.push(\"\\t<array>\");\n      value.forEach((item) => lines.push(`\\t\\t<string>${item}</string>`));\n      lines.push(\"\\t</array>\");\n    } else if (typeof value === \"object\") {\n      // For nested dicts (Application, ScreenArea…) use canonical ordering\n      lines.push(\"\\t<dict>\");\n      const nestedKeys = kmKeyOrder(\n        Object.keys(value),\n        key === \"Application\" ? \"application\" : undefined,\n      );\n      for (const subKey of nestedKeys) {\n        const subValue = value[subKey];\n        if (subValue === undefined || subValue === null) continue;\n        lines.push(`\\t\\t<key>${subKey}</key>`);\n        lines.push(\n          typeof subValue === \"string\" && subValue === \"\"\n            ? \"\\t\\t<string/>\"\n            : `\\t\\t<string>${subValue}</string>`,\n        );\n      }\n      lines.push(\"\\t</dict>\");\n    }\n  }\n  lines.push(\"</dict>\");\n  return lines.join(\"\\n\");\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.if.ts\n\nimport { conditionToXml } from \"../utils/template.xml.condition\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport type { VirtualAction } from \"./types\";\nimport type { ConditionListMatch } from \"./types/types.system\";\nimport type { KMCondition } from \"./types/types.conditions\";\n/**\n * Represents the top-level structure for an If/Then/Else action.\n * @property conditions - An array of condition objects to evaluate.\n * @property match - How to evaluate the list of conditions (e.g., all must be true).\n * @property then - An array of VirtualActions to execute if the conditions are met.\n * @property else - An optional array of VirtualActions to execute otherwise.\n * @property timeoutAborts - Whether a timeout in a nested action should abort the whole macro.\n */\nexport interface IfThenElseOptions {\n  conditions: KMCondition[];\n  match?: ConditionListMatch;\n  then: VirtualAction[];\n  else?: VirtualAction[];\n  timeoutAborts?: boolean;\n}\n\n/**\n * Creates a virtual \"If/Then/Else\" action for Keyboard Maestro.\n * This is one of the most powerful and complex actions, allowing for conditional logic flows.\n *\n * @param opts - The configuration for the If/Then/Else block.\n * @returns A VirtualAction object that can be executed in a macro.\n *\n * @example\n * // If the front window of Finder is named \"Downloads\", activate Chrome.\n * createVirtualIf({\n *   match: 'All',\n *   conditions: [\n *     {\n *       ConditionType: 'FrontWindow',\n *       IsFrontApplication: false,\n *       FrontWindowConditionType: 'TitleIs',\n *       FrontWindowTitle: 'Downloads',\n *       Application: {\n *         BundleIdentifier: 'com.apple.finder',\n *         Name: 'Finder'\n *       }\n *     }\n *   ],\n *   then: [\n *     createVirtualActivate({\n *       target: 'Specific',\n *       specific: { BundleIdentifier: 'com.google.Chrome', Name: 'Google Chrome' }\n *     })\n *   ],\n *   else: [\n *     createVirtualNotification({ title: 'Condition Not Met', body: 'The front window was not \"Downloads\".' })\n *   ]\n * });\n */\nexport function createVirtualIf(opts: IfThenElseOptions): VirtualAction {\n  const {\n    conditions,\n    match = \"All\",\n    then,\n    else: elseActions = [],\n    timeoutAborts = true,\n  } = opts;\n\n  // Generate XML for nested actions\n  const thenXml = then.map((a) => a.toXml()).join(\"\\n\");\n  const elseXml = elseActions.map((a) => a.toXml()).join(\"\\n\");\n\n  // Generate XML for conditions array\n  const conditionsArray =\n    conditions.length > 0\n      ? conditions\n          .map(conditionToXml)\n          .map((xml) =>\n            xml\n              .split(\"\\n\")\n              .map((line) => \"\\t\\t\\t\" + line)\n              .join(\"\\n\"),\n          )\n          .join(\"\\n\")\n      : \"\";\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>ActionUID</key>\",\n    `\\t\\t<integer>${Math.floor(Date.now() / 1000)}</integer>`,\n    \"\\t\\t<key>Conditions</key>\",\n    \"\\t\\t<dict>\",\n    \"\\t\\t\\t<key>ConditionList</key>\",\n    conditionsArray ? \"\\t\\t\\t<array>\" : \"\\t\\t\\t<array/>\",\n    ...(conditionsArray ? [conditionsArray, \"\\t\\t\\t</array>\"] : []),\n    \"\\t\\t\\t<key>ConditionListMatch</key>\",\n    `\\t\\t\\t<string>${match}</string>`,\n    \"\\t\\t</dict>\",\n    \"\\t\\t<key>ElseActions</key>\",\n    elseXml ? \"\\t\\t<array>\" : \"\\t\\t<array/>\",\n    ...(elseXml\n      ? [\n          elseXml\n            .split(\"\\n\")\n            .map((line) => \"\\t\\t\\t\" + line)\n            .join(\"\\n\"),\n          \"\\t\\t</array>\",\n        ]\n      : []),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>IfThenElse</string>\",\n    \"\\t\\t<key>ThenActions</key>\",\n    thenXml ? \"\\t\\t<array>\" : \"\\t\\t<array/>\",\n    ...(thenXml\n      ? [\n          thenXml\n            .split(\"\\n\")\n            .map((line) => \"\\t\\t\\t\" + line)\n            .join(\"\\n\"),\n          \"\\t\\t</array>\",\n        ]\n      : []),\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    `\\t\\t${timeoutAborts ? \"<true/>\" : \"<false/>\"}`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/utils/template.xml.application.ts\n\nimport { escapeForXml, kmKeyOrder } from \"./utils.xml\";\nimport type {\n  SpecificAppOptions,\n  ApplicationTarget,\n  MoveAndResizePreset,\n} from \"../virtual_actions/types/types.ui\";\n\n/**\n * Generates the XML for an Application key-value pair used in KM actions.\n * This is shared between Quit, ManipulateWindow, and other actions that target applications.\n *\n * @param target - Whether to target the front app or a specific one\n * @param specific - If targeting a specific app, provide identification options\n * @returns Array of XML lines for the Application section\n */\nexport function generateApplicationXml(\n  target: ApplicationTarget = \"Front\",\n  specific: SpecificAppOptions = {},\n): string[] {\n  if (target === \"Specific\") {\n    const { name, bundleIdentifier, path, match, newFile } = specific;\n    // Create object and use canonical ordering\n    const appData: any = {};\n    if (bundleIdentifier) appData.BundleIdentifier = bundleIdentifier;\n    if (match) appData.Match = match;\n    if (name) appData.Name = name;\n    if (newFile) appData.NewFile = newFile;\n    if (path) appData.Path = path;\n    const orderedKeys = kmKeyOrder(Object.keys(appData), \"application\");\n    return [\n      \"<dict>\",\n      ...orderedKeys.flatMap((key) => [\n        `<key>${key}</key>`,\n        `<string>${escapeForXml(appData[key])}</string>`,\n      ]),\n      \"</dict>\",\n    ];\n  } else {\n    // Frontmost app: empty dict\n    return [\"<dict/>\"];\n  }\n}\n\n/**\n * Gets the default expressions for MoveAndResize presets.\n * Returns [horizontal, vertical, width, height] expressions.\n */\nexport function getMoveAndResizeDefaults(\n  preset: MoveAndResizePreset,\n): [string, string, string, string] {\n  switch (preset) {\n    case \"Custom\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)\",\n        \"SCREENVISIBLE(Main,Height)\",\n      ];\n    case \"FullScreen\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)\",\n        \"SCREENVISIBLE(Main,Height)\",\n      ];\n    case \"LeftColumn\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)\",\n      ];\n    case \"RightColumn\":\n      return [\n        \"SCREENVISIBLE(Main,MidX)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)\",\n      ];\n    case \"TopHalf\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    case \"BottomHalf\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,MidY)\",\n        \"SCREENVISIBLE(Main,Width)\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    case \"TopLeft\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    case \"TopRight\":\n      return [\n        \"SCREENVISIBLE(Main,MidX)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    case \"BottomLeft\":\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,MidY)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    case \"BottomRight\":\n      return [\n        \"SCREENVISIBLE(Main,MidX)\",\n        \"SCREENVISIBLE(Main,MidY)\",\n        \"SCREENVISIBLE(Main,Width)*50%\",\n        \"SCREENVISIBLE(Main,Height)*50%\",\n      ];\n    default:\n      return [\n        \"SCREENVISIBLE(Main,Left)\",\n        \"SCREENVISIBLE(Main,Top)\",\n        \"SCREENVISIBLE(Main,Width)\",\n        \"SCREENVISIBLE(Main,Height)\",\n      ];\n  }\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.manipulateWindow.ts\n\nimport chalk from \"chalk\";\nimport { formatXmlAction, escapeForXml, kmKeyOrder } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport {\n  generateApplicationXml,\n  getMoveAndResizeDefaults,\n} from \"../utils/template.xml.application\";\nimport type { VirtualAction } from \"./types\";\nimport type {\n  SpecificAppOptions,\n  ApplicationTarget,\n  WindowManipulation,\n  MoveAndResizePreset,\n  WindowTarget,\n} from \"./types/types.ui\";\nimport type { StopOnFailure, NotifyOnFailure } from \"./types/types.system\";\n\n/**\n * Options for configuring a ManipulateWindow action.\n */\nexport interface ManipulateWindowOptions {\n  /**\n   * The type of window manipulation to perform.\n   * @default \"Center\"\n   */\n  manipulation?: WindowManipulation;\n\n  /**\n   * For ScaleBy, ResizeBy, ResizeTo, MoveBy, MoveTo operations.\n   * Should be a 2-element array [horizontal, vertical] or [width, height].\n   */\n  values?: [string, string];\n\n  /**\n   * For MoveAndResize operations, the preset configuration to use.\n   * @default \"Custom\"\n   */\n  moveAndResizePreset?: MoveAndResizePreset;\n\n  /**\n   * For MoveAndResize Custom operations: 4-element array [horizontal, vertical, width, height]\n   * For CenterAt operations: 3-element array [x, y, z]\n   */\n  customValues?: [string, string, string] | [string, string, string, string];\n\n  /**\n   * Which window(s) to target.\n   * @default \"FrontWindow\"\n   */\n  windowTarget?: WindowTarget;\n\n  /**\n   * For window targeting that requires a string parameter.\n   */\n  windowIdentifier?: string;\n\n  /**\n   * For window targeting that requires an integer parameter.\n   */\n  windowIndex?: number;\n\n  /**\n   * Application targeting (not used for KMWindowID or KMLastWindow).\n   * @default \"Front\"\n   */\n  applicationTarget?: ApplicationTarget;\n\n  /**\n   * If targeting a specific application.\n   */\n  specificApplication?: SpecificAppOptions;\n\n  /**\n   * If false, failure does not abort macro (default true).\n   */\n  stopOnFailure?: StopOnFailure;\n\n  /**\n   * If false, do not notify on failure (default true).\n   */\n  notifyOnFailure?: NotifyOnFailure;\n}\n\n/**\n * Constructs a VirtualAction that manipulates windows in Keyboard Maestro.\n * This function generates the correct XML fragment for the Manipulate Window action,\n * supporting all permutations of window manipulation, targeting, and application options.\n *\n * The function is highly modular: each XML sub-block is generated by a dedicated helper,\n * making the final XML structure easy to read and maintain.\n *\n * @param opts - ManipulateWindowOptions specifying the manipulation type, window/app targeting, and parameters.\n * @returns A VirtualAction object with a toXml() method for rendering the KM XML.\n */\nexport function createVirtualManipulateWindow(\n  opts: ManipulateWindowOptions = {},\n): VirtualAction {\n  const {\n    manipulation = \"CenterWindow\",\n    values = [\"0\", \"0\"],\n    moveAndResizePreset = \"Custom\",\n    customValues,\n    windowTarget = \"FrontWindow\",\n    windowIdentifier = \"\",\n    windowIndex = 1,\n    applicationTarget = \"Front\",\n    specificApplication = {},\n    stopOnFailure,\n    notifyOnFailure,\n  } = opts;\n\n  // Use the manipulation value directly (now matches KM action string)\n  const actionName = manipulation;\n\n  // --- Compute all expression values up front ---\n  let horizontal = values[0],\n    vertical = values[1],\n    width = values[0],\n    height = values[1];\n  if (\n    [\n      \"ResizeBy\",\n      \"ResizeTo\",\n      \"ResizeWindowByPercent\",\n      \"ScaleBy\",\n      \"MoveBy\",\n      \"MoveTo\",\n      \"MoveWindowBy\",\n      \"MoveWindowTo\",\n      \"MoveAndResize\",\n      \"Center\",\n      \"CenterAt\",\n      \"Close\",\n      \"Zoom\",\n      \"Minimize\",\n      \"ReallyMinimizeWindow\",\n      \"Unminimize\",\n      \"ToggleMinimize\",\n      \"BringToFront\",\n      \"SelectWindow\",\n    ].includes(actionName)\n  ) {\n    if (manipulation === \"MoveAndResize\") {\n      let expressions: [string, string, string, string];\n\n      if (customValues && customValues.length === 4) {\n        // 4-element array: full control over horizontal, vertical, width, height\n        expressions = [\n          customValues[0], // horizontal\n          customValues[1], // vertical\n          customValues[2], // width\n          customValues[3], // height\n        ];\n      } else {\n        // Use preset defaults\n        expressions = getMoveAndResizeDefaults(moveAndResizePreset);\n      }\n\n      horizontal = expressions[0];\n      vertical = expressions[1];\n      width = expressions[2];\n      height = expressions[3];\n    } else if (\n      manipulation === \"CenterWindowAt\" &&\n      customValues &&\n      customValues.length >= 3\n    ) {\n      // CenterAt uses 3-element array: [x, y, z] where z might be radius or size\n      horizontal = customValues[0]; // x position\n      vertical = customValues[1]; // y position\n      width = customValues[2]; // size or radius\n      height = customValues[2]; // same as width for center operations\n    } else if (customValues && customValues.length >= 2) {\n      horizontal = customValues[0];\n      vertical = customValues[1];\n    }\n  }\n\n  // --- Build the XML lines in canonical order ---\n  /**\n   * The canonical order for ManipulateWindow is:\n   * Action, ActionUID, HeightExpression, HorizontalExpression, MacroActionType, TargetApplication, Targeting, TargetingType, VerticalExpression, WidthExpression, WindowIndexExpression, WindowName, WindowID (if present)\n   * (WindowID only for KMWindowID)\n   */\n  const getWindowIndexString = () => {\n    if (windowTarget === \"FrontWindow\") return \"2\";\n    if (windowTarget === \"WindowIndex\") return String(windowIndex);\n    return \"\";\n  };\n\n  // TargetApplication block: present for all except KMWindowID/KMLastWindow\n  let targetAppXml: string[] = [];\n  if (windowTarget !== \"KMWindowID\" && windowTarget !== \"KMLastWindow\") {\n    if (applicationTarget === \"Specific\") {\n      targetAppXml = [\n        \"\\t\\t<key>TargetApplication</key>\",\n        ...generateApplicationXml(applicationTarget, specificApplication).map(\n          (line) => \"\\t\\t\" + line,\n        ),\n      ];\n    } else {\n      targetAppXml = [\"\\t\\t<key>TargetApplication</key>\", \"\\t\\t<dict/>\"];\n    }\n  }\n\n  // Build XML as an array of lines, not a joined string\n  const xmlLines: string[] = [\n    \"\\t<dict>\",\n    // Action\n    \"\\t\\t<key>Action</key>\",\n    `\\t\\t<string>${actionName}</string>`,\n    // ActionUID (use generateActionUIDXml for block)\n    ...generateActionUIDXml().map((l) => \"\\t\\t\" + l.trim()),\n    // HeightExpression\n    \"\\t\\t<key>HeightExpression</key>\",\n    `\\t\\t<string>${escapeForXml(height)}</string>`,\n    // HorizontalExpression\n    \"\\t\\t<key>HorizontalExpression</key>\",\n    `\\t\\t<string>${escapeForXml(horizontal)}</string>`,\n    // MacroActionType\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>ManipulateWindow</string>\",\n    // Add failure handling options (right after MacroActionType, matching ground truth)\n    ...(notifyOnFailure !== undefined\n      ? renderNotifyOnFailureXml(notifyOnFailure)\n      : []),\n    ...(stopOnFailure !== undefined\n      ? renderStopOnFailureXml(stopOnFailure)\n      : []),\n    // TargetApplication (present for all except KMWindowID/KMLastWindow)\n    ...targetAppXml,\n    // Targeting\n    \"\\t\\t<key>Targeting</key>\",\n    `\\t\\t<string>${windowTarget}</string>`,\n    // TargetingType (only for non-KMWindowID/KMLastWindow)\n    ...(windowTarget !== \"KMWindowID\" && windowTarget !== \"KMLastWindow\"\n      ? [\n          \"\\t\\t<key>TargetingType</key>\",\n          `\\t\\t<string>${applicationTarget}</string>`,\n        ]\n      : []),\n    // VerticalExpression\n    \"\\t\\t<key>VerticalExpression</key>\",\n    `\\t\\t<string>${escapeForXml(vertical)}</string>`,\n    // WidthExpression\n    \"\\t\\t<key>WidthExpression</key>\",\n    `\\t\\t<string>${escapeForXml(width)}</string>`,\n    // --- Window-specific keys in correct order ---\n    ...(windowTarget === \"KMWindowID\"\n      ? [\n          \"\\t\\t<key>WindowID</key>\",\n          `\\t\\t<string>${escapeForXml(windowIdentifier)}</string>`,\n          \"\\t\\t<key>WindowIndexExpression</key>\",\n          `\\t\\t<string></string>`,\n          \"\\t\\t<key>WindowName</key>\",\n          `\\t\\t<string></string>`,\n        ]\n      : windowTarget === \"WindowIndex\"\n        ? [\n            \"\\t\\t<key>WindowIndexExpression</key>\",\n            `\\t\\t<string>${windowIndex}</string>`,\n            \"\\t\\t<key>WindowName</key>\",\n            `\\t\\t<string></string>`,\n          ]\n        : windowTarget === \"NamedWindow\" ||\n            windowTarget === \"WindowNameContaining\" ||\n            windowTarget === \"WindowNameMatching\"\n          ? [\n              \"\\t\\t<key>WindowIndexExpression</key>\",\n              `\\t\\t<string></string>`,\n              \"\\t\\t<key>WindowName</key>\",\n              `\\t\\t<string>${escapeForXml(windowIdentifier)}</string>`,\n            ]\n          : [\n              // Default: FrontWindow, KMLastWindow, etc.\n              \"\\t\\t<key>WindowIndexExpression</key>\",\n              `\\t\\t<string>2</string>`,\n              \"\\t\\t<key>WindowName</key>\",\n              `\\t\\t<string></string>`,\n            ]),\n    \"\\t</dict>\",\n  ];\n\n  /**\n   * Renders the fully-formed Keyboard Maestro XML for this ManipulateWindow action.\n   * @returns {string} The formatted XML string.\n   */\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.pause.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport chalk from \"chalk\";\n\n/**\n * Options for building a Pause action.\n */\nexport interface PauseOptions {\n  /**\n   * Duration to pause (in the specified unit).\n   * Defaults to 0.05 if omitted.\n   */\n  time?: number;\n  /**\n   * Unit for the duration. Valid values:\n   * - \"Hours\"\n   * - \"Minutes\"\n   * - \"Hundredths\"\n   * Cannot be specified without `time`. Defaults to seconds (no XML key).\n   */\n  unit?: \"Hours\" | \"Minutes\" | \"Seconds\" | \"Hundredths\";\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Pause action.\n * @param opts - PauseOptions to configure the duration and unit.\n * @returns A VirtualAction emitting the correct KM XML when `toXml()` is called.\n */\nexport function createVirtualPause(opts: PauseOptions = {}): VirtualAction {\n  console.log(\n    chalk.cyan(`[VirtualAction] Pause:`),\n    chalk.grey(JSON.stringify(opts)),\n  );\n  // Determine if `time` was explicitly provided by the user\n  const hasTime = Object.prototype.hasOwnProperty.call(opts, \"time\");\n  const { time = 0.05, unit } = opts;\n\n  if (!hasTime && unit !== undefined) {\n    throw new Error(\"Cannot specify 'unit' without 'time'.\");\n  }\n\n  const xmlLines = [\n    `\\t<dict>`,\n    ...generateActionUIDXml(),\n    `\\t\\t<key>MacroActionType</key>`,\n    `\\t\\t<string>Pause</string>`,\n    `\\t\\t<key>Time</key>`,\n    `\\t\\t<string>${time}</string>`,\n    `\\t\\t<key>TimeOutAbortsMacro</key>`,\n    `\\t\\t<true/>`,\n    // Only include Unit if provided and not seconds (seconds is default and has no XML key)\n    unit && unit !== \"Seconds\" ? `\\t\\t<key>Unit</key>` : ``,\n    unit && unit !== \"Seconds\" ? `\\t\\t<string>${unit}</string>` : ``,\n    `\\t</dict>`,\n  ].filter(Boolean);\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.quit.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { generateApplicationXml } from \"../utils/template.xml.application\";\nimport type { VirtualAction } from \"./types\";\nimport type { SpecificAppOptions, ApplicationTarget } from \"./types/types.ui\";\n\n/**\n * Variants for quitting applications.\n */\nexport type QuitVariant = /** Gracefully quit without relaunch */ \"Quit\";\n/** Quit then immediately relaunch */ (\"QuitRelaunch\");\n/** Force quit without relaunch */ (\"ForceQuit\");\n/** Force quit then relaunch */ (\"ForceQuitRelaunch\");\n\n/**\n * Options for building a Quit action.\n */\nexport interface QuitOptions {\n  /**\n   * Which variant of quit to perform.\n   * @default \"Quit\"\n   */\n  variant?: QuitVariant;\n  /**\n   * Whether to target the frontmost app or a specific one.\n   * @default \"Front\"\n   */\n  target?: ApplicationTarget;\n  /**\n   * If targeting a specific app, provide identification and relaunch options.\n   */\n  specific?: SpecificAppOptions;\n  /**\n   * Whether timeout aborts the macro.\n   * @default true\n   */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction that quits or (optionally) relaunches applications.\n */\nexport function createVirtualQuit(opts: QuitOptions = {}): VirtualAction {\n  const {\n    variant = \"Quit\",\n    target = \"Front\",\n    specific = {},\n    timeoutAborts = true,\n  } = opts;\n\n  // Build the <dict> for the Application key with canonical ordering\n  const appLines = generateApplicationXml(target, specific);\n\n  // Assemble the full XML fragment\n  const xmlLines = [\n    \"\\t<dict>\",\n    // KM ordering for QuitSpecificApp puts Action BEFORE ActionUID.\n    \"\\t\\t<key>Action</key>\",\n    `\\t\\t<string>${variant}</string>`,\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>Application</key>\",\n    ...appLines.map((line) => `\\t\\t${line}`),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>QuitSpecificApp</string>\",\n    \"\\t\\t<key>Target</key>\",\n    `\\t\\t<string>${target}</string>`,\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    timeoutAborts ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/utils/template.xml.text.ts\n\nimport type { ProcessingMode } from \"../virtual_actions/types\";\n\n/**\n * Renders XML key/value pairs for an action that has a “Text” style source\n * with an optional TextProcessingMode flag.  When `mode` is undefined we omit\n * the key (which Keyboard Maestro treats as “Process Text Normally”).\n *\n * @param text Raw text content (may be empty string).\n * @param mode Optional processing mode.\n */\nexport function renderTextWithProcessingMode(\n  text: string,\n  mode?: ProcessingMode,\n): string[] {\n  const out: string[] = [];\n  out.push(\"\\t\\t<key>Text</key>\");\n  out.push(text === \"\" ? \"\\t\\t<string/>\" : `\\t\\t<string>${text}</string>`);\n  if (mode) {\n    out.push(\"\\t\\t<key>TextProcessingMode</key>\");\n    out.push(`\\t\\t<string>${mode}</string>`);\n  }\n  return out;\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.switchCase.ts\n\nimport type { VirtualAction } from \"./types\";\nimport type { ProcessingMode } from \"./types/types.data\";\nimport { renderTextWithProcessingMode } from \"../utils/template.xml.text\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\n\n/**\n * The “Switch / Case” action evaluates a *source* value against a list of textual\n * comparisons. Each case has an operator (\"Contains\", \"Is\", \"IsAfter\", \"Otherwise\", etc.)\n * and an optional TestValue string plus an array of nested actions.\n *\n * XML shape (minimal):\n *\n * <dict>\n *   <key>ActionUID</key><integer>...</integer>\n *   <key>CaseEntries</key>\n *   <array>\n *     <dict>\n *       <key>Actions</key><array/>         ← nested actions\n *       <key>ConditionType</key><string>Contains</string>\n *       <key>TestValue</key><string>Example</string>\n *     </dict>\n *   </array>\n *   <key>MacroActionType</key><string>Switch</string>\n *   <key>Source</key><string>Clipboard</string>\n * </dict>\n */\n/* -------------------------------------------------------------------------- */\n/*  Public Types                                                              */\n/* -------------------------------------------------------------------------- */\n\n/** Operators supported by Keyboard Maestro's Switch/Case (extended TextualConditionOperator). */\nexport type SwitchCaseOperator =\n  | \"IsEmpty\"\n  | \"IsNotEmpty\"\n  | \"Is\"\n  | \"IsNot\"\n  | \"Contains\"\n  | \"DoesNotContain\"\n  | \"StartsWith\"\n  | \"EndsWith\"\n  | \"IsBefore\"\n  | \"IsAfter\"\n  | \"Matches\"\n  | \"DoesNotMatch\"\n  | \"LessThan\"\n  | \"LessThanOrEqual\"\n  | \"Equal\"\n  | \"GreaterThanOrEqual\"\n  | \"GreaterThan\"\n  | \"NotEqual\"\n  | \"Otherwise\";\n/** Source selector for the switch. */\nexport type SwitchSource =\n  | \"Clipboard\"\n  | \"NamedClipboard\"\n  | \"TriggerClipboard\"\n  | \"Variable\"\n  | \"Text\"\n  | \"Calculation\"\n  | \"EnvironmentVariable\"\n  | \"File\";\n\nexport interface SwitchCaseEntry {\n  operator: SwitchCaseOperator;\n  /** Comparison text. Can be empty string; KM always serialises the key. */\n  testValue?: string;\n  /** Nested actions executed when this case matches. */\n  actions?: VirtualAction[];\n}\n\nexport interface SwitchCaseOptions {\n  /** Source value used for comparison. */\n  source: SwitchSource;\n  /**\n   * For `source === \"Variable\"`.\n   * Keyboard Maestro expects <key>Variable</key><string>${name}</string>\n   */\n  variable?: string;\n  /** For `source === \"Text\"`. */\n  text?: string;\n  /** For `source === \"Text\"`, optionally control processing mode. Omit for “Process Text Normally”. */\n  textProcessingMode?: ProcessingMode;\n  /** For `source === \"Calculation\"`. */\n  calculation?: string;\n  /** For `source === \"EnvironmentVariable\"`. */\n  environmentVariable?: string;\n  /** For `source === \"File\"`. */\n  path?: string;\n  /** For `source === \"NamedClipboard\"`. (UID + display name not yet reverse-engineered – user supplies raw string.) */\n  namedClipboard?: {\n    uid: string;\n    redundantDisplayName: string;\n  };\n  /** Case list. Must contain at least one entry; GUI always has one. */\n  cases: SwitchCaseEntry[];\n}\n\n/* -------------------------------------------------------------------------- */\n/*  Implementation                                                            */\n/* -------------------------------------------------------------------------- */\n\nexport function createVirtualSwitchCase(\n  opts: SwitchCaseOptions,\n): VirtualAction {\n  const {\n    source,\n    variable,\n    text = \"\",\n    textProcessingMode,\n    calculation = \"\",\n    environmentVariable = \"\",\n    path = \"\",\n    namedClipboard,\n    cases,\n  } = opts;\n  if (!cases || cases.length === 0) {\n    throw new Error(\"SwitchCase requires at least one case entry.\");\n  }\n\n  // Serialise case entries\n  const caseXml = cases\n    .map((c) => {\n      const actionsXml = (c.actions ?? [])\n        .map((a) =>\n          a\n            .toXml()\n            .split(\"\\n\")\n            .map((line) => \"\\t\\t\\t\\t\\t\" + line)\n            .join(\"\\n\"),\n        )\n        .join(\"\\n\");\n      const actionsSection =\n        c.actions && c.actions.length\n          ? [\"\\t\\t\\t\\t<array>\", actionsXml, \"\\t\\t\\t\\t</array>\"].join(\"\\n\")\n          : \"\\t\\t\\t\\t<array/>\";\n\n      // KM always serialises TestValue; use empty string if undefined\n      const testValue = c.testValue ?? \"\";\n\n      return [\n        \"\\t\\t\\t<dict>\",\n        \"\\t\\t\\t\\t<key>Actions</key>\",\n        actionsSection,\n        \"\\t\\t\\t\\t<key>ConditionType</key>\",\n        `\\t\\t\\t\\t<string>${c.operator}</string>`,\n        \"\\t\\t\\t\\t<key>TestValue</key>\",\n        testValue === \"\"\n          ? \"\\t\\t\\t\\t<string/>\"\n          : `\\t\\t\\t\\t<string>${testValue}</string>`,\n        \"\\t\\t\\t</dict>\",\n      ].join(\"\\n\");\n    })\n    .join(\"\\n\");\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>ActionUID</key>\",\n    `\\t\\t<integer>${Math.floor(Date.now() / 1000)}</integer>`,\n    // For Calculation sources KM serialises the <Calculation> key *before* CaseEntries.\n    ...(source === \"Calculation\"\n      ? [\n          \"\\t\\t<key>Calculation</key>\",\n          calculation ? `\\t\\t<string>${calculation}</string>` : \"\\t\\t<string/>\",\n        ]\n      : []),\n    \"\\t\\t<key>CaseEntries</key>\",\n    cases.length ? \"\\t\\t<array>\" : \"\\t\\t<array/>\",\n    ...(cases.length ? [caseXml, \"\\t\\t</array>\"] : []),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Switch</string>\",\n    // For File sources KM places <Path> *before* <Source>\n    ...(source === \"File\"\n      ? [\n          \"\\t\\t<key>Path</key>\",\n          path === \"\" ? \"\\t\\t<string/>\" : `\\t\\t<string>${path}</string>`,\n        ]\n      : []),\n    \"\\t\\t<key>Source</key>\",\n    `\\t\\t<string>${source}</string>`,\n    // Source-specific keys\n    ...(source === \"Variable\"\n      ? [\n          \"\\t\\t<key>Variable</key>\",\n          variable && variable !== \"\"\n            ? `\\t\\t<string>${variable}</string>`\n            : \"\\t\\t<string/>\",\n        ]\n      : source === \"Text\"\n        ? renderTextWithProcessingMode(text, textProcessingMode)\n        : source === \"EnvironmentVariable\"\n          ? [\n              \"\\t\\t<key>Text</key>\",\n              environmentVariable === \"\"\n                ? \"\\t\\t<string/>\"\n                : `\\t\\t<string>${environmentVariable}</string>`,\n            ]\n          : source === \"NamedClipboard\" && namedClipboard\n            ? [\n                \"\\t\\t<key>ClipboardSourceNamedClipboardUID</key>\",\n                `\\t\\t<string>${namedClipboard.uid}</string>`,\n                \"\\t\\t<key>ClipboardSourceNamedClipboardRedundantDisplayName</key>\",\n                `\\t\\t<string>${namedClipboard.redundantDisplayName}</string>`,\n              ]\n            : []),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.typeKeystroke.ts\n\nimport chalk from \"chalk\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { normalizeAppleScriptShortcut } from \"../utils/utils.keystroke\";\nimport type { VirtualAction } from \"./types\";\nimport {\n  createVirtualPause,\n  type PauseOptions,\n} from \"./kmjs.virtualAction.pause\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\n\n/**\n * Options for building a TypeKeystroke action.\n */\nexport interface TypeKeystrokeOptions {\n  /** Keystroke to simulate. Can be a shortcut string, mask→key map, or keycode number. */\n  keystroke: string | Record<number, number> | number;\n  /** Whether to hold the key down. Defaults to false. */\n  pressAndHold?: boolean;\n  /** Whether to press and repeat. Defaults to false. */\n  pressAndRepeat?: boolean;\n  /** Duration to hold key in seconds. Implies pressAndHold=true. */\n  holdTime?: number;\n}\n\n/**\n * Constructs a VirtualAction for simulating keystrokes in Keyboard Maestro.\n */\nexport function createVirtualTypeKeystroke(\n  opts: TypeKeystrokeOptions,\n): VirtualAction {\n  console.log(\n    chalk.cyan(\"[VirtualAction] TypeKeystroke:\"),\n    chalk.grey(JSON.stringify(opts)),\n  );\n\n  const {\n    keystroke,\n    pressAndHold = false,\n    pressAndRepeat = false,\n    holdTime,\n  } = opts;\n\n  // Validate incompatible options\n  if (pressAndRepeat && (pressAndHold || holdTime !== undefined)) {\n    throw new Error(\n      \"pressAndRepeat cannot be combined with pressAndHold or holdTime\",\n    );\n  }\n\n  // Determine if we should use hold flow\n  const useHold = holdTime !== undefined ? true : pressAndHold;\n\n  // Normalize the keystroke into an AppleScript mask→key map\n  const shortcutMap = normalizeAppleScriptShortcut(keystroke as any);\n  const [[modifiers, keyCode]] = Object.entries(shortcutMap).map(\n    ([mask, key]) => [Number(mask), key] as const,\n  );\n\n  // Validate that we have a valid key code (not null for modifier-only)\n  if (keyCode === null) {\n    throw new Error(\n      `TypeKeystroke action requires a key, but received modifier-only keystroke: ${JSON.stringify(keystroke)}. ` +\n        `Modifier-only keystrokes (like \"Cmd\" or \"Shift\") cannot be used with typeKeystroke actions.`,\n    );\n  }\n\n  // Helper to build a simulate keystroke action dict\n  const buildSimulate = (\n    pressType?: \"PressAndHold\" | \"PressAndRepeat\" | \"Release\",\n  ): VirtualAction => {\n    const xmlLines = [\n      `\\t<dict>`,\n      ...generateActionUIDXml(),\n      `\\t\\t<key>KeyCode</key>`,\n      `\\t\\t<integer>${keyCode}</integer>`,\n      `\\t\\t<key>MacroActionType</key>`,\n      `\\t\\t<string>SimulateKeystroke</string>`,\n      `\\t\\t<key>Modifiers</key>`,\n      `\\t\\t<integer>${modifiers}</integer>`,\n      pressType ? `\\t\\t<key>Press</key>` : ``,\n      pressType ? `\\t\\t<string>${pressType}</string>` : ``,\n      `\\t\\t<key>ReleaseAll</key>`,\n      `\\t\\t<false/>`,\n      `\\t\\t<key>TargetApplication</key>`,\n      `\\t\\t<dict/>`,\n      `\\t\\t<key>TargetingType</key>`,\n      `\\t\\t<string>Front</string>`,\n      `\\t</dict>`,\n    ]\n      .filter(Boolean)\n      .join(\"\\n\");\n    return { toXml: () => formatXmlAction(xmlLines) };\n  };\n\n  // Flow 3: press and hold (with optional pause)\n  if (useHold) {\n    const pressAction = buildSimulate(\"PressAndHold\");\n    const pauseOpts: PauseOptions =\n      holdTime !== undefined ? { time: holdTime } : {};\n    const pauseAction = createVirtualPause(pauseOpts);\n    const releaseAction = buildSimulate(\"Release\");\n    const fragments: VirtualAction[] = [\n      pressAction,\n      pauseAction,\n      releaseAction,\n    ];\n\n    return { toXml: () => fragments.map((a) => a.toXml().trim()).join(\"\\n\") };\n  }\n\n  // Flow 2: press and repeat\n  if (pressAndRepeat) {\n    return buildSimulate(\"PressAndRepeat\");\n  }\n\n  // Flow 1: default single keystroke\n  return buildSimulate();\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.setVariable.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport {\n  renderSetVariableProcessingModeXml,\n  renderSetVariableWhereXml,\n} from \"../utils/template.xml.variable\";\nimport type { SetVariablePresetMode } from \"../utils/template.xml.variable\";\nimport { KM_TOKENS } from \"../tokens\";\nimport type { VirtualAction } from \"./types\";\nimport type {\n  SetVariableWhere,\n  ProcessingMode,\n  SetVariableScope,\n} from \"./types/types.data\";\n\n/**\n * Options for Set Variable action.\n */\nexport interface SetVariableOptions {\n  /** Name of the variable to set. */\n  variable: string;\n  /** Value to set the variable to. */\n  text?: string;\n  /** Processing mode for the text. */\n  processingMode?: ProcessingMode;\n  /** Where to set/append/prepend. */\n  where?: SetVariableWhere;\n  /**\n   * Preset mode for convenience. Can be KM GUI suggested presets (\"delete\", \"positionCursor\")\n   * or any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   */\n  presetMode?: SetVariablePresetMode;\n  /**\n   * Optional variable scope.\n   * - \"global\" (default): No prefix\n   * - \"local\": Prepends \"LOCAL\" to variable name\n   * - \"instance\": Prepends \"INSTANCE\" to variable name\n   * Note: This is not a setting in KM, but a convenience feature\n   * as part of KMJS that will automatically handle prepending a\n   * \"LOCAL\" or \"INSTANCE\" prefix to the variable name.\n   */\n  scope?: SetVariableScope;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Set Variable action.\n * @param opts - SetVariableOptions for variable name, value, processing, where, preset, and scope.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic usage\n * createVirtualSetVariable({ variable: \"MyVar\", text: \"Hello\" })\n * createVirtualSetVariable({ variable: \"MyVar\", text: \"Hello\", scope: \"local\" })\n *\n * @example\n * // KM GUI suggested presets\n * createVirtualSetVariable({ variable: \"MyVar\", presetMode: \"delete\" })\n * createVirtualSetVariable({ variable: \"MyVar\", presetMode: \"positionCursor\" })\n *\n * @example\n * // Token presets\n * createVirtualSetVariable({ variable: \"UUID\", presetMode: \"ARandomUniqueID\" })\n * createVirtualSetVariable({ variable: \"AppName\", presetMode: \"FrontApplicationName\" })\n * createVirtualSetVariable({ variable: \"MousePos\", presetMode: \"CurrentMouseLocation\" })\n */\nexport function createVirtualSetVariable(\n  opts: SetVariableOptions,\n): VirtualAction {\n  const {\n    variable,\n    text = \"\",\n    processingMode,\n    where,\n    presetMode,\n    scope = \"global\",\n  } = opts;\n\n  // Handle preset modes\n  let finalText = text;\n  if (presetMode === \"delete\") {\n    finalText = \"%Delete%\";\n  } else if (presetMode === \"positionCursor\") {\n    finalText = \"%|%\";\n  } else if (presetMode && presetMode in KM_TOKENS) {\n    // Use token from KM_TOKENS\n    finalText = KM_TOKENS[presetMode as keyof typeof KM_TOKENS];\n  }\n\n  // Apply variable scope prefix if needed\n  let scopedVariable = variable;\n  if (scope === \"local\") scopedVariable = `LOCAL${variable}`;\n  else if (scope === \"instance\") scopedVariable = `INSTANCE${variable}`;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SetVariableToText</string>\",\n    ...renderSetVariableProcessingModeXml(processingMode),\n    \"\\t\\t<key>Text</key>\",\n    `\\t\\t<string>${escapeForXml(finalText)}</string>`,\n    \"\\t\\t<key>Variable</key>\",\n    `\\t\\t<string>${escapeForXml(scopedVariable)}</string>`,\n    ...renderSetVariableWhereXml(where),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.setVariableToCalculation.ts\n\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Options for the SetVariableToCalculation virtual action.\n */\nexport interface SetVariableToCalculationOptions {\n  /** The variable to set. */\n  variable: string;\n  /** The calculation expression (as text). */\n  text: string;\n  /** Optional number format pattern (see Appendix G: Number Format Patterns). */\n  format?: string;\n  /** Whether to stop macro on failure (default: true). */\n  stopOnFailure?: boolean;\n  /** Whether to notify on failure (default: true). */\n  notifyOnFailure?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro SetVariableToCalculation action.\n *\n * @param opts - SetVariableToCalculationOptions for variable, calculation, and formatting.\n * @returns A VirtualAction that emits the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualSetVariableToCalculation({ variable: \"Result\", text: \"1+2\" })\n * createVirtualSetVariableToCalculation({ variable: \"Result\", text: \"1+2\", format: \"0.00\" })\n */\nexport function createVirtualSetVariableToCalculation(\n  opts: SetVariableToCalculationOptions,\n): VirtualAction {\n  const { variable, text, format, stopOnFailure, notifyOnFailure } = opts;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    ...(format\n      ? [\n          \"\\t\\t<key>Format</key>\",\n          `\\t\\t<string>${escapeForXml(format)}</string>`,\n        ]\n      : []),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SetVariableToCalculation</string>\",\n    ...(notifyOnFailure === false ? renderNotifyOnFailureXml(false) : []),\n    ...(stopOnFailure === false ? renderStopOnFailureXml(false) : []),\n    \"\\t\\t<key>Text</key>\",\n    `\\t\\t<string>${escapeForXml(text)}</string>`,\n    \"\\t\\t<key>UseFormat</key>\",\n    format ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t\\t<key>Variable</key>\",\n    `\\t\\t<string>${escapeForXml(variable)}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.retryThisLoop.ts\n\n/**\n * RETRY THIS LOOP WRAPPER\n *\n * Provides a VirtualAction for the Keyboard Maestro 'Retry This Loop' action.\n * Internally uses Cancel with cancelType \"RetryThisLoop\" to jump to the top of the loop.\n *\n * @example\n * // Restart the current loop iteration\n * createVirtualRetryThisLoop();\n */\n\nimport { createVirtualCancel } from \"./kmjs.virtualAction.cancel\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Creates a VirtualAction to retry the current loop in Keyboard Maestro.\n *\n * Uses the generic Cancel action with cancelType \"RetryThisLoop\" to re-enter the loop.\n *\n * @returns A VirtualAction for the 'RetryThisLoop' variant.\n */\nexport function createVirtualRetryThisLoop(): VirtualAction {\n  return createVirtualCancel({ cancelType: \"RetryThisLoop\" });\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.continueLoop.ts\n\n/**\n * CONTINUE LOOP WRAPPER\n *\n * Provides a VirtualAction for the Keyboard Maestro 'Continue Loop' action.\n * This is a specialized variant of the generic Cancel action, using cancelType \"ContinueLoop\".\n *\n * Inline documentation clarifies that loop control is implemented via Cancel under the hood.\n */\n\nimport { createVirtualCancel } from \"./kmjs.virtualAction.cancel\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Creates a VirtualAction to continue the current loop in Keyboard Maestro.\n *\n * Under the hood, this wraps the generic Cancel action with cancelType \"ContinueLoop\".\n *\n * @example\n * // Continue execution of the enclosing loop\n * createVirtualContinueLoop();\n *\n * @returns A VirtualAction for the 'ContinueLoop' cancel variant.\n */\nexport function createVirtualContinueLoop(): VirtualAction {\n  return createVirtualCancel({ cancelType: \"ContinueLoop\" });\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.breakFromLoop.ts\n\n/**\n * BREAK FROM LOOP WRAPPER\n *\n * Provides a VirtualAction for the Keyboard Maestro 'Break From Loop' action.\n * Internally implemented via the generic Cancel action with cancelType \"BreakFromLoop\".\n *\n * Use this to exit the nearest enclosing loop immediately.\n *\n * @example\n * // Exit the current loop\n * createVirtualBreakFromLoop();\n */\n\nimport { createVirtualCancel } from \"./kmjs.virtualAction.cancel\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Creates a VirtualAction to break out of the current loop in Keyboard Maestro.\n *\n * Wraps the generic Cancel action with cancelType \"BreakFromLoop\".\n *\n * @returns A VirtualAction for the 'BreakFromLoop' variant.\n */\nexport function createVirtualBreakFromLoop(): VirtualAction {\n  return createVirtualCancel({ cancelType: \"BreakFromLoop\" });\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.moveAndClick.ts\n\nimport { createVirtualClickAtFoundImage } from \"./kmjs.virtualAction.clickAtFoundImage\";\nimport type { VirtualAction } from \"./types\";\nimport type { ClickKind, MouseButton, MouseDrag } from \"./types/types.input\";\nimport type { RelativeCorner, CoordinateReference } from \"./types/types.ui\";\n\n/**\n * Options for the MoveAndClick virtual action.\n * This omits all image search options and only exposes window-relative click options.\n */\nexport interface MoveAndClickOptions {\n  /** Type of click (default: \"Click\") */\n  clickKind?: ClickKind; // default = \"Click\"\n  /** Mouse button (default: \"Left\") */\n  button?: MouseButton; // default = \"Left\"\n  /** Modifier keys (default: 0) */\n  clickModifiers?: string | number | Record<number, number | null>;\n  /** Horizontal position (default: 0) */\n  horizontal?: number;\n  /** Vertical position (default: 0) */\n  vertical?: number;\n  /** Where the (x,y) offset is measured from (default: \"Window\") */\n  relative?: Extract<\n    CoordinateReference,\n    \"Window\" | \"Screen\" | \"Mouse\" | \"Absolute\"\n  >;\n  /** Corner for relative positioning (default: \"TopLeft\") */\n  relativeCorner?: RelativeCorner;\n  /** Mouse drag operation (default: \"None\") */\n  mouseDrag?: MouseDrag;\n  /** Drag target X (default: 0) */\n  dragTargetX?: number;\n  /** Drag target Y (default: 0) */\n  dragTargetY?: number;\n  /** Restore mouse location after click (default: false) */\n  restoreMouseLocation?: boolean;\n}\n\n/**\n * Creates a Keyboard Maestro virtual action that moves and clicks the mouse at a specified position.\n * This is a wrapper around createVirtualClickAtFoundImage, with image search options omitted and defaults set to match KM's MoveAndClick action.\n *\n * ## Mouse Movement and Dragging Guide\n *\n * This function is your primary tool for mouse automation. It can:\n * - Move the mouse cursor without clicking (clickKind: \"Move\")\n * - Click at specific coordinates\n * - Drag elements from one location to another\n * - Perform complex multi-step drag operations\n *\n * ### Key Concepts:\n *\n * **Coordinate Systems (`relative` parameter):**\n * - `\"Screen\"` - Absolute screen coordinates (0,0 = top-left of main screen)\n * - `\"Window\"` - Relative to the front window (0,0 = top-left of window content)\n * - `\"Mouse\"` - Relative to current mouse position (0,0 = current mouse location)\n * - `\"Absolute\"` - Same as Screen but uses different internal handling\n *\n * **Drag Operations (`mouseDrag` parameter):**\n * - `\"None\"` - Just move/click, no dragging\n * - `\"Absolute\"` - Drag from current position to absolute coordinates (dragTargetX, dragTargetY)\n * - `\"Relative\"` - Drag by a relative offset (dragTargetX/Y are offsets from start position)\n * - `\"To\"` - Drag to specific coordinates\n * - `\"From\"` - Start drag from specific coordinates\n *\n * @param opts - Options for the move and click action\n * @param opts.clickKind - Type of click: \"Click\", \"DoubleClick\", \"RightClick\", \"Move\", \"Release\" (default: \"Click\")\n * @param opts.button - Mouse button: \"Left\", \"Right\", or \"Middle\" (default: \"Left\")\n * @param opts.clickModifiers - Modifier keys (string, number, or record; default: 0)\n * @param opts.horizontal - X coordinate (default: 0)\n * @param opts.vertical - Y coordinate (default: 0)\n * @param opts.relative - Coordinate reference system: \"Window\", \"Screen\", \"Mouse\", or \"Absolute\" (default: \"Window\")\n * @param opts.relativeCorner - Corner for relative positioning: \"TopLeft\", etc. (default: \"TopLeft\")\n * @param opts.mouseDrag - Mouse drag operation: \"None\", \"Absolute\", \"Relative\", \"To\", \"From\" (default: \"None\")\n * @param opts.dragTargetX - Drag target X coordinate (default: 0)\n * @param opts.dragTargetY - Drag target Y coordinate (default: 0)\n * @param opts.restoreMouseLocation - Restore mouse position after click (default: false)\n *\n * @example\n * // Basic clicking at screen coordinates\n * createVirtualMoveAndClick({ horizontal: 100, vertical: 200, relative: \"Screen\" })\n *\n * // Just move the mouse cursor without clicking\n * createVirtualMoveAndClick({\n *   horizontal: 300,\n *   vertical: 400,\n *   relative: \"Screen\",\n *   clickKind: \"Move\"\n * })\n *\n * // Drag an element from one screen location to another (absolute drag)\n * createVirtualMoveAndClick({\n *   horizontal: 100,        // Start position X\n *   vertical: 100,          // Start position Y\n *   relative: \"Screen\",\n *   mouseDrag: \"Absolute\",  // Drag to absolute coordinates\n *   dragTargetX: 300,       // End position X\n *   dragTargetY: 400,       // End position Y\n *   clickKind: \"Click\"\n * })\n *\n * // Drag by a relative offset (move 200px right, 100px down from start)\n * createVirtualMoveAndClick({\n *   horizontal: 150,\n *   vertical: 150,\n *   relative: \"Screen\",\n *   mouseDrag: \"Relative\",  // Drag by offset\n *   dragTargetX: 200,       // Move 200px right\n *   dragTargetY: 100,       // Move 100px down\n *   clickKind: \"Click\"\n * })\n *\n * // Resize a window by dragging its bottom-right corner\n * createVirtualMoveAndClick({\n *   horizontal: 692,        // Position at window corner\n *   vertical: 631,\n *   relative: \"Screen\",\n *   mouseDrag: \"Relative\",  // Drag by offset\n *   dragTargetX: 50,        // Expand 50px wider\n *   dragTargetY: 30,        // Expand 30px taller\n *   clickKind: \"Click\"\n * })\n *\n * // Multi-step drag operation: First move to position, then drag\n * // Step 1: Move to starting position\n * createVirtualMoveAndClick({\n *   horizontal: 681,\n *   vertical: 622,\n *   relative: \"Screen\",\n *   clickKind: \"Move\"       // Just move, don't click yet\n * })\n * // Step 2: Drag from current position\n * createVirtualMoveAndClick({\n *   mouseDrag: \"Relative\",\n *   relative: \"Mouse\",      // Start from current mouse position\n *   horizontal: 0,          // No additional offset\n *   vertical: 0,\n *   dragTargetX: 12,        // Drag 12px right\n *   dragTargetY: 11,        // Drag 11px down\n *   clickKind: \"Click\"\n * })\n *\n * @returns A VirtualAction object that can render itself as KM XML.\n */\nexport function createVirtualMoveAndClick(\n  opts: MoveAndClickOptions = {},\n): VirtualAction {\n  // Only allow window/screen/mouse/absolute relative, never image search\n  const {\n    clickKind = \"Click\",\n    button = \"Left\",\n    clickModifiers = 0,\n    horizontal = 0,\n    vertical = 0,\n    relative = \"Window\",\n    relativeCorner = \"TopLeft\",\n    mouseDrag = \"None\",\n    dragTargetX = 0,\n    dragTargetY = 0,\n    restoreMouseLocation = false,\n  } = opts;\n\n  // Call the underlying clickAtFoundImage with imageSource omitted and defaults set\n  // Do NOT emit waitForImage or TimeOutAbortsMacro for MoveAndClick (window-relative)\n  return createVirtualClickAtFoundImage({\n    clickKind,\n    button,\n    clickModifiers,\n    horizontal,\n    vertical,\n    relative,\n    relativeCorner,\n    mouseDrag,\n    dragTargetX,\n    dragTargetY,\n    restoreMouseLocation,\n    // Omit all image search options: imageSource, filePath, namedClipboardUUID, etc.\n    // Fuzz, waitForImage, imageSelection, screenArea, imageScreenArea are not needed for MoveAndClick\n    fuzz: 15,\n    imageSelection: \"Unique\",\n    // Do NOT set waitForImage or TimeOutAbortsMacro\n  });\n}\n","// FILE: src/utils/template.xml.clipboard.ts\n\n/**\n * Clipboard XML helpers for Keyboard Maestro actions.\n *\n * This module provides utilities for generating the XML fragments\n * required to specify clipboard destinations in KM actions (e.g.,\n * SystemClipboard, TriggerClipboard, NamedClipboard).\n *\n * Used by actions like ScreenCapture, InsertText, etc.\n *\n * All functions are pure and formatting-preserving.\n */\n\nimport type {\n  NamedClipboardDestination,\n  ClipboardDestination,\n} from \"../virtual_actions/types/types.data\";\n\n/**\n * Type guard to check if a value is a NamedClipboardDestination object.\n * @param dest - The destination value to check\n * @returns True if dest is a NamedClipboardDestination\n */\nexport function isNamedClipboard(\n  dest: unknown,\n): dest is NamedClipboardDestination {\n  return !!dest && typeof dest === \"object\" && \"name\" in dest;\n}\n\n/**\n * Generates the XML lines for clipboard destination options in KM actions.\n *\n * @param destination - Clipboard destination (undefined, \"TriggerClipboard\", or NamedClipboardDestination)\n * @returns Array of XML lines for the clipboard destination section\n *\n * - If destination is undefined, returns an empty array (SystemClipboard)\n * - If destination is \"TriggerClipboard\", returns the appropriate XML keys\n * - If destination is a NamedClipboardDestination, returns XML for name, UID (if present), and use flag\n */\nexport function generateClipboardDestinationXml(\n  destination: ClipboardDestination,\n): string[] {\n  // All lines must be indented to match the rest of the action XML (\\t\\t)\n  if (destination === \"TriggerClipboard\") {\n    // Use the trigger clipboard as the destination\n    return [\"\\t\\t<key>DestinationUseTriggerClipboard</key>\", \"\\t\\t<true/>\"];\n  } else if (isNamedClipboard(destination)) {\n    // Use a named clipboard as the destination\n    return [\n      \"\\t\\t<key>DestinationNamedClipboardRedundantDisplayName</key>\",\n      `\\t\\t<string>${destination.name}</string>`,\n      // Only include UID if provided\n      ...(destination.uid\n        ? [\n            \"\\t\\t<key>DestinationNamedClipboardUID</key>\",\n            `\\t\\t<string>${destination.uid}</string>`,\n          ]\n        : []),\n      \"\\t\\t<key>DestinationUseNamedClipboard</key>\",\n      \"\\t\\t<true/>\",\n    ];\n  }\n  // Default: SystemClipboard (no XML keys needed)\n  return [];\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.screenCapture.ts\n\nimport { screenAreaToXml } from \"../utils/template.xml.ui\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport { generateClipboardDestinationXml } from \"../utils/template.xml.clipboard\";\nimport type { ScreenArea } from \"./types/types.ui\";\nimport type { ClipboardDestination } from \"./types/types.data\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\n\n/**\n * Options for the ScreenCapture virtual action.\n */\nexport interface ScreenCaptureOptions {\n  /** Area of the screen/window to capture. */\n  screenArea?: ScreenArea;\n  /**\n   * Clipboard destination:\n   * - undefined: SystemClipboard (default, no XML key)\n   * - \"TriggerClipboard\": sets DestinationUseTriggerClipboard\n   * - { name: string, uid?: string }: NamedClipboard (sets DestinationNamedClipboardRedundantDisplayName, DestinationUseNamedClipboard; UID is optional and not required for virtual actions/macros)\n   *\n   * Note: The UID is not necessary for virtual actions/macros and will only be included if provided.\n   */\n  destination?: undefined | \"TriggerClipboard\" | { name: string; uid?: string };\n  /** If true, capture at nominal resolution (default false). */\n  alwaysNominalResolution?: boolean;\n  /** If true, abort macro on failure (default false). */\n  stopOnFailure?: boolean;\n  /** If false, do not notify on failure (default true). */\n  notifyOnFailure?: boolean;\n}\n\n/**\n * Creates a virtual ScreenCapture action for Keyboard Maestro.\n *\n * This function generates a VirtualAction that, when serialized to XML,\n * produces a valid Keyboard Maestro ScreenCapture action. It supports\n * specifying the screen area, clipboard destination, and error handling options.\n *\n * @param opts - ScreenCaptureOptions for customizing the action\n * @returns VirtualAction that emits the correct KM XML when toXml() is called\n */\nexport function createVirtualScreenCapture(\n  opts: ScreenCaptureOptions = {},\n): import(\"./index\").VirtualAction {\n  const {\n    screenArea = { type: \"ScreenAll\" },\n    destination,\n    alwaysNominalResolution = false,\n    stopOnFailure = false,\n    notifyOnFailure = true,\n  } = opts;\n\n  // Compose the XML lines for the ScreenCapture action.\n  // The clipboard destination XML is generated by the clipboard template helper.\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>AlwaysNominalResolution</key>\",\n    \"\\t\\t<\" + (alwaysNominalResolution ? \"true\" : \"false\") + \"/>\",\n    ...generateClipboardDestinationXml(destination as ClipboardDestination),\n    \"\\t\\t<key>IncludeShadows</key>\",\n    \"\\t\\t<true/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>ScreenCapture</string>\",\n    ...(notifyOnFailure === false\n      ? renderNotifyOnFailureXml(notifyOnFailure)\n      : []),\n    ...screenAreaToXml(\"ScreenArea\", screenArea)\n      .split(\"\\n\")\n      .map(function (l) {\n        return \"\\t\\t\" + l;\n      }),\n    ...(stopOnFailure === true ? renderStopOnFailureXml(stopOnFailure) : []),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.file.ts\n\nimport type { VirtualAction } from \"./types\";\nimport type { FileOperation } from \"./types/types.file\";\nimport type { NotifyOnFailure, StopOnFailure } from \"./types/types.system\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\n\n/**\n * Options for the File virtual action.\n *\n * All file paths must be absolute or valid KM path tokens. For operations that write or delete, double-check the path.\n *\n * @property operation - The file operation to perform (see FileOperation).\n * @property source - The source file or directory path (required for all operations).\n * @property destination - The destination file or directory path (required for two-string operations: Move, Rename, Move or Rename, Copy, Create Unique).\n * @property outputPath - Output path for Create Unique (always present, even if empty).\n * @property stopOnFailure - If true, abort macro on failure (default false).\n * @property notifyOnFailure - If false, do not notify on failure (default true).\n */\nexport interface FileActionOptions {\n  /** The file operation to perform (canonical XML value). */\n  operation: FileOperation;\n  /** Source file or directory path. Optional, defaults to empty string. */\n  source?: string;\n  /**\n   * Destination file or directory path. Required for two-string operations:\n   *   - CreateUnique\n   *   - OnlyMove\n   *   - OnlyRename\n   *   - Move\n   *   - Copy\n   * For one-string operations, this should be omitted or empty.\n   */\n  destination?: string;\n  /** Output path for CreateUnique (always present, even if empty). */\n  outputPath?: string;\n  /** If true, abort macro on failure (default false). */\n  stopOnFailure?: StopOnFailure;\n  /** If false, do not notify on failure (default true). */\n  notifyOnFailure?: NotifyOnFailure;\n}\n\n/**\n * Creates a virtual File action for Keyboard Maestro.\n *\n * @param opts - FileActionOptions\n * @returns VirtualAction\n *\n * The UID is auto-generated. MacroActionType is always \"File\".\n *\n * Example XML output: (see canonical examples)\n */\nexport function createVirtualFile(opts: FileActionOptions): VirtualAction {\n  const {\n    operation,\n    source = \"\",\n    destination = \"\",\n    outputPath,\n    stopOnFailure,\n    notifyOnFailure,\n  } = opts;\n\n  // Operations that require only one string (destination must be empty)\n  const singleStringOps = [\n    \"Reveal\",\n    \"Duplicate\",\n    \"Trash\",\n    \"Delete\",\n    \"RecursiveDelete\",\n  ];\n  const destValue = singleStringOps.includes(operation)\n    ? \"\"\n    : destination || \"\";\n\n  // Only include OutputPath for CreateUnique, always present (even if empty)\n  const includeOutputPath = operation === \"CreateUnique\";\n  const outputPathValue = includeOutputPath ? (outputPath ?? \"\") : undefined;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml().map((line) => `\\t\\t${line}`),\n    \"\\t\\t<key>Destination</key>\",\n    `\\t\\t<string>${escapeForXml(destValue)}</string>`,\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>File</string>\",\n    notifyOnFailure === false\n      ? `\\t\\t<key>NotifyOnFailure</key>\\n\\t\\t<false/>`\n      : undefined,\n    \"\\t\\t<key>Operation</key>\",\n    `\\t\\t<string>${escapeForXml(operation)}</string>`,\n    includeOutputPath\n      ? `\\t\\t<key>OutputPath</key>\\n\\t\\t<string>${escapeForXml(outputPathValue!)}</string>`\n      : undefined,\n    \"\\t\\t<key>Source</key>\",\n    `\\t\\t<string>${escapeForXml(source)}</string>`,\n    stopOnFailure === true\n      ? `\\t\\t<key>StopOnFailure</key>\\n\\t\\t<true/>`\n      : undefined,\n    \"\\t</dict>\",\n  ].filter(Boolean);\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.paste.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderTimeoutXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Options for the Paste action.\n * Both timeout-related options are optional and default to their standard KM behavior.\n */\nexport interface PasteActionOptions {\n  /** Whether to notify when a timeout occurs. Defaults to true. */\n  notifyOnTimeout?: boolean;\n  /** Whether timeout aborts the macro. Defaults to false. */\n  timeoutAborts?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Paste action.\n * Pastes the current clipboard contents.\n *\n * @param opts - PasteActionOptions for timeout behavior configuration\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualPaste()\n * createVirtualPaste({ notifyOnTimeout: true, timeoutAborts: false })\n */\nexport function createVirtualPaste(\n  opts: PasteActionOptions = {},\n): VirtualAction {\n  const { notifyOnTimeout = true, timeoutAborts = false } = opts;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    \"\\t\\t<string>Paste</string>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>IsDisclosed</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>CutCopyPaste</string>\",\n    ...renderTimeoutXml({ notifyOnTimeout, timeoutAborts }),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.setClipboardToText.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { renderSetVariableProcessingModeXml } from \"../utils/template.xml.variable\";\nimport { generateClipboardDestinationXml } from \"../utils/template.xml.clipboard\";\nimport {\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport {\n  encodeStyledTextData,\n  generateBasicRtf,\n  stripRtfToPlainText,\n} from \"../utils/utils.styledText\";\nimport { KM_TOKENS } from \"../tokens\";\nimport type { VirtualAction } from \"./types\";\nimport type { ProcessingMode, ClipboardDestination } from \"./types/types.data\";\nimport type { StopOnFailure, NotifyOnFailure } from \"./types/types.system\";\n\n/**\n * Preset modes for Set Clipboard to Text action (convenience, not in KM UI).\n * - undefined: normal\n * - \"delete\": sets Text to \"%Delete%\" (KM GUI suggested option)\n * - \"positionCursor\": sets Text to \"%|%\" (KM GUI suggested option)\n * - Any key from KM_TOKENS: sets Text to the corresponding token value\n *\n * @example\n * // KM GUI suggested presets\n * presetMode: \"delete\" // → \"%Delete%\"\n * presetMode: \"positionCursor\" // → \"%|%\"\n *\n * // Token presets\n * presetMode: \"ARandomUniqueID\" // → \"%RandomUUID%\"\n * presetMode: \"FrontApplicationName\" // → \"%Application%1%\"\n * presetMode: \"CurrentMouseLocation\" // → \"%CurrentMouse%\"\n */\nexport type SetClipboardToTextPresetMode =\n  | undefined\n  | \"delete\"\n  | \"positionCursor\"\n  | keyof typeof KM_TOKENS;\n\n/**\n * Options for Set Clipboard to Text action.\n */\nexport interface SetClipboardToTextOptions {\n  /** The text to set the clipboard to. */\n  text?: string;\n\n  /**\n   * Preset mode for convenience. Can be KM GUI suggested presets (\"delete\", \"positionCursor\")\n   * or any token key from KM_TOKENS for IntelliSense-supported token insertion.\n   */\n  presetMode?: SetClipboardToTextPresetMode;\n\n  /**\n   * Processing mode for the text.\n   * - undefined: Process Text Normally (default)\n   * - \"TextTokensOnly\": Process Text Tokens Only\n   * - \"Nothing\": Process Nothing\n   */\n  processingMode?: ProcessingMode;\n\n  /**\n   * Whether to include styled text data.\n   * When true, generates <StyledText><data>...</data></StyledText> from RTF.\n   * @default false\n   */\n  includeStyledText?: boolean;\n\n  /**\n   * RTF string for styled text. Only used when includeStyledText is true.\n   * If not provided, a basic RTF wrapper will be created around the text.\n   */\n  rtfContent?: string;\n\n  /**\n   * Clipboard destination.\n   * - undefined: System clipboard (default)\n   * - \"TriggerClipboard\": Use trigger clipboard\n   * - NamedClipboardDestination: Use named clipboard\n   */\n  destination?: ClipboardDestination;\n\n  /** If false, failure does not abort macro (default true). */\n  stopOnFailure?: StopOnFailure;\n\n  /** If false, do not notify on failure (default true). */\n  notifyOnFailure?: NotifyOnFailure;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Set Clipboard to Text action.\n *\n * This action sets the clipboard content to the specified text, with support for\n * styled text, text processing options, and different clipboard destinations.\n *\n * @param opts - SetClipboardToTextOptions for text content, processing, styling, and destination.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic clipboard text setting\n * createVirtualSetClipboardToText({ text: \"Hello World\" })\n *\n * @example\n * // Set clipboard with styled text\n * createVirtualSetClipboardToText({\n *   text: \"Styled Text\",\n *   includeStyledText: true\n * })\n *\n * @example\n * // Set named clipboard with text tokens only\n * createVirtualSetClipboardToText({\n *   text: \"Variable: %Variable%MyVar%\",\n *   processingMode: \"TextTokensOnly\",\n *   destination: { name: \"MyClipboard\", uid: \"12345\" }\n * })\n *\n * @example\n * // KM GUI suggested presets\n * createVirtualSetClipboardToText({ presetMode: \"delete\" })\n * createVirtualSetClipboardToText({ presetMode: \"positionCursor\" })\n *\n * @example\n * // Token presets\n * createVirtualSetClipboardToText({ presetMode: \"ARandomUniqueID\" })\n * createVirtualSetClipboardToText({ presetMode: \"FrontApplicationName\" })\n * createVirtualSetClipboardToText({ presetMode: \"CurrentMouseLocation\" })\n */\nexport function createVirtualSetClipboardToText(\n  opts: SetClipboardToTextOptions = {},\n): VirtualAction {\n  const {\n    text = \"\",\n    presetMode,\n    processingMode,\n    includeStyledText = false,\n    rtfContent,\n    destination,\n    stopOnFailure,\n    notifyOnFailure,\n  } = opts;\n\n  // Handle preset modes\n  let finalText = text;\n  if (presetMode === \"delete\") {\n    finalText = \"%Delete%\";\n  } else if (presetMode === \"positionCursor\") {\n    finalText = \"%|%\";\n  } else if (presetMode && presetMode in KM_TOKENS) {\n    // Use token from KM_TOKENS\n    finalText = KM_TOKENS[presetMode as keyof typeof KM_TOKENS];\n  }\n\n  // Build styled text data if requested\n  let styledTextXml = \"\";\n\n  if (includeStyledText) {\n    // Generate RTF content if not provided\n    let finalRtfContent = rtfContent;\n    if (!finalRtfContent) {\n      finalRtfContent = generateBasicRtf(text);\n    }\n\n    try {\n      // Encode the RTF as base64 styled text data\n      const styledTextData = encodeStyledTextData(finalRtfContent);\n      const indentedData = styledTextData\n        .split(\"\\n\")\n        .map((line) => `\\t\\t${line}`)\n        .join(\"\\n\");\n\n      styledTextXml = [\n        \"\\t\\t<key>StyledText</key>\",\n        \"\\t\\t<data>\",\n        indentedData,\n        \"\\t\\t</data>\",\n      ].join(\"\\n\");\n\n      // When using custom RTF, extract the plain text from it for the Text field\n      // This matches Keyboard Maestro's behavior\n      if (rtfContent) {\n        finalText = stripRtfToPlainText(finalRtfContent);\n      }\n    } catch (error) {\n      // If styled text encoding fails, fall back to plain text\n      console.warn(\n        `[setClipboardToText] Failed to encode styled text, falling back to plain text: ${error}`,\n      );\n    }\n  }\n\n  // Build clipboard destination XML\n  const clipboardDestinationXml = generateClipboardDestinationXml(destination);\n\n  // Handle special clipboard destination keys for SetClipboardToText action\n  let targetClipboardXml: string[] = [];\n  if (destination === \"TriggerClipboard\") {\n    targetClipboardXml = [\n      \"\\t\\t<key>TargetUseTriggerClipboard</key>\",\n      \"\\t\\t<true/>\",\n    ];\n  } else if (\n    destination &&\n    typeof destination === \"object\" &&\n    \"name\" in destination\n  ) {\n    targetClipboardXml = [\n      \"\\t\\t<key>TargetNamedClipboardRedundantDisplayName</key>\",\n      `\\t\\t<string>${destination.name}</string>`,\n      ...(destination.uid\n        ? [\n            \"\\t\\t<key>TargetNamedClipboardUID</key>\",\n            `\\t\\t<string>${destination.uid}</string>`,\n          ]\n        : []),\n      \"\\t\\t<key>TargetUseNamedClipboard</key>\",\n      \"\\t\\t<true/>\",\n    ];\n  }\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>JustDisplay</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SetClipboardToText</string>\",\n    ...renderNotifyOnFailureXml(notifyOnFailure),\n    ...(processingMode\n      ? renderSetVariableProcessingModeXml(processingMode)\n      : []),\n    ...renderStopOnFailureXml(stopOnFailure),\n    ...(styledTextXml ? [styledTextXml] : []),\n    ...targetClipboardXml,\n    \"\\t\\t<key>Text</key>\",\n    `\\t\\t<string>${escapeForXml(finalText)}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.showSpecificApp.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { generateApplicationXml } from \"../utils/template.xml.application\";\nimport type { VirtualAction } from \"./types\";\nimport type { SpecificAppOptions, ApplicationTarget } from \"./types/types.ui\";\n\n/**\n * Options for the ShowSpecificApp virtual action.\n * - target: Always \"Specific\" (for future extensibility, default is \"Specific\")\n * - specific: App identification options (name, bundleIdentifier, path, match, newFile)\n */\nexport interface ShowSpecificAppOptions {\n  /** Which application to show (always Specific for this action) */\n  target?: ApplicationTarget; // default: \"Specific\"\n  /** App identification options */\n  specific: SpecificAppOptions;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro ShowSpecificApp action.\n *\n * @param opts - ShowSpecificAppOptions for app selection\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualShowSpecificApp({ specific: { name: \"Finder\", bundleIdentifier: \"com.apple.finder\", path: \"/System/Library/CoreServices/Finder.app\" } })\n */\nexport function createVirtualShowSpecificApp(\n  opts: ShowSpecificAppOptions,\n): VirtualAction {\n  const { target = \"Specific\", specific } = opts;\n  const appLines = generateApplicationXml(target, specific);\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>Application</key>\",\n    ...appLines.map((line) => `\\t\\t${line}`),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>ShowSpecificApp</string>\",\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.pressButton.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Button action types for the Press Button action.\n */\nexport type ButtonActionType =\n  | \"PressButtonNamed\"\n  | \"ShowMenuOfButtonNamed\"\n  | \"DecrementSliderNamed\"\n  | \"IncrementSliderNamed\"\n  | \"CancelButtonNamed\";\n\n/**\n * Options for Press Button action.\n */\nexport interface PressButtonOptions {\n  /** Type of button action to perform. */\n  action: ButtonActionType;\n  /** Name of the button/slider to interact with. */\n  buttonName: string;\n  /** Whether to wait for the button to be enabled before pressing. */\n  waitForEnabledButton?: boolean;\n  /** Whether timeout aborts the macro (only applies when waitForEnabledButton is true). */\n  timeoutAborts?: boolean;\n  /** Whether to notify on timeout (only applies when waitForEnabledButton is true). */\n  notifyOnTimeout?: boolean;\n  /** Whether failure aborts the macro. */\n  stopOnFailure?: boolean;\n  /** Whether to notify on failure. */\n  notifyOnFailure?: boolean;\n}\n\n/**\n * Maps button action types to their corresponding AXAction values.\n */\nconst BUTTON_ACTION_TO_AX_ACTION: Record<ButtonActionType, string | undefined> =\n  {\n    PressButtonNamed: undefined, // No AXAction for basic press\n    ShowMenuOfButtonNamed: \"AXShowMenu\",\n    DecrementSliderNamed: \"AXDecrement\",\n    IncrementSliderNamed: \"AXIncrement\",\n    CancelButtonNamed: \"AXCancel\",\n  };\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Press Button action.\n * @param opts - PressButtonOptions for button action type, name, and various timeout/failure settings.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * // Basic button press\n * createVirtualPressButton({\n *   action: \"PressButtonNamed\",\n *   buttonName: \"OK\"\n * })\n *\n * @example\n * // Show menu with timeout settings\n * createVirtualPressButton({\n *   action: \"ShowMenuOfButtonNamed\",\n *   buttonName: \"Options\",\n *   waitForEnabledButton: true,\n *   timeoutAborts: false,\n *   notifyOnTimeout: true\n * })\n */\nexport function createVirtualPressButton(\n  opts: PressButtonOptions,\n): VirtualAction {\n  const {\n    action,\n    buttonName,\n    waitForEnabledButton = false,\n    timeoutAborts = true,\n    notifyOnTimeout = true,\n    stopOnFailure,\n    notifyOnFailure,\n  } = opts;\n\n  const axAction = BUTTON_ACTION_TO_AX_ACTION[action];\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...(axAction\n      ? [\"\\t\\t<key>AXAction</key>\", `\\t\\t<string>${axAction}</string>`]\n      : []),\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>ButtonName</key>\",\n    `\\t\\t<string>${escapeForXml(buttonName)}</string>`,\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>PressButton</string>\",\n    ...renderNotifyOnFailureXml(notifyOnFailure),\n    ...(waitForEnabledButton &&\n    ((timeoutAborts === true && notifyOnTimeout === false) ||\n      (timeoutAborts === false && notifyOnTimeout === true))\n      ? [\n          \"\\t\\t<key>NotifyOnTimeOut</key>\",\n          notifyOnTimeout ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n        ]\n      : []),\n    ...(stopOnFailure === false\n      ? [\"\\t\\t<key>StopOnFailure</key>\", \"\\t\\t<false/>\"]\n      : []),\n    ...(waitForEnabledButton\n      ? [\n          \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n          timeoutAborts ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n        ]\n      : []),\n    ...(waitForEnabledButton\n      ? [\"\\t\\t<key>WaitForEnabledButton</key>\", \"\\t\\t<true/>\"]\n      : []),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.while.ts\n\nimport { conditionToXml } from \"../utils/template.xml.condition\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport type { VirtualAction } from \"./types\";\nimport type { ConditionListMatch } from \"./types/types.system\";\nimport type { KMCondition } from \"./types/types.conditions\";\n\n/**\n * Represents the top-level structure for a While action.\n * @property conditions - An array of condition objects to evaluate.\n * @property match - How to evaluate the list of conditions (e.g., all must be true).\n * @property actions - An array of VirtualActions to execute while the conditions are met.\n * @property timeoutAborts - Whether a timeout in a nested action should abort the whole macro.\n * @property notifyOnTimeout - Whether to notify when a timeout occurs.\n */\nexport interface WhileOptions {\n  conditions: KMCondition[];\n  match?: ConditionListMatch;\n  actions: VirtualAction[];\n  timeoutAborts?: boolean;\n  notifyOnTimeout?: boolean;\n}\n\n/**\n * Creates a virtual \"While\" action for Keyboard Maestro.\n * This action repeatedly executes a set of actions while the specified conditions remain true.\n *\n * @param opts - The configuration for the While loop.\n * @returns A VirtualAction object that can be executed in a macro.\n *\n * @example\n * // While a specific image is found on screen, click it\n * createVirtualWhile({\n *   match: 'All',\n *   conditions: [\n *     {\n *       ConditionType: 'ScreenImage',\n *       ScreenImageConditionType: 'Contains',\n *       ScreenArea: { type: 'ScreenAll' },\n *       Fuzz: 15\n *     }\n *   ],\n *   actions: [\n *     createVirtualClickAtFoundImage({\n *       image: { source: 'File', path: '/path/to/image.png' },\n *       screenArea: { type: 'ScreenAll' }\n *     })\n *   ]\n * });\n */\nexport function createVirtualWhile(opts: WhileOptions): VirtualAction {\n  const {\n    conditions,\n    match = \"All\",\n    actions,\n    timeoutAborts = true,\n    notifyOnTimeout,\n  } = opts;\n\n  // Generate XML for nested actions\n  const actionsXml = actions.map((a) => a.toXml()).join(\"\\n\");\n\n  // Generate XML for conditions array\n  const conditionsArray =\n    conditions.length > 0\n      ? conditions\n          .map(conditionToXml)\n          .map((xml) =>\n            xml\n              .split(\"\\n\")\n              .map((line) => \"\\t\\t\\t\" + line)\n              .join(\"\\n\"),\n          )\n          .join(\"\\n\")\n      : \"\";\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>ActionUID</key>\",\n    `\\t\\t<integer>${Math.floor(Date.now() / 1000)}</integer>`,\n    \"\\t\\t<key>Actions</key>\",\n    actionsXml ? \"\\t\\t<array>\" : \"\\t\\t<array/>\",\n    ...(actionsXml\n      ? [\n          actionsXml\n            .split(\"\\n\")\n            .map((line) => \"\\t\\t\\t\" + line)\n            .join(\"\\n\"),\n          \"\\t\\t</array>\",\n        ]\n      : []),\n    \"\\t\\t<key>Conditions</key>\",\n    \"\\t\\t<dict>\",\n    \"\\t\\t\\t<key>ConditionList</key>\",\n    conditionsArray ? \"\\t\\t\\t<array>\" : \"\\t\\t\\t<array/>\",\n    ...(conditionsArray ? [conditionsArray, \"\\t\\t\\t</array>\"] : []),\n    \"\\t\\t\\t<key>ConditionListMatch</key>\",\n    `\\t\\t\\t<string>${match}</string>`,\n    \"\\t\\t</dict>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>While</string>\",\n    ...(notifyOnTimeout !== undefined\n      ? [\n          \"\\t\\t<key>NotifyOnTimeOut</key>\",\n          `\\t\\t${notifyOnTimeout ? \"<true/>\" : \"<false/>\"}`,\n        ]\n      : []),\n    \"\\t\\t<key>TimeOutAbortsMacro</key>\",\n    `\\t\\t${timeoutAborts ? \"<true/>\" : \"<false/>\"}`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.clearTypedStringBuffer.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Clear Typed String Buffer action.\n *\n * The Clear Typed String Buffer action simply resets the Typed String buffer — the same thing\n * that happens if you change applications, type Shift-Space, or simply do not press a key for\n * a period of time. This action lets you clear the buffer explicitly if it is necessary for\n * any reason.\n *\n * This action clears the buffer of typed string triggers. It takes no parameters.\n *\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualClearTypedStringBuffer()\n */\nexport function createVirtualClearTypedStringBuffer(): VirtualAction {\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>IsDisclosed</key>\",\n    \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SystemAction</string>\",\n    \"\\t\\t<key>SystemAction</key>\",\n    \"\\t\\t<string>ClearTypedString</string>\",\n    \"\\t</dict>\",\n  ];\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.open.ts\n\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport { generateApplicationXml } from \"../utils/template.xml.application\";\nimport type { VirtualAction } from \"./types\";\nimport type { SpecificAppOptions, ApplicationTarget } from \"./types/types.ui\";\n\n/**\n * Options for the Open action.\n */\nexport interface OpenActionOptions {\n  /** The path or string to open (file, folder, or URL). */\n  path: string;\n  /** Whether to target the frontmost app or a specific one. @default \"Front\" */\n  target?: ApplicationTarget;\n  /** If targeting a specific app, provide identification options. */\n  specific?: SpecificAppOptions;\n  /** Whether failure aborts the macro. @default true */\n  stopOnFailure?: boolean;\n  /** Whether to notify on failure. @default true */\n  notifyOnFailure?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Open action.\n *\n * @param opts - OpenActionOptions for configuration\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualOpen({ path: \"/Applications/Safari.app\" })\n */\nexport function createVirtualOpen(opts: OpenActionOptions): VirtualAction {\n  const {\n    path,\n    target = \"Front\",\n    specific = {},\n    stopOnFailure = true,\n    notifyOnFailure = true,\n  } = opts;\n\n  const isDefaultApp =\n    target === \"Front\" || !specific || Object.keys(specific).length === 0;\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    // Only include Application if not default\n    ...(!isDefaultApp\n      ? [\n          \"\\t\\t<key>Application</key>\",\n          ...generateApplicationXml(target, specific).map(\n            (line) => `\\t\\t${line}`,\n          ),\n        ]\n      : []),\n    \"\\t\\t<key>IsDefaultApplication</key>\",\n    isDefaultApp ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Open1File</string>\",\n    // Only include NotifyOnFailure if false\n    ...(notifyOnFailure === false ? renderNotifyOnFailureXml(false) : []),\n    \"\\t\\t<key>Path</key>\",\n    `\\t\\t<string>${escapeForXml(path)}</string>`,\n    // Only include StopOnFailure if false\n    ...(stopOnFailure === false ? renderStopOnFailureXml(false) : []),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.openURL.ts\n\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n  renderTimeoutXml,\n} from \"../utils/template.xml.generic\";\nimport { generateApplicationXml } from \"../utils/template.xml.application\";\nimport type { VirtualAction } from \"./types\";\nimport type { SpecificAppOptions, ApplicationTarget } from \"./types/types.ui\";\nimport type { ProcessingMode } from \"./types/types.data\";\n\n/**\n * Options for the OpenURL action.\n */\nexport interface OpenURLActionOptions {\n  /** The URL to open. */\n  url: string;\n  /** Whether to target the frontmost app or a specific one. @default \"Front\" */\n  target?: ApplicationTarget;\n  /** If targeting a specific app, provide identification options. */\n  specific?: SpecificAppOptions;\n  /** Text processing mode for the URL. */\n  processingMode?: ProcessingMode;\n  /** Open URL in background? @default false */\n  openInBackground?: boolean;\n  /** Whether failure aborts the macro. @default true */\n  stopOnFailure?: boolean;\n  /** Whether to notify on failure. @default true */\n  notifyOnFailure?: boolean;\n  /** Whether timeout aborts the macro. @default true */\n  timeoutAborts?: boolean;\n  /** Whether to notify on timeout. @default true */\n  notifyOnTimeout?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Open URL action.\n *\n * @param opts - OpenURLActionOptions for configuration\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * createVirtualOpenURL({ url: \"https://www.keyboardmaestro.com/\" })\n */\nexport function createVirtualOpenURL(\n  opts: OpenURLActionOptions,\n): VirtualAction {\n  const {\n    url,\n    target = \"Front\",\n    specific = {},\n    processingMode,\n    openInBackground = false,\n    stopOnFailure = true,\n    notifyOnFailure = true,\n    timeoutAborts = true,\n    notifyOnTimeout = true,\n  } = opts;\n\n  const isDefaultApp =\n    target === \"Front\" || !specific || Object.keys(specific).length === 0;\n\n  const timeoutXml = renderTimeoutXml({ notifyOnTimeout, timeoutAborts });\n  const notifyOnTimeOutIdx = timeoutXml.findIndex((line) =>\n    line.includes(\"NotifyOnTimeOut\"),\n  );\n  const notifyOnTimeOutXml =\n    notifyOnTimeOutIdx !== -1\n      ? timeoutXml.slice(notifyOnTimeOutIdx, notifyOnTimeOutIdx + 2)\n      : [];\n  // TimeOutAbortsMacro is always present and is always the last two lines of timeoutXml\n  const timeOutAbortsMacroXml = timeoutXml.slice(-2);\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    // Only include Application if not default\n    ...(!isDefaultApp\n      ? [\n          \"\\t\\t<key>Application</key>\",\n          ...generateApplicationXml(target, specific).map(\n            (line) => `\\t\\t${line}`,\n          ),\n        ]\n      : []),\n    \"\\t\\t<key>IsDefaultApplication</key>\",\n    isDefaultApp ? \"\\t\\t<true/>\" : \"\\t\\t<false/>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>OpenURL</string>\",\n    // Only include NotifyOnFailure if false\n    ...(notifyOnFailure === false ? renderNotifyOnFailureXml(false) : []),\n    // Only include NotifyOnTimeOut if present\n    ...notifyOnTimeOutXml,\n    // OpenInBackground (if present)\n    ...(openInBackground\n      ? [\"\\t\\t<key>OpenInBackground</key>\", \"\\t\\t<true/>\"]\n      : []),\n    // Processing mode (if present)\n    ...(processingMode\n      ? [\n          \"\\t\\t<key>ProcessingMode</key>\",\n          `\\t\\t<string>${processingMode}</string>`,\n        ]\n      : []),\n    // Only include StopOnFailure if false\n    ...(stopOnFailure === false ? renderStopOnFailureXml(false) : []),\n    // Always include TimeOutAbortsMacro\n    ...timeOutAbortsMacroXml,\n    // URL\n    \"\\t\\t<key>URL</key>\",\n    `\\t\\t<string>${escapeForXml(url)}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.selectMenuItem.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport { generateApplicationXml } from \"../utils/template.xml.application\";\nimport {\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport type { ApplicationTarget, SpecificAppOptions } from \"./types/types.ui\";\nimport type { StopOnFailure, NotifyOnFailure } from \"./types/types.system\";\n\n/**\n * Options for the selectMenuItem (SelectMenuItem) virtual action.\n * - target: Which application to target (front or specific)\n * - specific: If targeting a specific app, provide identification options\n * - menuPath: The full menu path as an array of strings (e.g. [\"File\", \"Export\", \"PDF\"])\n * - stopOnFailure: If false, failure does not abort macro (default true)\n * - notifyOnFailure: If false, do not notify on failure (default true)\n *\n * NOTE: ApplicationTarget is defined above.\n */\nexport interface selectMenuOptions {\n  /** Application targeting: frontmost or specific app. */\n  target?: ApplicationTarget;\n  /** If targeting a specific app, provide identification options. */\n  specific?: SpecificAppOptions;\n  /** The full menu path as an array of strings (e.g. [\"File\", \"Export\", \"PDF\"]). */\n  menuPath: string[];\n  /** If false, failure does not abort macro (default true). */\n  stopOnFailure?: StopOnFailure;\n  /** If false, do not notify on failure (default true). */\n  notifyOnFailure?: NotifyOnFailure;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro SelectMenuItem action.\n *\n * @param opts - selectMenuOptions for application targeting, menu title/item, and failure options.\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualselectMenuItem({\n *   target: \"Specific\",\n *   specific: { name: \"Safari\", bundleIdentifier: \"com.apple.Safari\" },\n *   menuPath: [\"Safari\", \"About Safari\"],\n *   stopOnFailure: false,\n *   notifyOnFailure: false,\n * })\n */\nexport function createVirtualselectMenuItem(\n  opts: selectMenuOptions,\n): VirtualAction {\n  const {\n    target = \"Front\",\n    specific = {},\n    menuPath,\n    stopOnFailure,\n    notifyOnFailure,\n  } = opts;\n\n  if (!menuPath || !Array.isArray(menuPath) || menuPath.length === 0) {\n    throw new Error(\"menuPath (array of menu/submenu strings) is required\");\n  }\n\n  // Build the <dict> for the Application key with canonical ordering\n  const appLines = generateApplicationXml(target, specific);\n\n  // Build the Menu array (arbitrary depth)\n  const menuXml = [\n    \"\\t\\t<key>Menu</key>\",\n    \"\\t\\t<array>\",\n    ...menuPath.map((s) => `\\t\\t\\t<string>${s ?? \"\"}</string>`),\n    \"\\t\\t</array>\",\n  ];\n\n  // Only emit StopOnFailure if explicitly false (KM omits when true)\n  function renderSelectMenuStopOnFailureXml(stopOnFailure?: boolean): string[] {\n    if (stopOnFailure === false) {\n      return [\"\\t\\t<key>StopOnFailure</key>\", \"\\t\\t<false/>\"];\n    }\n    return [];\n  }\n\n  // Assemble the full XML fragment in canonical KM order\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SelectMenuItem</string>\",\n    ...menuXml,\n    ...renderNotifyOnFailureXml(notifyOnFailure),\n    ...renderSelectMenuStopOnFailureXml(stopOnFailure),\n    \"\\t\\t<key>TargetApplication</key>\",\n    ...appLines.map((line) => `\\t\\t${line}`),\n    \"\\t\\t<key>TargetingType</key>\",\n    `\\t\\t<string>${target}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.showStatusMenu.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\n/**\n * Options for the ShowStatusMenu virtual action.\n * This action currently takes no parameters, but the interface is provided for future extensibility.\n */\nexport interface ShowStatusMenuOptions {}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro ShowStatusMenu action.\n * This action displays the Keyboard Maestro status menu. It takes no parameters.\n *\n * @param opts - ShowStatusMenuOptions (currently unused, for future extensibility)\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualShowStatusMenu()\n */\nexport function createVirtualShowStatusMenu(\n  opts: ShowStatusMenuOptions = {},\n): VirtualAction {\n  // The only non-default key is IsDisclosed, which is always false in ground truth.\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>IsDisclosed</key>\",\n    \"\\t\\t<false/>\", // Unknown what this does, but it's always false in ground truth, and cannot be configured in the KM UI.\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>SystemAction</string>\",\n    \"\\t\\t<key>SystemAction</key>\",\n    \"\\t\\t<string>ShowStatusMenu</string>\",\n    \"\\t</dict>\",\n  ];\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.useVariable.ts\n\n/**\n * Supported actions for the UseVariable virtual action.\n */\nexport type UseVariableAction =\n  | \"SetMouse\"\n  | \"SetWindowPosition\"\n  | \"SetWindowSize\"\n  | \"SetWindowFrame\"\n  | \"SetWindowByName\"\n  | \"SetWindowByNameContains\"\n  | \"SetWindowByNameMatches\"\n  | \"SetApplicationByName\"\n  | \"SetApplicationByNameContains\"\n  | \"SetApplicationByNameMatches\"\n  | \"SetSystemVolume\";\n\n/**\n * Options for the UseVariable virtual action.\n */\nexport interface UseVariableOptions {\n  /** The variable name to use. */\n  variable: string;\n  /** The action to perform with the variable. */\n  action: UseVariableAction;\n  /** If true, abort macro on failure (default false). */\n  stopOnFailure?: boolean;\n  /** If false, do not notify on failure (default true). */\n  notifyOnFailure?: boolean;\n}\n\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport { formatXmlAction } from \"../utils/utils.xml\";\n\n/**\n * Creates a virtual UseVariable action for Keyboard Maestro.\n *\n * @param opts - UseVariableOptions\n * @returns VirtualAction\n *\n * The UID is auto-generated. MacroActionType is always \"UseVariable\".\n *\n * Example XML output:\n * <dict>\n *   <key>Action</key>\n *   <string>SetMouse</string>\n *   <key>ActionUID</key>\n *   <integer>...</integer>\n *   <key>MacroActionType</key>\n *   <string>UseVariable</string>\n *   <key>Variable</key>\n *   <string>...</string>\n *   ...\n * </dict>\n */\nexport function createVirtualUseVariable(\n  opts: UseVariableOptions,\n): import(\"./index\").VirtualAction {\n  const {\n    variable,\n    action,\n    stopOnFailure = false,\n    notifyOnFailure = true,\n  } = opts;\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>Action</key>\",\n    \"\\t\\t<string>\" + action + \"</string>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>UseVariable</string>\",\n    ...(notifyOnFailure === false\n      ? renderNotifyOnFailureXml(notifyOnFailure)\n      : []),\n    ...(stopOnFailure === true ? renderStopOnFailureXml(stopOnFailure) : []),\n    \"\\t\\t<key>Variable</key>\",\n    \"\\t\\t<string>\" + (variable || \"\") + \"</string>\",\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.group.ts\n\nimport { escapeForXml, formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderTimeoutXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./types\";\nimport chalk from \"chalk\";\n\n/**\n * Options for building a Group action.\n */\nexport interface GroupOptions {\n  /**\n   * Name of the group (displayed in Keyboard Maestro editor).\n   */\n  name: string;\n\n  /**\n   * Array of virtual actions that belong to this group.\n   */\n  actions: VirtualAction[];\n\n  /**\n   * Whether the macro should abort if the group times out.\n   * @default true\n   */\n  timeOutAbortsMacro?: boolean;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Group action.\n *\n * Groups are organizational containers that can hold multiple actions and provide\n * visual structure in the Keyboard Maestro editor. They can have names, colors,\n * and timeout behavior.\n *\n * @param opts - GroupOptions with name, actions array, and optional styling\n * @returns A VirtualAction that will emit the correct KM XML when toXml() is called\n *\n * @example\n * // Basic group with actions\n * createVirtualGroup({\n *   name: \"Setup Variables\",\n *   actions: [\n *     createVirtualSetVariable({ variable: \"Width\", text: \"1920\" }),\n *     createVirtualSetVariable({ variable: \"Height\", text: \"1080\" })\n *   ]\n * })\n *\n * @example\n * // Colored group with timeout settings\n * createVirtualGroup({\n *   name: \"Window Management\",\n *   color: \"Blue\",\n *   timeOutAbortsMacro: false,\n *   actions: [\n *     createVirtualManipulateWindow({ manipulation: \"Center\" }),\n *     createVirtualPause({ time: 0.5 })\n *   ]\n * })\n */\nexport function createVirtualGroup(opts: GroupOptions): VirtualAction {\n  console.log(\n    chalk.cyan(`[VirtualAction] Group:`),\n    chalk.grey(\n      JSON.stringify({ name: opts.name, actionCount: opts.actions.length }),\n    ),\n  );\n\n  const { name, actions, timeOutAbortsMacro = true } = opts;\n\n  // Generate XML for all sub-actions\n  const actionsXml = actions.map((action) => action.toXml()).join(\"\\n\");\n\n  // Build the group XML structure\n  const xmlLines = [\n    \"\\t<dict>\",\n    \"\\t\\t<key>ActionName</key>\",\n    `\\t\\t<string>${escapeForXml(name)}</string>`,\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>Actions</key>\",\n    \"\\t\\t<array>\",\n    // Indent the sub-actions properly (they already have their own indentation)\n    ...actionsXml.split(\"\\n\").map((line) => (line ? \"\\t\\t\" + line : line)),\n    \"\\t\\t</array>\",\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Group</string>\",\n    ...renderTimeoutXml({ timeoutAborts: timeOutAbortsMacro }),\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.comment.ts\n\nimport { formatXmlAction, escapeForXml } from \"../utils/utils.xml\";\nimport { generateActionUIDXml } from \"../utils/template.xml.generic\";\nimport {\n  encodeStyledTextData,\n  generateBasicRtf,\n} from \"../utils/utils.styledText\";\nimport type { VirtualAction } from \"./types\";\n\n/**\n * Options for the Comment virtual action.\n */\nexport interface CommentOptions {\n  /** The title for the comment (shown in the KM editor). */\n  title: string;\n  /** The comment text (will be encoded as styled text). */\n  text: string;\n  /** Optional RTF string for styled text. If not provided, a basic RTF is generated from text. */\n  rtfContent?: string;\n}\n\n/**\n * Constructs a VirtualAction representing a Keyboard Maestro Comment action.\n *\n * The Comment action displays a styled text comment in the macro editor. The text is always encoded as RTF.\n *\n * @param opts - CommentOptions for title, text, and optional RTF content.\n * @returns A VirtualAction that emits the correct KM XML when toXml() is called.\n *\n * @example\n * createVirtualComment({ title: \"My Note\", text: \"This is a comment.\" })\n *\n * @example\n * createVirtualComment({ title: \"Styled\", text: \"Bold text\", rtfContent: \"{\\\\rtf1...}\" })\n */\nexport function createVirtualComment(opts: CommentOptions): VirtualAction {\n  const { title, text, rtfContent } = opts;\n\n  // Use provided RTF or generate a basic RTF from plain text\n  const rtf = rtfContent || generateBasicRtf(text);\n  const styledTextData = encodeStyledTextData(rtf);\n  const indentedData = styledTextData\n    .split(\"\\n\")\n    .map((line) => `\\t\\t${line}`)\n    .join(\"\\n\");\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...generateActionUIDXml(),\n    \"\\t\\t<key>MacroActionType</key>\",\n    \"\\t\\t<string>Comment</string>\",\n    \"\\t\\t<key>StyledText</key>\",\n    \"\\t\\t<data>\",\n    indentedData,\n    \"\\t\\t</data>\",\n    \"\\t\\t<key>Title</key>\",\n    `\\t\\t<string>${escapeForXml(title)}</string>`,\n    \"\\t</dict>\",\n  ];\n\n  return { toXml: () => formatXmlAction(xmlLines.join(\"\\n\")) };\n}\n","//FILE: src/virtual_actions/kmjs.virtualAction.scrollWheelEvent.ts\n\nimport { formatXmlAction } from \"../utils/utils.xml\";\nimport {\n  generateActionUIDXml,\n  renderStopOnFailureXml,\n  renderNotifyOnFailureXml,\n} from \"../utils/template.xml.generic\";\nimport type { VirtualAction } from \"./index\";\nimport type { ScrollDirection } from \"./types/types.input\";\n\n/**\n * Options for creating a ScrollWheelEvent virtual action.\n */\nexport interface ScrollWheelEventOptions {\n  /** Amount to scroll (pixels or lines, as string or number) */\n  scrollAmount: string | number;\n  /** Direction to scroll: Up, Down, Left, Right */\n  direction: ScrollDirection;\n  /** If true, add <key>StopOnFailure</key><true/> */\n  stopOnFailure?: boolean;\n  /** If false, add <key>NotifyOnFailure</key><false/> */\n  notifyOnFailure?: boolean;\n  /** Optionally override ActionUID (for test parity) */\n  actionUID?: number;\n}\n\n/**\n * Creates a Keyboard Maestro virtual action for ScrollWheelEvent.\n *\n * @param opts - Options for scroll wheel event\n * @returns VirtualAction\n */\nexport function createVirtualScrollWheelEvent(\n  opts: ScrollWheelEventOptions,\n): VirtualAction {\n  const { scrollAmount, direction, stopOnFailure, notifyOnFailure, actionUID } =\n    opts;\n\n  // Use provided UID or let KM assign one\n  const actionUIDXml =\n    actionUID !== undefined\n      ? [`\\t<key>ActionUID</key>`, `\\t<integer>${actionUID}</integer>`]\n      : generateActionUIDXml();\n\n  const xmlLines = [\n    \"\\t<dict>\",\n    ...actionUIDXml,\n    \"\\t<key>MacroActionType</key>\",\n    \"\\t<string>ScrollWheelEvent</string>\",\n    ...renderNotifyOnFailureXml(notifyOnFailure),\n    \"\\t<key>ScrollAmountExpression</key>\",\n    `\\t<string>${scrollAmount}</string>`,\n    \"\\t<key>ScrollDirection</key>\",\n    `\\t<string>${direction}</string>`,\n    ...renderStopOnFailureXml(stopOnFailure),\n    \"\\t</dict>\",\n  ];\n\n  return {\n    toXml: () => formatXmlAction(xmlLines.join(\"\\n\")),\n  };\n}\n","'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else if (tags.length === 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' has not been opened.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    let entityName, val;\n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)([0-9]*(\\.[0-9]*)?)$/;\n// const octRegex = /^0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n \nconst consider = {\n    hex :  true,\n    // oct: false,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true,\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    \n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if(str===\"0\") return 0;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return parse_int(trimmedStr, 16);\n    // }else if (options.oct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    }else if (trimmedStr.search(/[eE]/)!== -1) { //eNotation\n        const notation = trimmedStr.match(/^([-\\+])?(0*)([0-9]*(\\.[0-9]*)?[eE][-\\+]?[0-9]+)$/); \n        // +00.123 => [ , '+', '00', '.123', ..\n        if(notation){\n            // console.log(notation)\n            if(options.leadingZeros){ //accept with leading zeros\n                trimmedStr = (notation[1] || \"\") + notation[3];\n            }else{\n                if(notation[2] === \"0\" && notation[3][0]=== \".\"){ //valid number\n                }else{\n                    return str;\n                }\n            }\n            return options.eNotation ? Number(trimmedStr) : str;\n        }else{\n            return str;\n        }\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        // +00.123 => [ , '+', '00', '.123', ..\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else if(options.leadingZeros && leadingZeros===str) return 0; //00\n            \n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    return (numTrimmedByZeros === numStr) || (sign+numTrimmedByZeros === numStr) ? num : str\n                }else  {\n                    return (trimmedStr === numStr) || (trimmedStr === sign+numStr) ? num : str\n                }\n            }\n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\n\nfunction parse_int(numStr, base){\n    //polyfill\n    if(parseInt) return parseInt(numStr, base);\n    else if(Number.parseInt) return Number.parseInt(numStr, base);\n    else if(window && window.parseInt) return window.parseInt(numStr, base);\n    else throw new Error(\"parseInt, Number.parseInt, window.parseInt are not supported\")\n}\n\nmodule.exports = toNumber;","function getIgnoreAttributesFn(ignoreAttributes) {\n    if (typeof ignoreAttributes === 'function') {\n        return ignoreAttributes\n    }\n    if (Array.isArray(ignoreAttributes)) {\n        return (attrName) => {\n            for (const pattern of ignoreAttributes) {\n                if (typeof pattern === 'string' && attrName === pattern) {\n                    return true\n                }\n                if (pattern instanceof RegExp && pattern.test(attrName)) {\n                    return true\n                }\n            }\n        }\n    }\n    return () => false\n}\n\nmodule.exports = getIgnoreAttributesFn","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\n// const regx =\n//   '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n//   .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n      \"num_dec\": { regex: /&#([0-9]{1,7});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 10)) },\n      \"num_hex\": { regex: /&#x([0-9a-fA-F]{1,6});/g, val : (_, str) => String.fromCharCode(Number.parseInt(str, 16)) },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (this.options.ignoreAttributes !== true && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      if (this.ignoreAttributesFn(attrName, jPath)) {\n        continue\n      }\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true, true);\n        if(val == undefined) val = \"\";\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            \n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = currentNode.child.length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substring(0, separatorIndex);\n    tagExp = tagExp.substring(separatorIndex + 1).trimStart();\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\nconst getIgnoreAttributesFn = require('../ignoreAttributes')\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes === true || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.ignoreAttributesFn = getIgnoreAttributesFn(this.options.ignoreAttributes)\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0, []).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level, ajPath) {\n  let attrStr = '';\n  let val = '';\n  const jPath = ajPath.join('.')\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key === this.options.cdataPropName) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr && !this.ignoreAttributesFn(attr, jPath)) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      } else if (!attr) {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      let listTagAttr = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup){\n            const result = this.j2x(item, level + 1, ajPath.concat(key));\n            listTagVal += result.val;\n            if (this.options.attributesGroupName && item.hasOwnProperty(this.options.attributesGroupName)) {\n              listTagAttr += result.attrStr\n            }\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level, ajPath)\n          }\n        } else {\n          if (this.options.oneListGroup) {\n            let textValue = this.options.tagValueProcessor(key, item);\n            textValue = this.replaceEntitiesValue(textValue);\n            listTagVal += textValue;\n          } else {\n            listTagVal += this.buildTextValNode(item, key, '', level);\n          }\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, listTagAttr, level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level, ajPath)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level, ajPath) {\n  const result = this.j2x(object, level + 1, ajPath.concat(key));\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}","// FILE: src/utils/utils.kmet.ts\n\n// -------------------------------------------------------------------------------------------------\n// KMET (Keyboard Maestro Edit‑as‑Text) — Node/TypeScript helpers\n// -------------------------------------------------------------------------------------------------\n// This module condenses the functionality of Dan Thomas's excellent \"KMET: Edit KM Objects as Text\"\n// macro library (v1.3)¹ into a single, strongly‑typed utility that can be consumed by JavaScript/\n// TypeScript projects.  It focuses on the *text* transformation pieces rather than the KM‑UI glue\n// (copy‑as‑XML menus, GUI scripting, etc.), which are better handled by existing KMJS helpers.\n//\n// ¹ https://forum.keyboardmaestro.com/t/kmet-edit-km-objects-as-text-search-replace-version-1-3/22549\n//\n// Credits:\n//   • Dan Thomas — original KMET macros and JavaScript for Automation logic.\n//   • KM community members who contributed testing and refinements.\n// -------------------------------------------------------------------------------------------------\n// Key capabilities exposed here:\n//   • encodeTextForJson / encodeTextForXml – escape arbitrary strings so they can be embedded in JSON\n//     or XML literal values inside KM actions/macros.\n//   • xmlToJson / jsonToXml                – loss‑tolerant bidirectional conversion between KM's\n//     plist‑XML snippets and a more readable JSON form, using fast‑xml‑parser under the hood.\n//   • searchReplaceInText                  – one‑shot RegExp or literal search‑and‑replace that plays\n//     nicely with either XML or JSON blocks (handy for variable refactors).\n//   • CLI (ts‑node)                        – run `yarn kmet` for a mini‑tool that wraps the helpers\n//     for quick one‑off terminal use (encode, decode, convert, replace, etc.).\n//\n// All functions log through chalk‑colourised messages so that errors/warnings stand out during\n// development but remain silent when imported as a library.\n// -------------------------------------------------------------------------------------------------\n// Usage examples:\n//   import {\n//     encodeTextForJson,\n//     encodeTextForXml,\n//     xmlToJson,\n//     jsonToXml,\n//     searchReplaceInText,\n//   } from \"./utils/utils.kmet\";\n//\n//   const escaped = encodeTextForXml(\"< & > ' \\\"\");\n//   const json    = xmlToJson(kmXmlSnippet);\n//   const xml     = jsonToXml(jsonObject);\n//   const updated = searchReplaceInText(json, /Local_/g, \"Global_\");\n// -------------------------------------------------------------------------------------------------\n\nimport chalk from \"chalk\";\nimport { XMLParser, XMLBuilder } from \"fast-xml-parser\";\n// Import base XML escaping function to avoid code duplication\n// This provides standard XML entity escaping for <>&'\" characters\nimport { escapeForXml } from \"./utils.xml\";\n\n// ------------------------------\n// XML Parser Configuration\n// ------------------------------\n// These options configure fast-xml-parser to handle Keyboard Maestro's plist XML format\n// in a way that preserves the structure and allows round-trip conversion\n\n/**\n * Configuration for parsing XML to JavaScript objects.\n * Tailored for Keyboard Maestro's plist XML structure.\n */\nconst XML_PARSE_OPTIONS = {\n  /** Preserve XML attributes during parsing (essential for KM XML) */\n  ignoreAttributes: false,\n  /** Prefix for attribute names to distinguish from element content */\n  attributeNamePrefix: \"@_\", // e.g., id=\"1\" becomes \"@_id\": \"1\"\n  /** Name for text content nodes when mixed with attributes */\n  textNodeName: \"#text\", // e.g., <item id=\"1\">text</item> becomes { \"@_id\": \"1\", \"#text\": \"text\" }\n  /** Don't trim whitespace from values (preserves KM formatting) */\n  trimValues: false,\n  /** Don't parse tag values as numbers/booleans (keep as strings) */\n  parseTagValue: false,\n  /** Don't parse attribute values as numbers/booleans (keep as strings) */\n  parseAttributeValue: false,\n};\n\n/**\n * Configuration for building XML from JavaScript objects.\n * Matches Keyboard Maestro's formatting conventions.\n */\nconst XML_BUILD_OPTIONS = {\n  /** Include attributes in XML output */\n  ignoreAttributes: false,\n  /** Attribute prefix must match parsing configuration */\n  attributeNamePrefix: \"@_\",\n  /** Text node name must match parsing configuration */\n  textNodeName: \"#text\",\n  /** Pretty-print XML with proper indentation */\n  format: true,\n  /** Use tabs for indentation (matches KM's style) */\n  indentBy: \"\\t\",\n  /** Don't suppress empty nodes (preserves KM structure) */\n  suppressEmptyNode: false,\n};\n\n// Lazy-loaded parser and builder instances to avoid CEP environment issues\nlet xmlParser: XMLParser | null = null;\nlet xmlBuilder: XMLBuilder | null = null;\n\nfunction getXmlParser(): XMLParser {\n  if (!xmlParser) {\n    xmlParser = new XMLParser(XML_PARSE_OPTIONS);\n  }\n  return xmlParser;\n}\n\nfunction getXmlBuilder(): XMLBuilder {\n  if (!xmlBuilder) {\n    xmlBuilder = new XMLBuilder(XML_BUILD_OPTIONS);\n  }\n  return xmlBuilder;\n}\n\n// -------------------------------------------------------------------------------------------------\n// Text Encoding Functions\n// -------------------------------------------------------------------------------------------------\n// These functions prepare raw text for safe inclusion in JSON or XML contexts.\n// They handle special characters that would otherwise break the target format.\n\n/**\n * Escape a raw string so it is safe for inclusion inside **JSON** double‑quoted literals.\n *\n * This function uses JSON.stringify's built-in escaping mechanism to handle all JSON\n * special characters (quotes, backslashes, control characters, etc.) and then strips\n * the outer quotes to return just the escaped content.\n *\n * @param raw - The raw string that may contain JSON special characters\n * @returns The escaped string ready for embedding in JSON, without outer quotes\n * @throws {Error} If the input cannot be JSON-encoded (extremely rare)\n *\n * @example\n * ```typescript\n * encodeTextForJson('He said \"Hello\" and used \\\\backslash')\n * // Returns: 'He said \\\\\"Hello\\\\\" and used \\\\\\\\backslash'\n * ```\n */\nexport function encodeTextForJson(raw: string): string {\n  try {\n    // JSON.stringify handles all JSON escaping rules correctly\n    // We slice(1, -1) to remove the outer quotes that stringify adds\n    return JSON.stringify(raw).slice(1, -1);\n  } catch (err) {\n    // Log error with context for debugging\n    const msg = `[utils.kmet] Failed to encode text for JSON – ${(err as Error).message}`;\n    console.error(chalk.red(msg));\n    throw err;\n  }\n}\n\n/**\n * Escape a raw string so it is safe for inclusion inside **XML** text nodes or attribute values.\n *\n * This function extends the base XML escaping from utils.xml with additional backslash\n * handling required for JavaScript for Automation (JXA) compatibility in Keyboard Maestro.\n *\n * The escaping process:\n * 1. Apply standard XML entity escaping for <>&'\" characters\n * 2. Double-escape backslashes for JXA string handling\n *\n * @param raw - The raw string that may contain XML special characters\n * @returns The escaped string ready for embedding in XML\n *\n * @example\n * ```typescript\n * encodeTextForXml('<tag attr=\"value\">Path\\\\to\\\\file & more</tag>')\n * // Returns: '&lt;tag attr=&quot;value&quot;&gt;Path\\\\\\\\to\\\\\\\\file &amp; more&lt;/tag&gt;'\n * ```\n */\nexport function encodeTextForXml(raw: string): string {\n  // First apply standard XML escaping from our shared utility\n  // This handles: < > & ' \" characters\n  const xmlEscaped = escapeForXml(raw);\n\n  // Then handle backslashes for JXA compatibility\n  // JXA requires double-escaped backslashes in string literals\n  return xmlEscaped.replace(/\\\\/g, \"\\\\\\\\\");\n}\n\n// -------------------------------------------------------------------------------------------------\n// XML ⇄ JSON Conversion Functions\n// -------------------------------------------------------------------------------------------------\n// These functions provide bidirectional conversion between Keyboard Maestro's plist XML format\n// and a more human-readable JSON representation for easier editing and manipulation.\n\n/**\n * Options for controlling XML to JSON conversion output format.\n */\nexport interface XmlToJsonOptions {\n  /**\n   * Whether to pretty-print the JSON output with indentation.\n   * @default true - Uses 2-space indentation for readability\n   */\n  pretty?: boolean;\n}\n\n/**\n * Convert a **Keyboard Maestro plist‑XML snippet** to JSON.\n *\n * This function parses KM's XML format (which uses Apple's plist structure) and converts\n * it to a JSON representation that's easier to read and manipulate programmatically.\n *\n * The conversion preserves:\n * - XML attributes (prefixed with @_)\n * - Text content (stored as #text when mixed with attributes)\n * - Nested structure and arrays\n * - Original data types as strings (no automatic type conversion)\n *\n * @param xml - The XML string to convert (typically a KM action or macro snippet)\n * @param options - Configuration options for the conversion\n * @returns JSON string representation of the XML structure\n * @throws {Error} If the XML is malformed or cannot be parsed\n *\n * @example\n * ```typescript\n * const kmXml = '<dict><key>MacroActionType</key><string>Notification</string></dict>';\n * const json = xmlToJson(kmXml);\n * // Returns formatted JSON with dict.key and dict.string arrays\n * ```\n */\nexport function xmlToJson(xml: string, options: XmlToJsonOptions = {}): string {\n  try {\n    // Parse XML into JavaScript object using our configured parser\n    const jsObj = getXmlParser().parse(xml);\n\n    // Convert to JSON string with optional pretty-printing\n    // Default to 2-space indentation for readability, or compact if pretty=false\n    return JSON.stringify(jsObj, null, (options.pretty ?? true) ? 2 : 0);\n  } catch (err) {\n    // Provide context about what failed for easier debugging\n    const msg = `[utils.kmet] xmlToJson() failed – ${(err as Error).message}`;\n    console.error(chalk.red(msg));\n    throw err;\n  }\n}\n\n/**\n * Options for controlling JSON to XML conversion output format.\n */\nexport interface JsonToXmlOptions {\n  /**\n   * Whether to minify the XML output (remove indentation and newlines).\n   * @default false - Pretty-prints with tab indentation to match KM style\n   */\n  minify?: boolean;\n}\n\n/**\n * Convert **JSON** (string or object) back to plist‑XML suitable for Keyboard Maestro.\n *\n * This function takes a JSON representation (either as a string or JavaScript object)\n * and converts it back to the plist XML format that Keyboard Maestro expects.\n *\n * The conversion handles:\n * - Attribute reconstruction (from @_ prefixed properties)\n * - Text content reconstruction (from #text properties)\n * - Proper XML formatting with KM-style indentation\n * - Array serialization to repeated XML elements\n *\n * @param json - The JSON to convert (string or object)\n * @param options - Configuration options for the conversion\n * @returns XML string in KM's plist format\n * @throws {Error} If the JSON is malformed or cannot be converted\n *\n * @example\n * ```typescript\n * const jsonObj = { dict: { key: \"MacroActionType\", string: \"Notification\" } };\n * const xml = jsonToXml(jsonObj);\n * // Returns properly formatted KM XML with tabs and structure\n * ```\n */\nexport function jsonToXml(\n  json: string | Record<string, unknown>,\n  options: JsonToXmlOptions = {},\n): string {\n  try {\n    // Parse JSON string to object if needed, or use object directly\n    const jsObj = typeof json === \"string\" ? JSON.parse(json) : json;\n\n    // Choose builder based on minification preference\n    // Minified version removes formatting for compact output\n    const builder = options.minify\n      ? new XMLBuilder({ ...XML_BUILD_OPTIONS, format: false })\n      : getXmlBuilder();\n\n    // Build XML from JavaScript object\n    return builder.build(jsObj);\n  } catch (err) {\n    // Provide context about what failed for easier debugging\n    const msg = `[utils.kmet] jsonToXml() failed – ${(err as Error).message}`;\n    console.error(chalk.red(msg));\n    throw err;\n  }\n}\n\n// -------------------------------------------------------------------------------------------------\n// Text Search & Replace Functions\n// -------------------------------------------------------------------------------------------------\n// These functions provide safe text manipulation within XML/JSON structures without breaking\n// the underlying format. Useful for bulk operations like variable renaming.\n\n/**\n * Options for controlling search and replace behavior.\n */\nexport interface SearchReplaceOptions {\n  /**\n   * Treat the search pattern as literal text instead of a regular expression.\n   * When true, special regex characters are automatically escaped.\n   * @default false - Patterns are treated as regular expressions\n   */\n  literal?: boolean;\n\n  /**\n   * Enable case-insensitive matching.\n   * Only applies when using literal patterns or when the pattern is a string.\n   * @default false - Case-sensitive matching\n   */\n  ignoreCase?: boolean;\n}\n\n/**\n * Perform a search‑and‑replace on an XML/JSON string *without* breaking its structure.\n *\n * This function operates at the text level, making it safe for bulk operations like\n * variable renaming across KM macros. It's designed to work with both XML and JSON\n * content while preserving the underlying structure.\n *\n * **Important**: This function works on raw text, so callers must ensure that\n * replacements don't break XML/JSON syntax (e.g., don't replace quotes or brackets\n * that are part of the structure).\n *\n * The function supports:\n * - Literal string replacement (with automatic regex escaping)\n * - Regular expression replacement with capture groups\n * - Case-sensitive and case-insensitive matching\n * - Global replacement (all occurrences)\n *\n * @param input - The XML/JSON string to search within\n * @param searchPattern - String or RegExp to search for\n * @param replacement - Replacement string (supports $1, $2, etc. for regex capture groups)\n * @param opts - Options controlling search behavior\n * @returns The input string with all matches replaced\n *\n * @example\n * ```typescript\n * // Literal replacement (safe for special characters)\n * searchReplaceInText(xmlString, \"Local_OldVar\", \"Global_NewVar\", { literal: true });\n *\n * // Regex replacement with capture groups\n * searchReplaceInText(xmlString, /Local_(\\w+)/g, \"Global_$1\");\n *\n * // Case-insensitive literal replacement\n * searchReplaceInText(jsonString, \"oldvalue\", \"newvalue\", { literal: true, ignoreCase: true });\n * ```\n */\nexport function searchReplaceInText(\n  input: string,\n  searchPattern: string | RegExp,\n  replacement: string,\n  opts: SearchReplaceOptions = {},\n): string {\n  let pattern: RegExp;\n\n  // Handle literal string patterns vs regex patterns\n  if (opts.literal || typeof searchPattern === \"string\") {\n    // For literal patterns, we need to escape special regex characters\n    // to prevent them from being interpreted as regex syntax\n    const escaped = (\n      typeof searchPattern === \"string\" ? searchPattern : String(searchPattern)\n    ).replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& represents the matched character\n\n    // Create regex with appropriate flags\n    // 'g' for global (replace all), 'i' for case-insensitive if requested\n    pattern = new RegExp(escaped, opts.ignoreCase ? \"gi\" : \"g\");\n  } else {\n    // Use the provided RegExp directly\n    pattern = searchPattern as RegExp;\n  }\n\n  // Perform the replacement using the constructed pattern\n  return input.replace(pattern, replacement);\n}\n\n// -------------------------------------------------------------------------------------------------\n// Command Line Interface (CLI)\n// -------------------------------------------------------------------------------------------------\n// This section provides a simple CLI wrapper around the KMET functions for quick terminal use.\n// The CLI supports encoding, conversion, and search/replace operations on files.\n\n/**\n * Parse command line arguments into a structured options object.\n *\n * This function processes process.argv to extract flags and their values,\n * supporting both --flag=value and --flag value formats.\n *\n * @param argv - Command line arguments array (typically process.argv)\n * @returns Object mapping flag names to their values (string or boolean)\n */\nfunction parseCliFlags(argv: string[]): Record<string, string | boolean> {\n  const out: Record<string, string | boolean> = {};\n\n  // Start from index 2 to skip 'node' and script name\n  for (let i = 2; i < argv.length; i++) {\n    const arg = argv[i];\n\n    // Only process arguments that start with --\n    if (arg.startsWith(\"--\")) {\n      const [k, v] = arg.split(\"=\");\n\n      if (v !== undefined) {\n        // Handle --flag=value format\n        out[k.slice(2)] = v; // Remove -- prefix\n      } else {\n        // Handle --flag value format or boolean flags\n        const next = argv[i + 1];\n        if (next && !next.startsWith(\"--\")) {\n          // Next argument is the value\n          out[k.slice(2)] = next;\n          i++; // Skip the value argument in next iteration\n        } else {\n          // Boolean flag (no value)\n          out[k.slice(2)] = true;\n        }\n      }\n    }\n  }\n\n  return out;\n}\n\n/**\n * Display CLI help information with usage examples and flag descriptions.\n *\n * This function outputs comprehensive help text including:\n * - Usage examples for common operations\n * - Description of all available flags\n * - Expected input/output formats\n */\nfunction cliHelp(): void {\n  console.log(`\n${chalk.bold(\"KMET CLI – quick Keyboard Maestro text‑object helper\")}\n\nExamples:\n  ${chalk.cyan(\"yarn kmet --encode-json --text 'He said \\\"hello\\\" <&>'\")}\n  ${chalk.cyan(\"yarn kmet --encode-xml  --text '5 < 7 & 7 > 5'\")}\n  ${chalk.cyan(\"yarn kmet --xml2json --file ./object.xml > object.json\")}\n  ${chalk.cyan(\"yarn kmet --json2xml --file ./object.json > object.xml\")}\n  ${chalk.cyan(\"yarn kmet --replace --file ./macro.json --find Local_ --to Global_ > out.json\")}\n\nFlags:\n  --encode-json           Escape a plain string for JSON embedding.\n  --encode-xml            Escape a plain string for XML embedding.\n  --xml2json              Convert plist‑XML → JSON.\n  --json2xml              Convert JSON → plist‑XML.\n  --replace               Search & replace within file contents.\n  --text   <string>       Raw text for encode operations.\n  --file   <path>         Path to input file (XML or JSON).\n  --find   <pattern>      String/RegExp (default literal string) to search for.\n  --to     <string>       Replacement string (used with --replace).\n  --regex                 Treat --find as a regular expression.\n  --ignore-case           Case‑insensitive search.\n`);\n}\n\n/**\n * Main CLI execution function that processes arguments and performs requested operations.\n *\n * This async function:\n * 1. Parses command line arguments\n * 2. Determines which operation to perform\n * 3. Executes the operation with appropriate error handling\n * 4. Outputs results to stdout or shows help\n *\n * Operations supported:\n * - Text encoding for JSON/XML\n * - File conversion between XML and JSON\n * - Search and replace in files\n *\n * @throws {Error} If file operations fail or required arguments are missing\n */\nasync function runCli(): Promise<void> {\n  // Import fs/promises dynamically to avoid loading it unless CLI is used\n  const fs = await import(\"fs/promises\");\n  const args = parseCliFlags(process.argv);\n\n  // Handle JSON encoding operation\n  if (args[\"encode-json\"]) {\n    if (!args.text) return cliHelp(); // Show help if required argument missing\n    console.log(encodeTextForJson(String(args.text)));\n    return;\n  }\n\n  // Handle XML encoding operation\n  if (args[\"encode-xml\"]) {\n    if (!args.text) return cliHelp(); // Show help if required argument missing\n    console.log(encodeTextForXml(String(args.text)));\n    return;\n  }\n\n  // Handle XML to JSON conversion\n  if (args[\"xml2json\"]) {\n    if (!args.file) return cliHelp(); // Show help if required argument missing\n    const xml = await fs.readFile(String(args.file), \"utf8\");\n    console.log(xmlToJson(xml));\n    return;\n  }\n\n  // Handle JSON to XML conversion\n  if (args[\"json2xml\"]) {\n    if (!args.file) return cliHelp(); // Show help if required argument missing\n    const json = await fs.readFile(String(args.file), \"utf8\");\n    console.log(jsonToXml(json));\n    return;\n  }\n\n  // Handle search and replace operation\n  if (args.replace) {\n    // Validate required arguments\n    if (!args.file || !args.find || args.to === undefined) return cliHelp();\n\n    // Read input file\n    const text = await fs.readFile(String(args.file), \"utf8\");\n\n    // Perform search and replace with appropriate pattern type\n    const updated = searchReplaceInText(\n      text,\n      // Create regex if --regex flag is set, otherwise use literal string\n      args.regex\n        ? new RegExp(String(args.find), args[\"ignore-case\"] ? \"gi\" : \"g\")\n        : String(args.find),\n      String(args.to),\n      {\n        literal: !args.regex, // Literal mode unless --regex is specified\n        ignoreCase: !!args[\"ignore-case\"], // Case-insensitive if flag is set\n      },\n    );\n\n    console.log(updated);\n    return;\n  }\n\n  // No valid operation specified, show help\n  cliHelp();\n}\n\n// -------------------------------------------------------------------------------------------------\n// CLI Entry Point\n// -------------------------------------------------------------------------------------------------\n// This section handles CLI execution when the script is run directly (not imported as a module).\n\n// Check if this script is being run directly (not imported)\n// Use try-catch to avoid issues in environments where require.main might not exist\ntry {\n  if (require.main === module) {\n    // Execute CLI with proper error handling\n    runCli().catch((err) => {\n      // Log any uncaught errors with context and exit with error code\n      console.error(chalk.red(\"[KMET CLI] Uncaught error:\"), err);\n      process.exit(1);\n    });\n  }\n} catch (error) {\n  // Silently ignore if require.main is not available (e.g., in CEP environments)\n}\n"],"names":["styles","require$$0","require$$1","require$$2","require$$3","require$$4","XMLParser","XMLBuilder"],"mappings":"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","x_google_ignoreList":[0,1,2,3,82,83,84,85,86,87,88,89,90,91,92,93,94]}